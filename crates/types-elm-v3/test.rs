#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use chrono::{DateTime, Utc};
use serde::{de, Deserialize, Serialize};
use std::{collections::HashMap, ops};
use types_common::{
    DurationType, EmailAddress, EnumDeserialize, OneOrMany, PositiveInteger, TagType,
};
/// Error types.
pub mod error {
    /// Error from a TryFrom or FromStr implementation.
    pub struct ConversionError(std::borrow::Cow<'static, str>);
    impl std::error::Error for ConversionError {}
    impl std::fmt::Display for ConversionError {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
            std::fmt::Display::fmt(&self.0, f)
        }
    }
    impl std::fmt::Debug for ConversionError {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
            std::fmt::Debug::fmt(&self.0, f)
        }
    }
    impl From<&'static str> for ConversionError {
        fn from(value: &'static str) -> Self {
            Self(value.into())
        }
    }
    impl From<String> for ConversionError {
        fn from(value: String) -> Self {
            Self(value.into())
        }
    }
}
#[serde(rename_all = "camelCase")]
pub struct EuropassEdcCredential {
    #[serde(rename = "@context")]
    pub context: EuropassEdcCredentialContext,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credential_profiles: Option<OneOrMany<Concept>>,
    ///One or more schemas that validate the Verifiable Credential.
    pub credential_schema: OneOrMany<CredentialSchema>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credential_status: Option<EuropassEdcCredentialCredentialStatus>,
    pub credential_subject: OneOrMany<AgentOrPersonOrOrganisation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display_parameter: Option<DisplayParameter>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub evidence: Option<OneOrMany<Evidence>>,
    ///Globally unique identifier for the issued credential. It can be a UUID or another globally unique identifier.
    pub id: String,
    ///DID of the credential issuer
    pub issuer: Organisation,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub terms_of_use: Option<OneOrMany<TermsOfUseValue>>,
    ///Full type chain, used to identify the credential base types
    #[serde(rename = "type")]
    pub type_: Vec<String>,
    ///Defines the earliest point when the credential becomes valid.
    pub valid_from: DateTime<Utc>,
    ///Defines the latest point when the credential ceases to be valid.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub valid_until: Option<DateTime<Utc>>,
}
#[automatically_derived]
impl ::core::clone::Clone for EuropassEdcCredential {
    #[inline]
    fn clone(&self) -> EuropassEdcCredential {
        EuropassEdcCredential {
            context: ::core::clone::Clone::clone(&self.context),
            credential_profiles: ::core::clone::Clone::clone(&self.credential_profiles),
            credential_schema: ::core::clone::Clone::clone(&self.credential_schema),
            credential_status: ::core::clone::Clone::clone(&self.credential_status),
            credential_subject: ::core::clone::Clone::clone(&self.credential_subject),
            display_parameter: ::core::clone::Clone::clone(&self.display_parameter),
            evidence: ::core::clone::Clone::clone(&self.evidence),
            id: ::core::clone::Clone::clone(&self.id),
            issuer: ::core::clone::Clone::clone(&self.issuer),
            terms_of_use: ::core::clone::Clone::clone(&self.terms_of_use),
            type_: ::core::clone::Clone::clone(&self.type_),
            valid_from: ::core::clone::Clone::clone(&self.valid_from),
            valid_until: ::core::clone::Clone::clone(&self.valid_until),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EuropassEdcCredential {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "context",
            "credential_profiles",
            "credential_schema",
            "credential_status",
            "credential_subject",
            "display_parameter",
            "evidence",
            "id",
            "issuer",
            "terms_of_use",
            "type_",
            "valid_from",
            "valid_until",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.context,
            &self.credential_profiles,
            &self.credential_schema,
            &self.credential_status,
            &self.credential_subject,
            &self.display_parameter,
            &self.evidence,
            &self.id,
            &self.issuer,
            &self.terms_of_use,
            &self.type_,
            &self.valid_from,
            &&self.valid_until,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "EuropassEdcCredential",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for EuropassEdcCredential {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "@context" => _serde::__private::Ok(__Field::__field0),
                        "credentialProfiles" => _serde::__private::Ok(__Field::__field1),
                        "credentialSchema" => _serde::__private::Ok(__Field::__field2),
                        "credentialStatus" => _serde::__private::Ok(__Field::__field3),
                        "credentialSubject" => _serde::__private::Ok(__Field::__field4),
                        "displayParameter" => _serde::__private::Ok(__Field::__field5),
                        "evidence" => _serde::__private::Ok(__Field::__field6),
                        "id" => _serde::__private::Ok(__Field::__field7),
                        "issuer" => _serde::__private::Ok(__Field::__field8),
                        "termsOfUse" => _serde::__private::Ok(__Field::__field9),
                        "type" => _serde::__private::Ok(__Field::__field10),
                        "validFrom" => _serde::__private::Ok(__Field::__field11),
                        "validUntil" => _serde::__private::Ok(__Field::__field12),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"@context" => _serde::__private::Ok(__Field::__field0),
                        b"credentialProfiles" => _serde::__private::Ok(__Field::__field1),
                        b"credentialSchema" => _serde::__private::Ok(__Field::__field2),
                        b"credentialStatus" => _serde::__private::Ok(__Field::__field3),
                        b"credentialSubject" => _serde::__private::Ok(__Field::__field4),
                        b"displayParameter" => _serde::__private::Ok(__Field::__field5),
                        b"evidence" => _serde::__private::Ok(__Field::__field6),
                        b"id" => _serde::__private::Ok(__Field::__field7),
                        b"issuer" => _serde::__private::Ok(__Field::__field8),
                        b"termsOfUse" => _serde::__private::Ok(__Field::__field9),
                        b"type" => _serde::__private::Ok(__Field::__field10),
                        b"validFrom" => _serde::__private::Ok(__Field::__field11),
                        b"validUntil" => _serde::__private::Ok(__Field::__field12),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<EuropassEdcCredential>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = EuropassEdcCredential;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct EuropassEdcCredential",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        EuropassEdcCredentialContext,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct EuropassEdcCredential with 13 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<CredentialSchema>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct EuropassEdcCredential with 13 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<EuropassEdcCredentialCredentialStatus>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<AgentOrPersonOrOrganisation>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct EuropassEdcCredential with 13 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<DisplayParameter>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Evidence>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct EuropassEdcCredential with 13 elements",
                                ),
                            );
                        }
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Organisation,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    8usize,
                                    &"struct EuropassEdcCredential with 13 elements",
                                ),
                            );
                        }
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<TermsOfUseValue>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Vec<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    10usize,
                                    &"struct EuropassEdcCredential with 13 elements",
                                ),
                            );
                        }
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        DateTime<Utc>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    11usize,
                                    &"struct EuropassEdcCredential with 13 elements",
                                ),
                            );
                        }
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    _serde::__private::Ok(EuropassEdcCredential {
                        context: __field0,
                        credential_profiles: __field1,
                        credential_schema: __field2,
                        credential_status: __field3,
                        credential_subject: __field4,
                        display_parameter: __field5,
                        evidence: __field6,
                        id: __field7,
                        issuer: __field8,
                        terms_of_use: __field9,
                        type_: __field10,
                        valid_from: __field11,
                        valid_until: __field12,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        EuropassEdcCredentialContext,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        OneOrMany<CredentialSchema>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<EuropassEdcCredentialCredentialStatus>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        OneOrMany<AgentOrPersonOrOrganisation>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<DisplayParameter>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<OneOrMany<Evidence>>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Organisation> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<TermsOfUseValue>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<Vec<String>> = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<DateTime<Utc>> = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<DateTime<Utc>>,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "@context",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        EuropassEdcCredentialContext,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "credentialProfiles",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "credentialSchema",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<CredentialSchema>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "credentialStatus",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<EuropassEdcCredentialCredentialStatus>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "credentialSubject",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<AgentOrPersonOrOrganisation>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "displayParameter",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DisplayParameter>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "evidence",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Evidence>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("issuer"),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Organisation,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "termsOfUse",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<TermsOfUseValue>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Vec<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "validFrom",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        DateTime<Utc>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "validUntil",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            _ => {
                                let _ = _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map)?;
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("@context")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("credentialSchema")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("credentialSubject")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("id")?
                        }
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("issuer")?
                        }
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("validFrom")?
                        }
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    _serde::__private::Ok(EuropassEdcCredential {
                        context: __field0,
                        credential_profiles: __field1,
                        credential_schema: __field2,
                        credential_status: __field3,
                        credential_subject: __field4,
                        display_parameter: __field5,
                        evidence: __field6,
                        id: __field7,
                        issuer: __field8,
                        terms_of_use: __field9,
                        type_: __field10,
                        valid_from: __field11,
                        valid_until: __field12,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "@context",
                "credentialProfiles",
                "credentialSchema",
                "credentialStatus",
                "credentialSubject",
                "displayParameter",
                "evidence",
                "id",
                "issuer",
                "termsOfUse",
                "type",
                "validFrom",
                "validUntil",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "EuropassEdcCredential",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<EuropassEdcCredential>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EuropassEdcCredential {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "EuropassEdcCredential",
                false as usize + 1
                    + if Option::is_none(&self.credential_profiles) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.credential_status) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.display_parameter) { 0 } else { 1 }
                    + if Option::is_none(&self.evidence) { 0 } else { 1 } + 1 + 1
                    + if Option::is_none(&self.terms_of_use) { 0 } else { 1 } + 1 + 1
                    + if Option::is_none(&self.valid_until) { 0 } else { 1 },
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "@context",
                &self.context,
            )?;
            if !Option::is_none(&self.credential_profiles) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "credentialProfiles",
                    &self.credential_profiles,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "credentialProfiles",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "credentialSchema",
                &self.credential_schema,
            )?;
            if !Option::is_none(&self.credential_status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "credentialStatus",
                    &self.credential_status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "credentialStatus",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "credentialSubject",
                &self.credential_subject,
            )?;
            if !Option::is_none(&self.display_parameter) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "displayParameter",
                    &self.display_parameter,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "displayParameter",
                )?;
            }
            if !Option::is_none(&self.evidence) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "evidence",
                    &self.evidence,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "evidence",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "id",
                &self.id,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "issuer",
                &self.issuer,
            )?;
            if !Option::is_none(&self.terms_of_use) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "termsOfUse",
                    &self.terms_of_use,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "termsOfUse",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "validFrom",
                &self.valid_from,
            )?;
            if !Option::is_none(&self.valid_until) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "validUntil",
                    &self.valid_until,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "validUntil",
                )?;
            }
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[serde(deny_unknown_fields)]
pub struct Accreditation {
    #[serde(rename = "accreditingAgent")]
    pub accrediting_agent: Organisation,
    #[serde(rename = "additionalNote", default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(rename = "dateIssued", default, skip_serializing_if = "Option::is_none")]
    pub date_issued: Option<DateTime<Utc>>,
    #[serde(rename = "dateModified", default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(rename = "dcType")]
    pub dc_type: Concept,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub decision: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(rename = "expiryDate", default, skip_serializing_if = "Option::is_none")]
    pub expiry_date: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<IdentifierOrLegalIdentifier>,
    #[serde(rename = "landingPage", default, skip_serializing_if = "Option::is_none")]
    pub landing_page: Option<OneOrMany<WebResource>>,
    #[serde(
        rename = "limitCredentialType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub limit_credential_type: Option<OneOrMany<Concept>>,
    #[serde(rename = "limitEQFLevel", default, skip_serializing_if = "Option::is_none")]
    pub limit_eqf_level: Option<OneOrMany<Concept>>,
    #[serde(rename = "limitField", default, skip_serializing_if = "Option::is_none")]
    pub limit_field: Option<OneOrMany<Concept>>,
    #[serde(
        rename = "limitJurisdiction",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub limit_jurisdiction: Option<OneOrMany<Concept>>,
    #[serde(
        rename = "limitQualification",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub limit_qualification: Option<Qualification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organisation: Option<OneOrMany<Organisation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub report: Option<WebResource>,
    #[serde(rename = "reviewDate", default, skip_serializing_if = "Option::is_none")]
    pub review_date: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(
        rename = "supplementaryDocument",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: OneOrMany<AccreditationTag>,
}
#[automatically_derived]
impl ::core::clone::Clone for Accreditation {
    #[inline]
    fn clone(&self) -> Accreditation {
        Accreditation {
            accrediting_agent: ::core::clone::Clone::clone(&self.accrediting_agent),
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            date_issued: ::core::clone::Clone::clone(&self.date_issued),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            decision: ::core::clone::Clone::clone(&self.decision),
            description: ::core::clone::Clone::clone(&self.description),
            expiry_date: ::core::clone::Clone::clone(&self.expiry_date),
            homepage: ::core::clone::Clone::clone(&self.homepage),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            landing_page: ::core::clone::Clone::clone(&self.landing_page),
            limit_credential_type: ::core::clone::Clone::clone(
                &self.limit_credential_type,
            ),
            limit_eqf_level: ::core::clone::Clone::clone(&self.limit_eqf_level),
            limit_field: ::core::clone::Clone::clone(&self.limit_field),
            limit_jurisdiction: ::core::clone::Clone::clone(&self.limit_jurisdiction),
            limit_qualification: ::core::clone::Clone::clone(&self.limit_qualification),
            organisation: ::core::clone::Clone::clone(&self.organisation),
            report: ::core::clone::Clone::clone(&self.report),
            review_date: ::core::clone::Clone::clone(&self.review_date),
            status: ::core::clone::Clone::clone(&self.status),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Accreditation {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "accrediting_agent",
            "additional_note",
            "date_issued",
            "date_modified",
            "dc_type",
            "decision",
            "description",
            "expiry_date",
            "homepage",
            "id",
            "identifier",
            "landing_page",
            "limit_credential_type",
            "limit_eqf_level",
            "limit_field",
            "limit_jurisdiction",
            "limit_qualification",
            "organisation",
            "report",
            "review_date",
            "status",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.accrediting_agent,
            &self.additional_note,
            &self.date_issued,
            &self.date_modified,
            &self.dc_type,
            &self.decision,
            &self.description,
            &self.expiry_date,
            &self.homepage,
            &self.id,
            &self.identifier,
            &self.landing_page,
            &self.limit_credential_type,
            &self.limit_eqf_level,
            &self.limit_field,
            &self.limit_jurisdiction,
            &self.limit_qualification,
            &self.organisation,
            &self.report,
            &self.review_date,
            &self.status,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "Accreditation",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Accreditation {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
                __field21,
                __field22,
                __field23,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        21u64 => _serde::__private::Ok(__Field::__field21),
                        22u64 => _serde::__private::Ok(__Field::__field22),
                        23u64 => _serde::__private::Ok(__Field::__field23),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 24",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "accreditingAgent" => _serde::__private::Ok(__Field::__field0),
                        "additionalNote" => _serde::__private::Ok(__Field::__field1),
                        "dateIssued" => _serde::__private::Ok(__Field::__field2),
                        "dateModified" => _serde::__private::Ok(__Field::__field3),
                        "dcType" => _serde::__private::Ok(__Field::__field4),
                        "decision" => _serde::__private::Ok(__Field::__field5),
                        "description" => _serde::__private::Ok(__Field::__field6),
                        "expiryDate" => _serde::__private::Ok(__Field::__field7),
                        "homepage" => _serde::__private::Ok(__Field::__field8),
                        "id" => _serde::__private::Ok(__Field::__field9),
                        "identifier" => _serde::__private::Ok(__Field::__field10),
                        "landingPage" => _serde::__private::Ok(__Field::__field11),
                        "limitCredentialType" => {
                            _serde::__private::Ok(__Field::__field12)
                        }
                        "limitEQFLevel" => _serde::__private::Ok(__Field::__field13),
                        "limitField" => _serde::__private::Ok(__Field::__field14),
                        "limitJurisdiction" => _serde::__private::Ok(__Field::__field15),
                        "limitQualification" => _serde::__private::Ok(__Field::__field16),
                        "organisation" => _serde::__private::Ok(__Field::__field17),
                        "report" => _serde::__private::Ok(__Field::__field18),
                        "reviewDate" => _serde::__private::Ok(__Field::__field19),
                        "status" => _serde::__private::Ok(__Field::__field20),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field21)
                        }
                        "title" => _serde::__private::Ok(__Field::__field22),
                        "type" => _serde::__private::Ok(__Field::__field23),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"accreditingAgent" => _serde::__private::Ok(__Field::__field0),
                        b"additionalNote" => _serde::__private::Ok(__Field::__field1),
                        b"dateIssued" => _serde::__private::Ok(__Field::__field2),
                        b"dateModified" => _serde::__private::Ok(__Field::__field3),
                        b"dcType" => _serde::__private::Ok(__Field::__field4),
                        b"decision" => _serde::__private::Ok(__Field::__field5),
                        b"description" => _serde::__private::Ok(__Field::__field6),
                        b"expiryDate" => _serde::__private::Ok(__Field::__field7),
                        b"homepage" => _serde::__private::Ok(__Field::__field8),
                        b"id" => _serde::__private::Ok(__Field::__field9),
                        b"identifier" => _serde::__private::Ok(__Field::__field10),
                        b"landingPage" => _serde::__private::Ok(__Field::__field11),
                        b"limitCredentialType" => {
                            _serde::__private::Ok(__Field::__field12)
                        }
                        b"limitEQFLevel" => _serde::__private::Ok(__Field::__field13),
                        b"limitField" => _serde::__private::Ok(__Field::__field14),
                        b"limitJurisdiction" => _serde::__private::Ok(__Field::__field15),
                        b"limitQualification" => {
                            _serde::__private::Ok(__Field::__field16)
                        }
                        b"organisation" => _serde::__private::Ok(__Field::__field17),
                        b"report" => _serde::__private::Ok(__Field::__field18),
                        b"reviewDate" => _serde::__private::Ok(__Field::__field19),
                        b"status" => _serde::__private::Ok(__Field::__field20),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field21)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field22),
                        b"type" => _serde::__private::Ok(__Field::__field23),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Accreditation>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Accreditation;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Accreditation",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Organisation,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct Accreditation with 24 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct Accreditation with 24 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<IdentifierOrLegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<Qualification>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Organisation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<WebResource>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field22 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    22usize,
                                    &"struct Accreditation with 24 elements",
                                ),
                            );
                        }
                    };
                    let __field23 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<AccreditationTag>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    23usize,
                                    &"struct Accreditation with 24 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Accreditation {
                        accrediting_agent: __field0,
                        additional_note: __field1,
                        date_issued: __field2,
                        date_modified: __field3,
                        dc_type: __field4,
                        decision: __field5,
                        description: __field6,
                        expiry_date: __field7,
                        homepage: __field8,
                        id: __field9,
                        identifier: __field10,
                        landing_page: __field11,
                        limit_credential_type: __field12,
                        limit_eqf_level: __field13,
                        limit_field: __field14,
                        limit_jurisdiction: __field15,
                        limit_qualification: __field16,
                        organisation: __field17,
                        report: __field18,
                        review_date: __field19,
                        status: __field20,
                        supplementary_document: __field21,
                        title: __field22,
                        type_: __field23,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Organisation> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<IdentifierOrLegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<Qualification>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<
                        Option<OneOrMany<Organisation>>,
                    > = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<Option<WebResource>> = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<
                        Option<DateTime<Utc>>,
                    > = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field21: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field22: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field23: _serde::__private::Option<
                        OneOrMany<AccreditationTag>,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "accreditingAgent",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Organisation,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateIssued",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "decision",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "expiryDate",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "homepage",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IdentifierOrLegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "landingPage",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitCredentialType",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitEQFLevel",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitField",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitJurisdiction",
                                        ),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitQualification",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Qualification>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "organisation",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Organisation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("report"),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<WebResource>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "reviewDate",
                                        ),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field21 => {
                                if _serde::__private::Option::is_some(&__field21) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field21 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field22 => {
                                if _serde::__private::Option::is_some(&__field22) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field22 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field23 => {
                                if _serde::__private::Option::is_some(&__field23) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field23 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<AccreditationTag>,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("accreditingAgent")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("dcType")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match __field21 {
                        _serde::__private::Some(__field21) => __field21,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field22 = match __field22 {
                        _serde::__private::Some(__field22) => __field22,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field23 = match __field23 {
                        _serde::__private::Some(__field23) => __field23,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Accreditation {
                        accrediting_agent: __field0,
                        additional_note: __field1,
                        date_issued: __field2,
                        date_modified: __field3,
                        dc_type: __field4,
                        decision: __field5,
                        description: __field6,
                        expiry_date: __field7,
                        homepage: __field8,
                        id: __field9,
                        identifier: __field10,
                        landing_page: __field11,
                        limit_credential_type: __field12,
                        limit_eqf_level: __field13,
                        limit_field: __field14,
                        limit_jurisdiction: __field15,
                        limit_qualification: __field16,
                        organisation: __field17,
                        report: __field18,
                        review_date: __field19,
                        status: __field20,
                        supplementary_document: __field21,
                        title: __field22,
                        type_: __field23,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "accreditingAgent",
                "additionalNote",
                "dateIssued",
                "dateModified",
                "dcType",
                "decision",
                "description",
                "expiryDate",
                "homepage",
                "id",
                "identifier",
                "landingPage",
                "limitCredentialType",
                "limitEQFLevel",
                "limitField",
                "limitJurisdiction",
                "limitQualification",
                "organisation",
                "report",
                "reviewDate",
                "status",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Accreditation",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Accreditation>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Accreditation {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Accreditation",
                false as usize + 1
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.date_issued) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.decision) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.expiry_date) { 0 } else { 1 }
                    + if Option::is_none(&self.homepage) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.landing_page) { 0 } else { 1 }
                    + if Option::is_none(&self.limit_credential_type) { 0 } else { 1 }
                    + if Option::is_none(&self.limit_eqf_level) { 0 } else { 1 }
                    + if Option::is_none(&self.limit_field) { 0 } else { 1 }
                    + if Option::is_none(&self.limit_jurisdiction) { 0 } else { 1 }
                    + if Option::is_none(&self.limit_qualification) { 0 } else { 1 }
                    + if Option::is_none(&self.organisation) { 0 } else { 1 }
                    + if Option::is_none(&self.report) { 0 } else { 1 }
                    + if Option::is_none(&self.review_date) { 0 } else { 1 }
                    + if Option::is_none(&self.status) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "accreditingAgent",
                &self.accrediting_agent,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.date_issued) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateIssued",
                    &self.date_issued,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateIssued",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "dcType",
                &self.dc_type,
            )?;
            if !Option::is_none(&self.decision) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "decision",
                    &self.decision,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "decision",
                )?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.expiry_date) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "expiryDate",
                    &self.expiry_date,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "expiryDate",
                )?;
            }
            if !Option::is_none(&self.homepage) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "homepage",
                    &self.homepage,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "homepage",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.landing_page) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "landingPage",
                    &self.landing_page,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "landingPage",
                )?;
            }
            if !Option::is_none(&self.limit_credential_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitCredentialType",
                    &self.limit_credential_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitCredentialType",
                )?;
            }
            if !Option::is_none(&self.limit_eqf_level) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitEQFLevel",
                    &self.limit_eqf_level,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitEQFLevel",
                )?;
            }
            if !Option::is_none(&self.limit_field) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitField",
                    &self.limit_field,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitField",
                )?;
            }
            if !Option::is_none(&self.limit_jurisdiction) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitJurisdiction",
                    &self.limit_jurisdiction,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitJurisdiction",
                )?;
            }
            if !Option::is_none(&self.limit_qualification) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitQualification",
                    &self.limit_qualification,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitQualification",
                )?;
            }
            if !Option::is_none(&self.organisation) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "organisation",
                    &self.organisation,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "organisation",
                )?;
            }
            if !Option::is_none(&self.report) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "report",
                    &self.report,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "report")?;
            }
            if !Option::is_none(&self.review_date) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "reviewDate",
                    &self.review_date,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "reviewDate",
                )?;
            }
            if !Option::is_none(&self.status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "status")?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Accreditation {
    pub fn tag() -> AccreditationTag {
        AccreditationTag::default()
    }
}
/// Tag matching the struct name
pub struct AccreditationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for AccreditationTag {
    #[inline]
    fn clone(&self) -> AccreditationTag {
        AccreditationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AccreditationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "AccreditationTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AccreditationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "AccreditationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for AccreditationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for AccreditationTag {
    fn default() -> Self {
        Self("Accreditation".to_string())
    }
}
impl<'de> Deserialize<'de> for AccreditationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Accreditation" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Accreditation",
                ),
            )
        } else {
            Ok(AccreditationTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct Address {
    #[serde(rename = "countryCode")]
    pub country_code: Concept,
    #[serde(rename = "fullAddress", default, skip_serializing_if = "Option::is_none")]
    pub full_address: Option<Note>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<IdentifierOrLegalIdentifier>,
    #[serde(rename = "type")]
    pub type_: AddressTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Address {
    #[inline]
    fn clone(&self) -> Address {
        Address {
            country_code: ::core::clone::Clone::clone(&self.country_code),
            full_address: ::core::clone::Clone::clone(&self.full_address),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Address {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field5_finish(
            f,
            "Address",
            "country_code",
            &self.country_code,
            "full_address",
            &self.full_address,
            "id",
            &self.id,
            "identifier",
            &self.identifier,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Address {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 5",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "countryCode" => _serde::__private::Ok(__Field::__field0),
                        "fullAddress" => _serde::__private::Ok(__Field::__field1),
                        "id" => _serde::__private::Ok(__Field::__field2),
                        "identifier" => _serde::__private::Ok(__Field::__field3),
                        "type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"countryCode" => _serde::__private::Ok(__Field::__field0),
                        b"fullAddress" => _serde::__private::Ok(__Field::__field1),
                        b"id" => _serde::__private::Ok(__Field::__field2),
                        b"identifier" => _serde::__private::Ok(__Field::__field3),
                        b"type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Address>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Address;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Address",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct Address with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<Note>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<IdentifierOrLegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        AddressTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct Address with 5 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Address {
                        country_code: __field0,
                        full_address: __field1,
                        id: __field2,
                        identifier: __field3,
                        type_: __field4,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<Note>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<IdentifierOrLegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<AddressTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "countryCode",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "fullAddress",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Note>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IdentifierOrLegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<AddressTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("countryCode")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Address {
                        country_code: __field0,
                        full_address: __field1,
                        id: __field2,
                        identifier: __field3,
                        type_: __field4,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "countryCode",
                "fullAddress",
                "id",
                "identifier",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Address",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Address>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Address {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Address",
                false as usize + 1
                    + if Option::is_none(&self.full_address) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 } + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "countryCode",
                &self.country_code,
            )?;
            if !Option::is_none(&self.full_address) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "fullAddress",
                    &self.full_address,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "fullAddress",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Address {
    pub fn tag() -> AddressTag {
        AddressTag::default()
    }
}
/// Tag matching the struct name
pub struct AddressTag(String);
#[automatically_derived]
impl ::core::clone::Clone for AddressTag {
    #[inline]
    fn clone(&self) -> AddressTag {
        AddressTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AddressTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "AddressTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AddressTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "AddressTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for AddressTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for AddressTag {
    fn default() -> Self {
        Self("Address".to_string())
    }
}
impl<'de> Deserialize<'de> for AddressTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Address" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Address",
                ),
            )
        } else {
            Ok(AddressTag(val))
        }
    }
}
#[serde(untagged)]
pub enum AgentOrPersonOrOrganisation {
    Agent(Box<Agent>),
    Person(Box<Person>),
    Organisation(Box<Organisation>),
}
#[automatically_derived]
impl ::core::clone::Clone for AgentOrPersonOrOrganisation {
    #[inline]
    fn clone(&self) -> AgentOrPersonOrOrganisation {
        match self {
            AgentOrPersonOrOrganisation::Agent(__self_0) => {
                AgentOrPersonOrOrganisation::Agent(::core::clone::Clone::clone(__self_0))
            }
            AgentOrPersonOrOrganisation::Person(__self_0) => {
                AgentOrPersonOrOrganisation::Person(
                    ::core::clone::Clone::clone(__self_0),
                )
            }
            AgentOrPersonOrOrganisation::Organisation(__self_0) => {
                AgentOrPersonOrOrganisation::Organisation(
                    ::core::clone::Clone::clone(__self_0),
                )
            }
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AgentOrPersonOrOrganisation {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            AgentOrPersonOrOrganisation::Agent(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Agent", &__self_0)
            }
            AgentOrPersonOrOrganisation::Person(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Person", &__self_0)
            }
            AgentOrPersonOrOrganisation::Organisation(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "Organisation",
                    &__self_0,
                )
            }
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AgentOrPersonOrOrganisation {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                AgentOrPersonOrOrganisation::Agent(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                AgentOrPersonOrOrganisation::Person(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                AgentOrPersonOrOrganisation::Organisation(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
            }
        }
    }
};
impl<'de> ::serde::Deserialize<'de> for AgentOrPersonOrOrganisation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let serde_value = serde_json::Value::deserialize(deserializer)?;
        let tag = serde_value
            .get("type")
            .map(|t| t.as_str().map(|s| s.to_string()))
            .ok_or(::serde::de::Error::missing_field("type"))?;
        if let Some(tag) = tag {
            if (&tag == "Agent") {
                return Ok(
                    Self::Agent(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            if (&tag == "Person") {
                return Ok(
                    Self::Person(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            if (&tag == "Organisation") {
                return Ok(
                    Self::Organisation(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            Err(
                ::serde::de::Error::unknown_variant(
                    &tag,
                    &["Agent", "Person", "Organisation"],
                ),
            )
        } else {
            Err(::serde::de::Error::missing_field("type"))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct Agent {
    #[serde(rename = "additionalNote", default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(rename = "altLabel", default, skip_serializing_if = "Option::is_none")]
    pub alt_label: Option<LangKVPairs>,
    #[serde(rename = "contactPoint", default, skip_serializing_if = "Option::is_none")]
    pub contact_point: Option<OneOrMany<ContactPoint>>,
    #[serde(rename = "dateModified", default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(rename = "groupMemberOf", default, skip_serializing_if = "Option::is_none")]
    pub group_member_of: Option<OneOrMany<Group>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<OneOrMany<Location>>,
    #[serde(rename = "prefLabel", default, skip_serializing_if = "Option::is_none")]
    pub pref_label: Option<LangKVPairs>,
    #[serde(rename = "type")]
    pub type_: AgentTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Agent {
    #[inline]
    fn clone(&self) -> Agent {
        Agent {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            alt_label: ::core::clone::Clone::clone(&self.alt_label),
            contact_point: ::core::clone::Clone::clone(&self.contact_point),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            group_member_of: ::core::clone::Clone::clone(&self.group_member_of),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            location: ::core::clone::Clone::clone(&self.location),
            pref_label: ::core::clone::Clone::clone(&self.pref_label),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Agent {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "alt_label",
            "contact_point",
            "date_modified",
            "group_member_of",
            "id",
            "identifier",
            "location",
            "pref_label",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.alt_label,
            &self.contact_point,
            &self.date_modified,
            &self.group_member_of,
            &self.id,
            &self.identifier,
            &self.location,
            &self.pref_label,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "Agent", names, values)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Agent {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 10",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "altLabel" => _serde::__private::Ok(__Field::__field1),
                        "contactPoint" => _serde::__private::Ok(__Field::__field2),
                        "dateModified" => _serde::__private::Ok(__Field::__field3),
                        "groupMemberOf" => _serde::__private::Ok(__Field::__field4),
                        "id" => _serde::__private::Ok(__Field::__field5),
                        "identifier" => _serde::__private::Ok(__Field::__field6),
                        "location" => _serde::__private::Ok(__Field::__field7),
                        "prefLabel" => _serde::__private::Ok(__Field::__field8),
                        "type" => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"altLabel" => _serde::__private::Ok(__Field::__field1),
                        b"contactPoint" => _serde::__private::Ok(__Field::__field2),
                        b"dateModified" => _serde::__private::Ok(__Field::__field3),
                        b"groupMemberOf" => _serde::__private::Ok(__Field::__field4),
                        b"id" => _serde::__private::Ok(__Field::__field5),
                        b"identifier" => _serde::__private::Ok(__Field::__field6),
                        b"location" => _serde::__private::Ok(__Field::__field7),
                        b"prefLabel" => _serde::__private::Ok(__Field::__field8),
                        b"type" => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Agent>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Agent;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Agent")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<ContactPoint>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Group>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Location>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        AgentTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    9usize,
                                    &"struct Agent with 10 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Agent {
                        additional_note: __field0,
                        alt_label: __field1,
                        contact_point: __field2,
                        date_modified: __field3,
                        group_member_of: __field4,
                        id: __field5,
                        identifier: __field6,
                        location: __field7,
                        pref_label: __field8,
                        type_: __field9,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<ContactPoint>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<Group>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<
                        Option<OneOrMany<Location>>,
                    > = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<AgentTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "altLabel",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contactPoint",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<ContactPoint>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "groupMemberOf",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Group>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Location>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "prefLabel",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<AgentTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Agent {
                        additional_note: __field0,
                        alt_label: __field1,
                        contact_point: __field2,
                        date_modified: __field3,
                        group_member_of: __field4,
                        id: __field5,
                        identifier: __field6,
                        location: __field7,
                        pref_label: __field8,
                        type_: __field9,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "altLabel",
                "contactPoint",
                "dateModified",
                "groupMemberOf",
                "id",
                "identifier",
                "location",
                "prefLabel",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Agent",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Agent>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Agent {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Agent",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.alt_label) { 0 } else { 1 }
                    + if Option::is_none(&self.contact_point) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 }
                    + if Option::is_none(&self.group_member_of) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.location) { 0 } else { 1 }
                    + if Option::is_none(&self.pref_label) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.alt_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "altLabel",
                    &self.alt_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "altLabel",
                )?;
            }
            if !Option::is_none(&self.contact_point) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contactPoint",
                    &self.contact_point,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contactPoint",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            if !Option::is_none(&self.group_member_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "groupMemberOf",
                    &self.group_member_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "groupMemberOf",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.location) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "location",
                    &self.location,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "location",
                )?;
            }
            if !Option::is_none(&self.pref_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "prefLabel",
                    &self.pref_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "prefLabel",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Agent {
    pub fn tag() -> AgentTag {
        AgentTag::default()
    }
}
/// Tag matching the struct name
pub struct AgentTag(String);
#[automatically_derived]
impl ::core::clone::Clone for AgentTag {
    #[inline]
    fn clone(&self) -> AgentTag {
        AgentTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AgentTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "AgentTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AgentTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "AgentTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for AgentTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for AgentTag {
    fn default() -> Self {
        Self("Agent".to_string())
    }
}
impl<'de> Deserialize<'de> for AgentTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Agent" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Agent",
                ),
            )
        } else {
            Ok(AgentTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct Amount {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub unit: Concept,
    pub value: f32,
    #[serde(rename = "type")]
    pub type_: AmountTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Amount {
    #[inline]
    fn clone(&self) -> Amount {
        Amount {
            id: ::core::clone::Clone::clone(&self.id),
            unit: ::core::clone::Clone::clone(&self.unit),
            value: ::core::clone::Clone::clone(&self.value),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Amount {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field4_finish(
            f,
            "Amount",
            "id",
            &self.id,
            "unit",
            &self.unit,
            "value",
            &self.value,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Amount {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 4",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "unit" => _serde::__private::Ok(__Field::__field1),
                        "value" => _serde::__private::Ok(__Field::__field2),
                        "type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"unit" => _serde::__private::Ok(__Field::__field1),
                        b"value" => _serde::__private::Ok(__Field::__field2),
                        b"type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Amount>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Amount;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Amount")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct Amount with 4 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        f32,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct Amount with 4 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        AmountTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct Amount with 4 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Amount {
                        id: __field0,
                        unit: __field1,
                        value: __field2,
                        type_: __field3,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<f32> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<AmountTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("unit"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("value"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<f32>(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<AmountTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("unit")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("value")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Amount {
                        id: __field0,
                        unit: __field1,
                        value: __field2,
                        type_: __field3,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "unit", "value", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Amount",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Amount>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Amount {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Amount",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1 + 1
                    + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "unit",
                &self.unit,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "value",
                &self.value,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Amount {
    pub fn tag() -> AmountTag {
        AmountTag::default()
    }
}
/// Tag matching the struct name
pub struct AmountTag(String);
#[automatically_derived]
impl ::core::clone::Clone for AmountTag {
    #[inline]
    fn clone(&self) -> AmountTag {
        AmountTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AmountTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "AmountTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AmountTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "AmountTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for AmountTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for AmountTag {
    fn default() -> Self {
        Self("Amount".to_string())
    }
}
impl<'de> Deserialize<'de> for AmountTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Amount" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Amount",
                ),
            )
        } else {
            Ok(AmountTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct AwardingOpportunity {
    #[serde(rename = "awardingBody")]
    pub awarding_body: OneOrMany<AgentOrPersonOrOrganisation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(rename = "learningAchievementSpecification", default)]
    pub learning_achievement_specification: Option<
        LearningAchievementSpecificationOrQualification,
    >,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Location>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temporal: Option<PeriodOfTime>,
    #[serde(rename = "type")]
    pub type_: AwardingOpportunityTag,
}
#[automatically_derived]
impl ::core::clone::Clone for AwardingOpportunity {
    #[inline]
    fn clone(&self) -> AwardingOpportunity {
        AwardingOpportunity {
            awarding_body: ::core::clone::Clone::clone(&self.awarding_body),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            learning_achievement_specification: ::core::clone::Clone::clone(
                &self.learning_achievement_specification,
            ),
            location: ::core::clone::Clone::clone(&self.location),
            temporal: ::core::clone::Clone::clone(&self.temporal),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AwardingOpportunity {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "awarding_body",
            "id",
            "identifier",
            "learning_achievement_specification",
            "location",
            "temporal",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.awarding_body,
            &self.id,
            &self.identifier,
            &self.learning_achievement_specification,
            &self.location,
            &self.temporal,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "AwardingOpportunity",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for AwardingOpportunity {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 7",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "awardingBody" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "identifier" => _serde::__private::Ok(__Field::__field2),
                        "learningAchievementSpecification" => {
                            _serde::__private::Ok(__Field::__field3)
                        }
                        "location" => _serde::__private::Ok(__Field::__field4),
                        "temporal" => _serde::__private::Ok(__Field::__field5),
                        "type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"awardingBody" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"identifier" => _serde::__private::Ok(__Field::__field2),
                        b"learningAchievementSpecification" => {
                            _serde::__private::Ok(__Field::__field3)
                        }
                        b"location" => _serde::__private::Ok(__Field::__field4),
                        b"temporal" => _serde::__private::Ok(__Field::__field5),
                        b"type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<AwardingOpportunity>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = AwardingOpportunity;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct AwardingOpportunity",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<AgentOrPersonOrOrganisation>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct AwardingOpportunity with 7 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<LearningAchievementSpecificationOrQualification>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<Location>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<PeriodOfTime>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        AwardingOpportunityTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct AwardingOpportunity with 7 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(AwardingOpportunity {
                        awarding_body: __field0,
                        id: __field1,
                        identifier: __field2,
                        learning_achievement_specification: __field3,
                        location: __field4,
                        temporal: __field5,
                        type_: __field6,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        OneOrMany<AgentOrPersonOrOrganisation>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<LearningAchievementSpecificationOrQualification>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<Location>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<PeriodOfTime>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        AwardingOpportunityTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardingBody",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<AgentOrPersonOrOrganisation>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningAchievementSpecification",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LearningAchievementSpecificationOrQualification>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Location>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "temporal",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<PeriodOfTime>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        AwardingOpportunityTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("awardingBody")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(AwardingOpportunity {
                        awarding_body: __field0,
                        id: __field1,
                        identifier: __field2,
                        learning_achievement_specification: __field3,
                        location: __field4,
                        temporal: __field5,
                        type_: __field6,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "awardingBody",
                "id",
                "identifier",
                "learningAchievementSpecification",
                "location",
                "temporal",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "AwardingOpportunity",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<AwardingOpportunity>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AwardingOpportunity {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "AwardingOpportunity",
                false as usize + 1 + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.location) { 0 } else { 1 }
                    + if Option::is_none(&self.temporal) { 0 } else { 1 } + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "awardingBody",
                &self.awarding_body,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "learningAchievementSpecification",
                &self.learning_achievement_specification,
            )?;
            if !Option::is_none(&self.location) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "location",
                    &self.location,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "location",
                )?;
            }
            if !Option::is_none(&self.temporal) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "temporal",
                    &self.temporal,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "temporal",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl AwardingOpportunity {
    pub fn tag() -> AwardingOpportunityTag {
        AwardingOpportunityTag::default()
    }
}
/// Tag matching the struct name
pub struct AwardingOpportunityTag(String);
#[automatically_derived]
impl ::core::clone::Clone for AwardingOpportunityTag {
    #[inline]
    fn clone(&self) -> AwardingOpportunityTag {
        AwardingOpportunityTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AwardingOpportunityTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "AwardingOpportunityTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AwardingOpportunityTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "AwardingOpportunityTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for AwardingOpportunityTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for AwardingOpportunityTag {
    fn default() -> Self {
        Self("AwardingOpportunity".to_string())
    }
}
impl<'de> Deserialize<'de> for AwardingOpportunityTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "AwardingOpportunity" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"AwardingOpportunity",
                ),
            )
        } else {
            Ok(AwardingOpportunityTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct AwardingProcess {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    pub awarding_body: OneOrMany<AgentOrPersonOrOrganisation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub awarding_date: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub awards: Option<OneOrMany<ClaimNode>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub educational_system_note: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Location>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub used: Option<OneOrMany<LearningAssessment>>,
    #[serde(rename = "type")]
    pub type_: AwardingProcessTag,
}
#[automatically_derived]
impl ::core::clone::Clone for AwardingProcess {
    #[inline]
    fn clone(&self) -> AwardingProcess {
        AwardingProcess {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            awarding_body: ::core::clone::Clone::clone(&self.awarding_body),
            awarding_date: ::core::clone::Clone::clone(&self.awarding_date),
            awards: ::core::clone::Clone::clone(&self.awards),
            description: ::core::clone::Clone::clone(&self.description),
            educational_system_note: ::core::clone::Clone::clone(
                &self.educational_system_note,
            ),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            location: ::core::clone::Clone::clone(&self.location),
            used: ::core::clone::Clone::clone(&self.used),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AwardingProcess {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "awarding_body",
            "awarding_date",
            "awards",
            "description",
            "educational_system_note",
            "id",
            "identifier",
            "location",
            "used",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.awarding_body,
            &self.awarding_date,
            &self.awards,
            &self.description,
            &self.educational_system_note,
            &self.id,
            &self.identifier,
            &self.location,
            &self.used,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "AwardingProcess",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for AwardingProcess {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 11",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "awardingBody" => _serde::__private::Ok(__Field::__field1),
                        "awardingDate" => _serde::__private::Ok(__Field::__field2),
                        "awards" => _serde::__private::Ok(__Field::__field3),
                        "description" => _serde::__private::Ok(__Field::__field4),
                        "educationalSystemNote" => {
                            _serde::__private::Ok(__Field::__field5)
                        }
                        "id" => _serde::__private::Ok(__Field::__field6),
                        "identifier" => _serde::__private::Ok(__Field::__field7),
                        "location" => _serde::__private::Ok(__Field::__field8),
                        "used" => _serde::__private::Ok(__Field::__field9),
                        "type" => _serde::__private::Ok(__Field::__field10),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"awardingBody" => _serde::__private::Ok(__Field::__field1),
                        b"awardingDate" => _serde::__private::Ok(__Field::__field2),
                        b"awards" => _serde::__private::Ok(__Field::__field3),
                        b"description" => _serde::__private::Ok(__Field::__field4),
                        b"educationalSystemNote" => {
                            _serde::__private::Ok(__Field::__field5)
                        }
                        b"id" => _serde::__private::Ok(__Field::__field6),
                        b"identifier" => _serde::__private::Ok(__Field::__field7),
                        b"location" => _serde::__private::Ok(__Field::__field8),
                        b"used" => _serde::__private::Ok(__Field::__field9),
                        b"type" => _serde::__private::Ok(__Field::__field10),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<AwardingProcess>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = AwardingProcess;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct AwardingProcess",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<AgentOrPersonOrOrganisation>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct AwardingProcess with 11 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<ClaimNode>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<Location>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningAssessment>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        AwardingProcessTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    10usize,
                                    &"struct AwardingProcess with 11 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(AwardingProcess {
                        additional_note: __field0,
                        awarding_body: __field1,
                        awarding_date: __field2,
                        awards: __field3,
                        description: __field4,
                        educational_system_note: __field5,
                        id: __field6,
                        identifier: __field7,
                        location: __field8,
                        used: __field9,
                        type_: __field10,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        OneOrMany<AgentOrPersonOrOrganisation>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<ClaimNode>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Option<Location>> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<LearningAssessment>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<AwardingProcessTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardingBody",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<AgentOrPersonOrOrganisation>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardingDate",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("awards"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<ClaimNode>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "educationalSystemNote",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Location>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("used"),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningAssessment>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        AwardingProcessTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("awardingBody")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(AwardingProcess {
                        additional_note: __field0,
                        awarding_body: __field1,
                        awarding_date: __field2,
                        awards: __field3,
                        description: __field4,
                        educational_system_note: __field5,
                        id: __field6,
                        identifier: __field7,
                        location: __field8,
                        used: __field9,
                        type_: __field10,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "awardingBody",
                "awardingDate",
                "awards",
                "description",
                "educationalSystemNote",
                "id",
                "identifier",
                "location",
                "used",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "AwardingProcess",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<AwardingProcess>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AwardingProcess {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "AwardingProcess",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.awarding_date) { 0 } else { 1 }
                    + if Option::is_none(&self.awards) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.educational_system_note) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.location) { 0 } else { 1 }
                    + if Option::is_none(&self.used) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "awardingBody",
                &self.awarding_body,
            )?;
            if !Option::is_none(&self.awarding_date) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "awardingDate",
                    &self.awarding_date,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "awardingDate",
                )?;
            }
            if !Option::is_none(&self.awards) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "awards",
                    &self.awards,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "awards")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.educational_system_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "educationalSystemNote",
                    &self.educational_system_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "educationalSystemNote",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.location) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "location",
                    &self.location,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "location",
                )?;
            }
            if !Option::is_none(&self.used) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "used",
                    &self.used,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "used")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl AwardingProcess {
    pub fn tag() -> AwardingProcessTag {
        AwardingProcessTag::default()
    }
}
/// Tag matching the struct name
pub struct AwardingProcessTag(String);
#[automatically_derived]
impl ::core::clone::Clone for AwardingProcessTag {
    #[inline]
    fn clone(&self) -> AwardingProcessTag {
        AwardingProcessTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for AwardingProcessTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "AwardingProcessTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for AwardingProcessTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "AwardingProcessTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for AwardingProcessTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for AwardingProcessTag {
    fn default() -> Self {
        Self("AwardingProcess".to_string())
    }
}
impl<'de> Deserialize<'de> for AwardingProcessTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "AwardingProcess" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"AwardingProcess",
                ),
            )
        } else {
            Ok(AwardingProcessTag(val))
        }
    }
}
#[serde(untagged)]
pub enum ClaimNode {
    LearningAchievement(Box<LearningAchievement>),
    LearningActivity(Box<LearningActivity>),
    LearningAssessment(Box<LearningAssessment>),
    LearningEntitlement(Box<LearningEntitlement>),
    ClaimNodeType(Box<ClaimTypeNode>),
}
#[automatically_derived]
impl ::core::clone::Clone for ClaimNode {
    #[inline]
    fn clone(&self) -> ClaimNode {
        match self {
            ClaimNode::LearningAchievement(__self_0) => {
                ClaimNode::LearningAchievement(::core::clone::Clone::clone(__self_0))
            }
            ClaimNode::LearningActivity(__self_0) => {
                ClaimNode::LearningActivity(::core::clone::Clone::clone(__self_0))
            }
            ClaimNode::LearningAssessment(__self_0) => {
                ClaimNode::LearningAssessment(::core::clone::Clone::clone(__self_0))
            }
            ClaimNode::LearningEntitlement(__self_0) => {
                ClaimNode::LearningEntitlement(::core::clone::Clone::clone(__self_0))
            }
            ClaimNode::ClaimNodeType(__self_0) => {
                ClaimNode::ClaimNodeType(::core::clone::Clone::clone(__self_0))
            }
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ClaimNode {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ClaimNode::LearningAchievement(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "LearningAchievement",
                    &__self_0,
                )
            }
            ClaimNode::LearningActivity(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "LearningActivity",
                    &__self_0,
                )
            }
            ClaimNode::LearningAssessment(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "LearningAssessment",
                    &__self_0,
                )
            }
            ClaimNode::LearningEntitlement(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "LearningEntitlement",
                    &__self_0,
                )
            }
            ClaimNode::ClaimNodeType(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "ClaimNodeType",
                    &__self_0,
                )
            }
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ClaimNode {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                ClaimNode::LearningAchievement(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                ClaimNode::LearningActivity(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                ClaimNode::LearningAssessment(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                ClaimNode::LearningEntitlement(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                ClaimNode::ClaimNodeType(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
            }
        }
    }
};
impl<'de> ::serde::Deserialize<'de> for ClaimNode {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let serde_value = serde_json::Value::deserialize(deserializer)?;
        let tag = serde_value
            .get("type")
            .map(|t| t.as_str().map(|s| s.to_string()))
            .ok_or(::serde::de::Error::missing_field("type"))?;
        if let Some(tag) = tag {
            if (&tag == "LearningAchievement") {
                return Ok(
                    Self::LearningAchievement(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            if (&tag == "LearningActivity") {
                return Ok(
                    Self::LearningActivity(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            if (&tag == "LearningAssessment") {
                return Ok(
                    Self::LearningAssessment(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            if (&tag == "LearningEntitlement") {
                return Ok(
                    Self::LearningEntitlement(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            if (&tag == "ClaimNodeType") {
                return Ok(
                    Self::ClaimNodeType(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            Err(
                ::serde::de::Error::unknown_variant(
                    &tag,
                    &[
                        "LearningAchievement",
                        "LearningActivity",
                        "LearningAssessment",
                        "LearningEntitlement",
                        "ClaimNodeType",
                    ],
                ),
            )
        } else {
            Err(::serde::de::Error::missing_field("type"))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct ClaimTypeNode {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    pub awarded_by: AwardingProcess,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: ClaimTypeNodeTag,
}
#[automatically_derived]
impl ::core::clone::Clone for ClaimTypeNode {
    #[inline]
    fn clone(&self) -> ClaimTypeNode {
        ClaimTypeNode {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            awarded_by: ::core::clone::Clone::clone(&self.awarded_by),
            description: ::core::clone::Clone::clone(&self.description),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ClaimTypeNode {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "awarded_by",
            "description",
            "id",
            "identifier",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.awarded_by,
            &self.description,
            &self.id,
            &self.identifier,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "ClaimTypeNode",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for ClaimTypeNode {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 8",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "awardedBy" => _serde::__private::Ok(__Field::__field1),
                        "description" => _serde::__private::Ok(__Field::__field2),
                        "id" => _serde::__private::Ok(__Field::__field3),
                        "identifier" => _serde::__private::Ok(__Field::__field4),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field5)
                        }
                        "title" => _serde::__private::Ok(__Field::__field6),
                        "type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"awardedBy" => _serde::__private::Ok(__Field::__field1),
                        b"description" => _serde::__private::Ok(__Field::__field2),
                        b"id" => _serde::__private::Ok(__Field::__field3),
                        b"identifier" => _serde::__private::Ok(__Field::__field4),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field5)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field6),
                        b"type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<ClaimTypeNode>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = ClaimTypeNode;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct ClaimTypeNode",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        AwardingProcess,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct ClaimTypeNode with 8 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct ClaimTypeNode with 8 elements",
                                ),
                            );
                        }
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        ClaimTypeNodeTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct ClaimTypeNode with 8 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(ClaimTypeNode {
                        additional_note: __field0,
                        awarded_by: __field1,
                        description: __field2,
                        id: __field3,
                        identifier: __field4,
                        supplementary_document: __field5,
                        title: __field6,
                        type_: __field7,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<AwardingProcess> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<ClaimTypeNodeTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardedBy",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        AwardingProcess,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        ClaimTypeNodeTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("awardedBy")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(ClaimTypeNode {
                        additional_note: __field0,
                        awarded_by: __field1,
                        description: __field2,
                        id: __field3,
                        identifier: __field4,
                        supplementary_document: __field5,
                        title: __field6,
                        type_: __field7,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "awardedBy",
                "description",
                "id",
                "identifier",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "ClaimTypeNode",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<ClaimTypeNode>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ClaimTypeNode {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "ClaimTypeNode",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "awardedBy",
                &self.awarded_by,
            )?;
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl ClaimTypeNode {
    pub fn tag() -> ClaimTypeNodeTag {
        ClaimTypeNodeTag::default()
    }
}
/// Tag matching the struct name
pub struct ClaimTypeNodeTag(String);
#[automatically_derived]
impl ::core::clone::Clone for ClaimTypeNodeTag {
    #[inline]
    fn clone(&self) -> ClaimTypeNodeTag {
        ClaimTypeNodeTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ClaimTypeNodeTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "ClaimTypeNodeTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ClaimTypeNodeTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "ClaimTypeNodeTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for ClaimTypeNodeTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for ClaimTypeNodeTag {
    fn default() -> Self {
        Self("ClaimTypeNode".to_string())
    }
}
impl<'de> Deserialize<'de> for ClaimTypeNodeTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "ClaimTypeNode" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"ClaimTypeNode",
                ),
            )
        } else {
            Ok(ClaimTypeNodeTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct ConceptScheme {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(rename = "type")]
    pub type_: ConceptSchemeTag,
}
#[automatically_derived]
impl ::core::clone::Clone for ConceptScheme {
    #[inline]
    fn clone(&self) -> ConceptScheme {
        ConceptScheme {
            id: ::core::clone::Clone::clone(&self.id),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ConceptScheme {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field2_finish(
            f,
            "ConceptScheme",
            "id",
            &self.id,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for ConceptScheme {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 2",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<ConceptScheme>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = ConceptScheme;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct ConceptScheme",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        ConceptSchemeTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct ConceptScheme with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(ConceptScheme {
                        id: __field0,
                        type_: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<ConceptSchemeTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        ConceptSchemeTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(ConceptScheme {
                        id: __field0,
                        type_: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "ConceptScheme",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<ConceptScheme>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ConceptScheme {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "ConceptScheme",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl ConceptScheme {
    pub fn tag() -> ConceptSchemeTag {
        ConceptSchemeTag::default()
    }
}
/// Tag matching the struct name
pub struct ConceptSchemeTag(String);
#[automatically_derived]
impl ::core::clone::Clone for ConceptSchemeTag {
    #[inline]
    fn clone(&self) -> ConceptSchemeTag {
        ConceptSchemeTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ConceptSchemeTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "ConceptSchemeTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ConceptSchemeTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "ConceptSchemeTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for ConceptSchemeTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for ConceptSchemeTag {
    fn default() -> Self {
        Self("ConceptScheme".to_string())
    }
}
impl<'de> Deserialize<'de> for ConceptSchemeTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "ConceptScheme" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"ConceptScheme",
                ),
            )
        } else {
            Ok(ConceptSchemeTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct Concept {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(rename = "inScheme", default, skip_serializing_if = "Option::is_none")]
    pub in_scheme: Option<ConceptScheme>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notation: Option<Literal>,
    #[serde(rename = "prefLabel", default, skip_serializing_if = "Option::is_none")]
    pub pref_label: Option<LangKVPairs>,
    #[serde(rename = "type")]
    pub type_: ConceptTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Concept {
    #[inline]
    fn clone(&self) -> Concept {
        Concept {
            definition: ::core::clone::Clone::clone(&self.definition),
            id: ::core::clone::Clone::clone(&self.id),
            in_scheme: ::core::clone::Clone::clone(&self.in_scheme),
            notation: ::core::clone::Clone::clone(&self.notation),
            pref_label: ::core::clone::Clone::clone(&self.pref_label),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Concept {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "definition",
            "id",
            "in_scheme",
            "notation",
            "pref_label",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.definition,
            &self.id,
            &self.in_scheme,
            &self.notation,
            &self.pref_label,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "Concept", names, values)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Concept {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 6",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "definition" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "inScheme" => _serde::__private::Ok(__Field::__field2),
                        "notation" => _serde::__private::Ok(__Field::__field3),
                        "prefLabel" => _serde::__private::Ok(__Field::__field4),
                        "type" => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"definition" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"inScheme" => _serde::__private::Ok(__Field::__field2),
                        b"notation" => _serde::__private::Ok(__Field::__field3),
                        b"prefLabel" => _serde::__private::Ok(__Field::__field4),
                        b"type" => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Concept>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Concept;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Concept",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<ConceptScheme>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<Literal>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        ConceptTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    5usize,
                                    &"struct Concept with 6 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Concept {
                        definition: __field0,
                        id: __field1,
                        in_scheme: __field2,
                        notation: __field3,
                        pref_label: __field4,
                        type_: __field5,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<ConceptScheme>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<Literal>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<ConceptTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "definition",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "inScheme",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<ConceptScheme>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "notation",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Literal>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "prefLabel",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<ConceptTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Concept {
                        definition: __field0,
                        id: __field1,
                        in_scheme: __field2,
                        notation: __field3,
                        pref_label: __field4,
                        type_: __field5,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "definition",
                "id",
                "inScheme",
                "notation",
                "prefLabel",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Concept",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Concept>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Concept {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Concept",
                false as usize + if Option::is_none(&self.definition) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.in_scheme) { 0 } else { 1 }
                    + if Option::is_none(&self.notation) { 0 } else { 1 }
                    + if Option::is_none(&self.pref_label) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.definition) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "definition",
                    &self.definition,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "definition",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.in_scheme) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "inScheme",
                    &self.in_scheme,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "inScheme",
                )?;
            }
            if !Option::is_none(&self.notation) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "notation",
                    &self.notation,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "notation",
                )?;
            }
            if !Option::is_none(&self.pref_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "prefLabel",
                    &self.pref_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "prefLabel",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Concept {
    pub fn tag() -> ConceptTag {
        ConceptTag::default()
    }
}
/// Tag matching the struct name
pub struct ConceptTag(String);
#[automatically_derived]
impl ::core::clone::Clone for ConceptTag {
    #[inline]
    fn clone(&self) -> ConceptTag {
        ConceptTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ConceptTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "ConceptTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ConceptTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "ConceptTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for ConceptTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for ConceptTag {
    fn default() -> Self {
        Self("Concept".to_string())
    }
}
impl<'de> Deserialize<'de> for ConceptTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Concept" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Concept",
                ),
            )
        } else {
            Ok(ConceptTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct ContactPoint {
    #[serde(rename = "additionalNote", default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<OneOrMany<Address>>,
    #[serde(rename = "contactForm", default, skip_serializing_if = "Option::is_none")]
    pub contact_form: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(rename = "emailAddress", default, skip_serializing_if = "Option::is_none")]
    pub email_address: Option<OneOrMany<Mailbox>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phone: Option<OneOrMany<Phone>>,
    #[serde(rename = "type")]
    pub type_: ContactPointTag,
}
#[automatically_derived]
impl ::core::clone::Clone for ContactPoint {
    #[inline]
    fn clone(&self) -> ContactPoint {
        ContactPoint {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            address: ::core::clone::Clone::clone(&self.address),
            contact_form: ::core::clone::Clone::clone(&self.contact_form),
            description: ::core::clone::Clone::clone(&self.description),
            email_address: ::core::clone::Clone::clone(&self.email_address),
            id: ::core::clone::Clone::clone(&self.id),
            phone: ::core::clone::Clone::clone(&self.phone),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ContactPoint {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "address",
            "contact_form",
            "description",
            "email_address",
            "id",
            "phone",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.address,
            &self.contact_form,
            &self.description,
            &self.email_address,
            &self.id,
            &self.phone,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "ContactPoint",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for ContactPoint {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 8",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "address" => _serde::__private::Ok(__Field::__field1),
                        "contactForm" => _serde::__private::Ok(__Field::__field2),
                        "description" => _serde::__private::Ok(__Field::__field3),
                        "emailAddress" => _serde::__private::Ok(__Field::__field4),
                        "id" => _serde::__private::Ok(__Field::__field5),
                        "phone" => _serde::__private::Ok(__Field::__field6),
                        "type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"address" => _serde::__private::Ok(__Field::__field1),
                        b"contactForm" => _serde::__private::Ok(__Field::__field2),
                        b"description" => _serde::__private::Ok(__Field::__field3),
                        b"emailAddress" => _serde::__private::Ok(__Field::__field4),
                        b"id" => _serde::__private::Ok(__Field::__field5),
                        b"phone" => _serde::__private::Ok(__Field::__field6),
                        b"type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<ContactPoint>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = ContactPoint;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct ContactPoint",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Address>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Mailbox>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Phone>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        ContactPointTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct ContactPoint with 8 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(ContactPoint {
                        additional_note: __field0,
                        address: __field1,
                        contact_form: __field2,
                        description: __field3,
                        email_address: __field4,
                        id: __field5,
                        phone: __field6,
                        type_: __field7,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        Option<OneOrMany<Address>>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<Mailbox>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<OneOrMany<Phone>>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<ContactPointTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "address",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Address>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contactForm",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "emailAddress",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Mailbox>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("phone"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Phone>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        ContactPointTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(ContactPoint {
                        additional_note: __field0,
                        address: __field1,
                        contact_form: __field2,
                        description: __field3,
                        email_address: __field4,
                        id: __field5,
                        phone: __field6,
                        type_: __field7,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "address",
                "contactForm",
                "description",
                "emailAddress",
                "id",
                "phone",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "ContactPoint",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<ContactPoint>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ContactPoint {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "ContactPoint",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.address) { 0 } else { 1 }
                    + if Option::is_none(&self.contact_form) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.email_address) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.phone) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.address) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "address",
                    &self.address,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "address")?;
            }
            if !Option::is_none(&self.contact_form) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contactForm",
                    &self.contact_form,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contactForm",
                )?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.email_address) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "emailAddress",
                    &self.email_address,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "emailAddress",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.phone) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "phone",
                    &self.phone,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "phone")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl ContactPoint {
    pub fn tag() -> ContactPointTag {
        ContactPointTag::default()
    }
}
/// Tag matching the struct name
pub struct ContactPointTag(String);
#[automatically_derived]
impl ::core::clone::Clone for ContactPointTag {
    #[inline]
    fn clone(&self) -> ContactPointTag {
        ContactPointTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ContactPointTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "ContactPointTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ContactPointTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "ContactPointTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for ContactPointTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for ContactPointTag {
    fn default() -> Self {
        Self("ContactPoint".to_string())
    }
}
impl<'de> Deserialize<'de> for ContactPointTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "ContactPoint" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"ContactPoint",
                ),
            )
        } else {
            Ok(ContactPointTag(val))
        }
    }
}
pub enum CredentialSchemaType {
    JsonSchema,
    ShaclValidator2017,
}
#[automatically_derived]
impl ::core::clone::Clone for CredentialSchemaType {
    #[inline]
    fn clone(&self) -> CredentialSchemaType {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for CredentialSchemaType {}
#[automatically_derived]
impl ::core::fmt::Debug for CredentialSchemaType {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::write_str(
            f,
            match self {
                CredentialSchemaType::JsonSchema => "JsonSchema",
                CredentialSchemaType::ShaclValidator2017 => "ShaclValidator2017",
            },
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for CredentialSchemaType {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "variant identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"variant index 0 <= i < 2",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "JsonSchema" => _serde::__private::Ok(__Field::__field0),
                        "ShaclValidator2017" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_variant(__value, VARIANTS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"JsonSchema" => _serde::__private::Ok(__Field::__field0),
                        b"ShaclValidator2017" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_variant(__value, VARIANTS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<CredentialSchemaType>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = CredentialSchemaType;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "enum CredentialSchemaType",
                    )
                }
                fn visit_enum<__A>(
                    self,
                    __data: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::EnumAccess<'de>,
                {
                    match _serde::de::EnumAccess::variant(__data)? {
                        (__Field::__field0, __variant) => {
                            _serde::de::VariantAccess::unit_variant(__variant)?;
                            _serde::__private::Ok(CredentialSchemaType::JsonSchema)
                        }
                        (__Field::__field1, __variant) => {
                            _serde::de::VariantAccess::unit_variant(__variant)?;
                            _serde::__private::Ok(
                                CredentialSchemaType::ShaclValidator2017,
                            )
                        }
                    }
                }
            }
            #[doc(hidden)]
            const VARIANTS: &'static [&'static str] = &[
                "JsonSchema",
                "ShaclValidator2017",
            ];
            _serde::Deserializer::deserialize_enum(
                __deserializer,
                "CredentialSchemaType",
                VARIANTS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<CredentialSchemaType>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[automatically_derived]
impl ::core::cmp::Eq for CredentialSchemaType {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::hash::Hash for CredentialSchemaType {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        ::core::hash::Hash::hash(&__self_tag, state)
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for CredentialSchemaType {
    #[inline]
    fn cmp(&self, other: &CredentialSchemaType) -> ::core::cmp::Ordering {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag)
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for CredentialSchemaType {}
#[automatically_derived]
impl ::core::cmp::PartialEq for CredentialSchemaType {
    #[inline]
    fn eq(&self, other: &CredentialSchemaType) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for CredentialSchemaType {
    #[inline]
    fn partial_cmp(
        &self,
        other: &CredentialSchemaType,
    ) -> ::core::option::Option<::core::cmp::Ordering> {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        ::core::cmp::PartialOrd::partial_cmp(&__self_tag, &__arg1_tag)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for CredentialSchemaType {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                CredentialSchemaType::JsonSchema => {
                    _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "CredentialSchemaType",
                        0u32,
                        "JsonSchema",
                    )
                }
                CredentialSchemaType::ShaclValidator2017 => {
                    _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "CredentialSchemaType",
                        1u32,
                        "ShaclValidator2017",
                    )
                }
            }
        }
    }
};
impl ToString for CredentialSchemaType {
    fn to_string(&self) -> String {
        match *self {
            Self::JsonSchema => "JsonSchema".to_string(),
            Self::ShaclValidator2017 => "ShaclValidator2017".to_string(),
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct CredentialStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(rename = "type")]
    pub type_: CredentialStatusTag,
}
#[automatically_derived]
impl ::core::clone::Clone for CredentialStatus {
    #[inline]
    fn clone(&self) -> CredentialStatus {
        CredentialStatus {
            id: ::core::clone::Clone::clone(&self.id),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for CredentialStatus {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field2_finish(
            f,
            "CredentialStatus",
            "id",
            &self.id,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for CredentialStatus {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 2",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<CredentialStatus>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = CredentialStatus;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct CredentialStatus",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        CredentialStatusTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct CredentialStatus with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(CredentialStatus {
                        id: __field0,
                        type_: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<CredentialStatusTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        CredentialStatusTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(CredentialStatus {
                        id: __field0,
                        type_: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "CredentialStatus",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<CredentialStatus>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for CredentialStatus {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "CredentialStatus",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl CredentialStatus {
    pub fn tag() -> CredentialStatusTag {
        CredentialStatusTag::default()
    }
}
/// Tag matching the struct name
pub struct CredentialStatusTag(String);
#[automatically_derived]
impl ::core::clone::Clone for CredentialStatusTag {
    #[inline]
    fn clone(&self) -> CredentialStatusTag {
        CredentialStatusTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for CredentialStatusTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "CredentialStatusTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for CredentialStatusTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "CredentialStatusTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for CredentialStatusTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for CredentialStatusTag {
    fn default() -> Self {
        Self("CredentialStatus".to_string())
    }
}
impl<'de> Deserialize<'de> for CredentialStatusTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "CredentialStatus" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"CredentialStatus",
                ),
            )
        } else {
            Ok(CredentialStatusTag(val))
        }
    }
}
pub struct CredentialSubject {
    ///Defines the DID of the subject that is described by the issued credential
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[automatically_derived]
impl ::core::clone::Clone for CredentialSubject {
    #[inline]
    fn clone(&self) -> CredentialSubject {
        CredentialSubject {
            id: ::core::clone::Clone::clone(&self.id),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for CredentialSubject {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field1_finish(
            f,
            "CredentialSubject",
            "id",
            &&self.id,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for CredentialSubject {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<CredentialSubject>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = CredentialSubject;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct CredentialSubject",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    _serde::__private::Ok(CredentialSubject { id: __field0 })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            _ => {
                                let _ = _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map)?;
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    _serde::__private::Ok(CredentialSubject { id: __field0 })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "CredentialSubject",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<CredentialSubject>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for CredentialSubject {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "CredentialSubject",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 },
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[serde(deny_unknown_fields)]
pub struct CreditPoint {
    pub framework: Concept,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub point: String,
    #[serde(rename = "type")]
    pub type_: CreditPointTag,
}
#[automatically_derived]
impl ::core::clone::Clone for CreditPoint {
    #[inline]
    fn clone(&self) -> CreditPoint {
        CreditPoint {
            framework: ::core::clone::Clone::clone(&self.framework),
            id: ::core::clone::Clone::clone(&self.id),
            point: ::core::clone::Clone::clone(&self.point),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for CreditPoint {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field4_finish(
            f,
            "CreditPoint",
            "framework",
            &self.framework,
            "id",
            &self.id,
            "point",
            &self.point,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for CreditPoint {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 4",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "framework" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "point" => _serde::__private::Ok(__Field::__field2),
                        "type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"framework" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"point" => _serde::__private::Ok(__Field::__field2),
                        b"type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<CreditPoint>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = CreditPoint;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct CreditPoint",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct CreditPoint with 4 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct CreditPoint with 4 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        CreditPointTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct CreditPoint with 4 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(CreditPoint {
                        framework: __field0,
                        id: __field1,
                        point: __field2,
                        type_: __field3,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<CreditPointTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "framework",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("point"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        CreditPointTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("framework")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("point")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(CreditPoint {
                        framework: __field0,
                        id: __field1,
                        point: __field2,
                        type_: __field3,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "framework",
                "id",
                "point",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "CreditPoint",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<CreditPoint>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for CreditPoint {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "CreditPoint",
                false as usize + 1 + if Option::is_none(&self.id) { 0 } else { 1 } + 1
                    + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "framework",
                &self.framework,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "point",
                &self.point,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl CreditPoint {
    pub fn tag() -> CreditPointTag {
        CreditPointTag::default()
    }
}
/// Tag matching the struct name
pub struct CreditPointTag(String);
#[automatically_derived]
impl ::core::clone::Clone for CreditPointTag {
    #[inline]
    fn clone(&self) -> CreditPointTag {
        CreditPointTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for CreditPointTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "CreditPointTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for CreditPointTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "CreditPointTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for CreditPointTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for CreditPointTag {
    fn default() -> Self {
        Self("CreditPoint".to_string())
    }
}
impl<'de> Deserialize<'de> for CreditPointTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "CreditPoint" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"CreditPoint",
                ),
            )
        } else {
            Ok(CreditPointTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct DisplayDetail {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub image: MediaObject,
    pub page: PositiveInteger,
    #[serde(rename = "type")]
    pub type_: DisplayDetailTag,
}
#[automatically_derived]
impl ::core::clone::Clone for DisplayDetail {
    #[inline]
    fn clone(&self) -> DisplayDetail {
        DisplayDetail {
            id: ::core::clone::Clone::clone(&self.id),
            image: ::core::clone::Clone::clone(&self.image),
            page: ::core::clone::Clone::clone(&self.page),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for DisplayDetail {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field4_finish(
            f,
            "DisplayDetail",
            "id",
            &self.id,
            "image",
            &self.image,
            "page",
            &self.page,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for DisplayDetail {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 4",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "image" => _serde::__private::Ok(__Field::__field1),
                        "page" => _serde::__private::Ok(__Field::__field2),
                        "type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"image" => _serde::__private::Ok(__Field::__field1),
                        b"page" => _serde::__private::Ok(__Field::__field2),
                        b"type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<DisplayDetail>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = DisplayDetail;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct DisplayDetail",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        MediaObject,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct DisplayDetail with 4 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        PositiveInteger,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct DisplayDetail with 4 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        DisplayDetailTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct DisplayDetail with 4 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(DisplayDetail {
                        id: __field0,
                        image: __field1,
                        page: __field2,
                        type_: __field3,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<MediaObject> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<PositiveInteger> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<DisplayDetailTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("image"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        MediaObject,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("page"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        PositiveInteger,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        DisplayDetailTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("image")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("page")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(DisplayDetail {
                        id: __field0,
                        image: __field1,
                        page: __field2,
                        type_: __field3,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "image", "page", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "DisplayDetail",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<DisplayDetail>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for DisplayDetail {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "DisplayDetail",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1 + 1
                    + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "image",
                &self.image,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "page",
                &self.page,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl DisplayDetail {
    pub fn tag() -> DisplayDetailTag {
        DisplayDetailTag::default()
    }
}
/// Tag matching the struct name
pub struct DisplayDetailTag(String);
#[automatically_derived]
impl ::core::clone::Clone for DisplayDetailTag {
    #[inline]
    fn clone(&self) -> DisplayDetailTag {
        DisplayDetailTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for DisplayDetailTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "DisplayDetailTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for DisplayDetailTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "DisplayDetailTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for DisplayDetailTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for DisplayDetailTag {
    fn default() -> Self {
        Self("DisplayDetail".to_string())
    }
}
impl<'de> Deserialize<'de> for DisplayDetailTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "DisplayDetail" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"DisplayDetail",
                ),
            )
        } else {
            Ok(DisplayDetailTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct DisplayParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub individual_display: OneOrMany<IndividualDisplay>,
    pub language: OneOrMany<Concept>,
    pub primary_language: Concept,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub summary_display: Option<String>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: DisplayParameterTag,
}
#[automatically_derived]
impl ::core::clone::Clone for DisplayParameter {
    #[inline]
    fn clone(&self) -> DisplayParameter {
        DisplayParameter {
            description: ::core::clone::Clone::clone(&self.description),
            id: ::core::clone::Clone::clone(&self.id),
            individual_display: ::core::clone::Clone::clone(&self.individual_display),
            language: ::core::clone::Clone::clone(&self.language),
            primary_language: ::core::clone::Clone::clone(&self.primary_language),
            summary_display: ::core::clone::Clone::clone(&self.summary_display),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for DisplayParameter {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "description",
            "id",
            "individual_display",
            "language",
            "primary_language",
            "summary_display",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.description,
            &self.id,
            &self.individual_display,
            &self.language,
            &self.primary_language,
            &self.summary_display,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "DisplayParameter",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for DisplayParameter {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 8",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "description" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "individualDisplay" => _serde::__private::Ok(__Field::__field2),
                        "language" => _serde::__private::Ok(__Field::__field3),
                        "primaryLanguage" => _serde::__private::Ok(__Field::__field4),
                        "summaryDisplay" => _serde::__private::Ok(__Field::__field5),
                        "title" => _serde::__private::Ok(__Field::__field6),
                        "type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"description" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"individualDisplay" => _serde::__private::Ok(__Field::__field2),
                        b"language" => _serde::__private::Ok(__Field::__field3),
                        b"primaryLanguage" => _serde::__private::Ok(__Field::__field4),
                        b"summaryDisplay" => _serde::__private::Ok(__Field::__field5),
                        b"title" => _serde::__private::Ok(__Field::__field6),
                        b"type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<DisplayParameter>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = DisplayParameter;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct DisplayParameter",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<IndividualDisplay>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct DisplayParameter with 8 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct DisplayParameter with 8 elements",
                                ),
                            );
                        }
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct DisplayParameter with 8 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct DisplayParameter with 8 elements",
                                ),
                            );
                        }
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        DisplayParameterTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct DisplayParameter with 8 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(DisplayParameter {
                        description: __field0,
                        id: __field1,
                        individual_display: __field2,
                        language: __field3,
                        primary_language: __field4,
                        summary_display: __field5,
                        title: __field6,
                        type_: __field7,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        OneOrMany<IndividualDisplay>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<OneOrMany<Concept>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<DisplayParameterTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "individualDisplay",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<IndividualDisplay>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "language",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "primaryLanguage",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "summaryDisplay",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        DisplayParameterTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("individualDisplay")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("language")?
                        }
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("primaryLanguage")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(DisplayParameter {
                        description: __field0,
                        id: __field1,
                        individual_display: __field2,
                        language: __field3,
                        primary_language: __field4,
                        summary_display: __field5,
                        title: __field6,
                        type_: __field7,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "description",
                "id",
                "individualDisplay",
                "language",
                "primaryLanguage",
                "summaryDisplay",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "DisplayParameter",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<DisplayParameter>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for DisplayParameter {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "DisplayParameter",
                false as usize + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 } + 1 + 1 + 1
                    + if Option::is_none(&self.summary_display) { 0 } else { 1 } + 1 + 1,
            )?;
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "individualDisplay",
                &self.individual_display,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "language",
                &self.language,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "primaryLanguage",
                &self.primary_language,
            )?;
            if !Option::is_none(&self.summary_display) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "summaryDisplay",
                    &self.summary_display,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "summaryDisplay",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl DisplayParameter {
    pub fn tag() -> DisplayParameterTag {
        DisplayParameterTag::default()
    }
}
/// Tag matching the struct name
pub struct DisplayParameterTag(String);
#[automatically_derived]
impl ::core::clone::Clone for DisplayParameterTag {
    #[inline]
    fn clone(&self) -> DisplayParameterTag {
        DisplayParameterTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for DisplayParameterTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "DisplayParameterTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for DisplayParameterTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "DisplayParameterTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for DisplayParameterTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for DisplayParameterTag {
    fn default() -> Self {
        Self("DisplayParameter".to_string())
    }
}
impl<'de> Deserialize<'de> for DisplayParameterTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "DisplayParameter" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"DisplayParameter",
                ),
            )
        } else {
            Ok(DisplayParameterTag(val))
        }
    }
}
#[serde(untagged)]
pub enum EuropassEdcCredentialContext {
    One(String),
    Many(Vec<String>),
}
#[automatically_derived]
impl ::core::clone::Clone for EuropassEdcCredentialContext {
    #[inline]
    fn clone(&self) -> EuropassEdcCredentialContext {
        match self {
            EuropassEdcCredentialContext::One(__self_0) => {
                EuropassEdcCredentialContext::One(::core::clone::Clone::clone(__self_0))
            }
            EuropassEdcCredentialContext::Many(__self_0) => {
                EuropassEdcCredentialContext::Many(::core::clone::Clone::clone(__self_0))
            }
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EuropassEdcCredentialContext {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            EuropassEdcCredentialContext::One(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "One", &__self_0)
            }
            EuropassEdcCredentialContext::Many(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Many", &__self_0)
            }
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EuropassEdcCredentialContext {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                EuropassEdcCredentialContext::One(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                EuropassEdcCredentialContext::Many(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
            }
        }
    }
};
impl<'de> de::Deserialize<'de> for EuropassEdcCredentialContext {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: de::Deserializer<'de>,
    {
        let value = serde_json::Value::deserialize(deserializer)?;
        let must_contain = "https://www.w3.org/ns/credentials/v2";
        match value {
            serde_json::Value::Array(arr) => {
                let val = serde_json::Value::Array(arr);
                let many: Vec<String> = Vec::deserialize(val)
                    .map_err(de::Error::custom)?;
                if many.is_empty() {
                    return Err(
                        de::Error::invalid_value(
                            de::Unexpected::Seq,
                            &"Array cannot be empty",
                        ),
                    );
                }
                if &must_contain != &many[0] {
                    Err(
                        de::Error::invalid_value(
                            de::Unexpected::Str(&many[0]),
                            &{
                                let res = ::alloc::fmt::format(
                                    format_args!("First value must be: {0}", must_contain),
                                );
                                res
                            }
                                .as_str(),
                        ),
                    )
                } else {
                    Ok(Self::Many(many))
                }
            }
            serde_json::Value::String(one) => {
                if &must_contain == &one {
                    Ok(Self::One(one))
                } else {
                    Err(
                        de::Error::invalid_value(
                            de::Unexpected::Str(&one),
                            &must_contain,
                        ),
                    )
                }
            }
            _ => {
                Err(
                    de::Error::invalid_type(
                        de::Unexpected::Other(&value.to_string()),
                        &"An array of string or a string",
                    ),
                )
            }
        }
    }
}
pub struct EuropassEdcCredentialCredentialStatus {
    ///Exact identity for the credential status
    pub id: UriType,
    ///Defines the revocation type extension
    #[serde(rename = "type")]
    pub revocation_type: String,
}
#[automatically_derived]
impl ::core::clone::Clone for EuropassEdcCredentialCredentialStatus {
    #[inline]
    fn clone(&self) -> EuropassEdcCredentialCredentialStatus {
        EuropassEdcCredentialCredentialStatus {
            id: ::core::clone::Clone::clone(&self.id),
            revocation_type: ::core::clone::Clone::clone(&self.revocation_type),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EuropassEdcCredentialCredentialStatus {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field2_finish(
            f,
            "EuropassEdcCredentialCredentialStatus",
            "id",
            &self.id,
            "revocation_type",
            &&self.revocation_type,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for EuropassEdcCredentialCredentialStatus {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "type" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"type" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<
                    EuropassEdcCredentialCredentialStatus,
                >,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = EuropassEdcCredentialCredentialStatus;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct EuropassEdcCredentialCredentialStatus",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        UriType,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct EuropassEdcCredentialCredentialStatus with 2 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct EuropassEdcCredentialCredentialStatus with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(EuropassEdcCredentialCredentialStatus {
                        id: __field0,
                        revocation_type: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<UriType> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<UriType>(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            _ => {
                                let _ = _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map)?;
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("id")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(EuropassEdcCredentialCredentialStatus {
                        id: __field0,
                        revocation_type: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "EuropassEdcCredentialCredentialStatus",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<
                        EuropassEdcCredentialCredentialStatus,
                    >,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EuropassEdcCredentialCredentialStatus {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "EuropassEdcCredentialCredentialStatus",
                false as usize + 1 + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "id",
                &self.id,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.revocation_type,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[serde(untagged)]
pub enum EuropassEdcCredentialIssuer {
    String(String),
    Object {
        ///DID of the credential issuer
        id: String,
    },
}
#[automatically_derived]
impl ::core::clone::Clone for EuropassEdcCredentialIssuer {
    #[inline]
    fn clone(&self) -> EuropassEdcCredentialIssuer {
        match self {
            EuropassEdcCredentialIssuer::String(__self_0) => {
                EuropassEdcCredentialIssuer::String(
                    ::core::clone::Clone::clone(__self_0),
                )
            }
            EuropassEdcCredentialIssuer::Object { id: __self_0 } => {
                EuropassEdcCredentialIssuer::Object {
                    id: ::core::clone::Clone::clone(__self_0),
                }
            }
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EuropassEdcCredentialIssuer {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            EuropassEdcCredentialIssuer::String(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "String", &__self_0)
            }
            EuropassEdcCredentialIssuer::Object { id: __self_0 } => {
                ::core::fmt::Formatter::debug_struct_field1_finish(
                    f,
                    "Object",
                    "id",
                    &__self_0,
                )
            }
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for EuropassEdcCredentialIssuer {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            let __content = <_serde::__private::de::Content as _serde::Deserialize>::deserialize(
                __deserializer,
            )?;
            let __deserializer = _serde::__private::de::ContentRefDeserializer::<
                __D::Error,
            >::new(&__content);
            if let _serde::__private::Ok(__ok) = _serde::__private::Result::map(
                <String as _serde::Deserialize>::deserialize(__deserializer),
                EuropassEdcCredentialIssuer::String,
            ) {
                return _serde::__private::Ok(__ok);
            }
            if let _serde::__private::Ok(__ok) = {
                #[allow(non_camel_case_types)]
                #[doc(hidden)]
                enum __Field {
                    __field0,
                    __ignore,
                }
                #[doc(hidden)]
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "id" => _serde::__private::Ok(__Field::__field0),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"id" => _serde::__private::Ok(__Field::__field0),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                #[doc(hidden)]
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<EuropassEdcCredentialIssuer>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = EuropassEdcCredentialIssuer;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct variant EuropassEdcCredentialIssuer::Object",
                        )
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                        while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                            __Field,
                        >(&mut __map)? {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                    );
                                }
                                _ => {
                                    let _ = _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map)?;
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                _serde::__private::de::missing_field("id")?
                            }
                        };
                        _serde::__private::Ok(EuropassEdcCredentialIssuer::Object {
                            id: __field0,
                        })
                    }
                }
                #[doc(hidden)]
                const FIELDS: &'static [&'static str] = &["id"];
                _serde::Deserializer::deserialize_any(
                    __deserializer,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<
                            EuropassEdcCredentialIssuer,
                        >,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            } {
                return _serde::__private::Ok(__ok);
            }
            _serde::__private::Err(
                _serde::de::Error::custom(
                    "data did not match any variant of untagged enum EuropassEdcCredentialIssuer",
                ),
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EuropassEdcCredentialIssuer {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                EuropassEdcCredentialIssuer::String(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                EuropassEdcCredentialIssuer::Object { ref id } => {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "EuropassEdcCredentialIssuer",
                        0 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "id",
                        id,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        }
    }
};
#[serde(untagged)]
pub enum DataOrUri {
    Data(AgentOrPersonOrOrganisation),
    GenericId(UriType),
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for DataOrUri {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                DataOrUri::Data(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                DataOrUri::GenericId(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
            }
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for DataOrUri {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            let __content = <_serde::__private::de::Content as _serde::Deserialize>::deserialize(
                __deserializer,
            )?;
            let __deserializer = _serde::__private::de::ContentRefDeserializer::<
                __D::Error,
            >::new(&__content);
            if let _serde::__private::Ok(__ok) = _serde::__private::Result::map(
                <AgentOrPersonOrOrganisation as _serde::Deserialize>::deserialize(
                    __deserializer,
                ),
                DataOrUri::Data,
            ) {
                return _serde::__private::Ok(__ok);
            }
            if let _serde::__private::Ok(__ok) = _serde::__private::Result::map(
                <UriType as _serde::Deserialize>::deserialize(__deserializer),
                DataOrUri::GenericId,
            ) {
                return _serde::__private::Ok(__ok);
            }
            _serde::__private::Err(
                _serde::de::Error::custom(
                    "data did not match any variant of untagged enum DataOrUri",
                ),
            )
        }
    }
};
#[automatically_derived]
impl ::core::clone::Clone for DataOrUri {
    #[inline]
    fn clone(&self) -> DataOrUri {
        match self {
            DataOrUri::Data(__self_0) => {
                DataOrUri::Data(::core::clone::Clone::clone(__self_0))
            }
            DataOrUri::GenericId(__self_0) => {
                DataOrUri::GenericId(::core::clone::Clone::clone(__self_0))
            }
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for DataOrUri {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            DataOrUri::Data(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Data", &__self_0)
            }
            DataOrUri::GenericId(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "GenericId",
                    &__self_0,
                )
            }
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct EuropeanDigitalCredential {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attachment: Option<OneOrMany<MediaObject>>,
    #[serde(rename = "credentialProfiles")]
    pub credential_profiles: OneOrMany<Concept>,
    #[serde(rename = "credentialSchema")]
    pub credential_schema: OneOrMany<CredentialSchema>,
    #[serde(
        rename = "credentialStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub credential_status: Option<OneOrMany<CredentialStatus>>,
    #[serde(rename = "credentialSubject")]
    pub credential_subject: AgentOrPersonOrOrganisation,
    #[serde(rename = "displayParameter")]
    pub display_parameter: DisplayParameter,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub evidence: Option<OneOrMany<Evidence>>,
    #[serde(rename = "expirationDate")]
    pub expiration_date: Option<OneOrMany<DateTime<Utc>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub holder: Option<OneOrMany<AgentOrPersonOrOrganisation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(rename = "issuanceDate", default, skip_serializing_if = "Option::is_none")]
    pub issuance_date: Option<DateTime<Utc>>,
    pub issued: DateTime<Utc>,
    pub issuer: DataOrUri,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proof: Option<OneOrMany<Proof>>,
    #[serde(rename = "termsOfUse", default, skip_serializing_if = "Option::is_none")]
    pub terms_of_use: Option<OneOrMany<TermsOfUseValue>>,
    #[serde(rename = "validFrom")]
    pub valid_from: DateTime<Utc>,
    #[serde(rename = "validUntil", default, skip_serializing_if = "Option::is_none")]
    pub valid_until: Option<DateTime<Utc>>,
    #[serde(rename = "type")]
    pub type_: EuropeanDigitalCredentialTag,
}
#[automatically_derived]
impl ::core::clone::Clone for EuropeanDigitalCredential {
    #[inline]
    fn clone(&self) -> EuropeanDigitalCredential {
        EuropeanDigitalCredential {
            attachment: ::core::clone::Clone::clone(&self.attachment),
            credential_profiles: ::core::clone::Clone::clone(&self.credential_profiles),
            credential_schema: ::core::clone::Clone::clone(&self.credential_schema),
            credential_status: ::core::clone::Clone::clone(&self.credential_status),
            credential_subject: ::core::clone::Clone::clone(&self.credential_subject),
            display_parameter: ::core::clone::Clone::clone(&self.display_parameter),
            evidence: ::core::clone::Clone::clone(&self.evidence),
            expiration_date: ::core::clone::Clone::clone(&self.expiration_date),
            holder: ::core::clone::Clone::clone(&self.holder),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            issuance_date: ::core::clone::Clone::clone(&self.issuance_date),
            issued: ::core::clone::Clone::clone(&self.issued),
            issuer: ::core::clone::Clone::clone(&self.issuer),
            proof: ::core::clone::Clone::clone(&self.proof),
            terms_of_use: ::core::clone::Clone::clone(&self.terms_of_use),
            valid_from: ::core::clone::Clone::clone(&self.valid_from),
            valid_until: ::core::clone::Clone::clone(&self.valid_until),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EuropeanDigitalCredential {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "attachment",
            "credential_profiles",
            "credential_schema",
            "credential_status",
            "credential_subject",
            "display_parameter",
            "evidence",
            "expiration_date",
            "holder",
            "id",
            "identifier",
            "issuance_date",
            "issued",
            "issuer",
            "proof",
            "terms_of_use",
            "valid_from",
            "valid_until",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.attachment,
            &self.credential_profiles,
            &self.credential_schema,
            &self.credential_status,
            &self.credential_subject,
            &self.display_parameter,
            &self.evidence,
            &self.expiration_date,
            &self.holder,
            &self.id,
            &self.identifier,
            &self.issuance_date,
            &self.issued,
            &self.issuer,
            &self.proof,
            &self.terms_of_use,
            &self.valid_from,
            &self.valid_until,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "EuropeanDigitalCredential",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for EuropeanDigitalCredential {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 19",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "attachment" => _serde::__private::Ok(__Field::__field0),
                        "credentialProfiles" => _serde::__private::Ok(__Field::__field1),
                        "credentialSchema" => _serde::__private::Ok(__Field::__field2),
                        "credentialStatus" => _serde::__private::Ok(__Field::__field3),
                        "credentialSubject" => _serde::__private::Ok(__Field::__field4),
                        "displayParameter" => _serde::__private::Ok(__Field::__field5),
                        "evidence" => _serde::__private::Ok(__Field::__field6),
                        "expirationDate" => _serde::__private::Ok(__Field::__field7),
                        "holder" => _serde::__private::Ok(__Field::__field8),
                        "id" => _serde::__private::Ok(__Field::__field9),
                        "identifier" => _serde::__private::Ok(__Field::__field10),
                        "issuanceDate" => _serde::__private::Ok(__Field::__field11),
                        "issued" => _serde::__private::Ok(__Field::__field12),
                        "issuer" => _serde::__private::Ok(__Field::__field13),
                        "proof" => _serde::__private::Ok(__Field::__field14),
                        "termsOfUse" => _serde::__private::Ok(__Field::__field15),
                        "validFrom" => _serde::__private::Ok(__Field::__field16),
                        "validUntil" => _serde::__private::Ok(__Field::__field17),
                        "type" => _serde::__private::Ok(__Field::__field18),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"attachment" => _serde::__private::Ok(__Field::__field0),
                        b"credentialProfiles" => _serde::__private::Ok(__Field::__field1),
                        b"credentialSchema" => _serde::__private::Ok(__Field::__field2),
                        b"credentialStatus" => _serde::__private::Ok(__Field::__field3),
                        b"credentialSubject" => _serde::__private::Ok(__Field::__field4),
                        b"displayParameter" => _serde::__private::Ok(__Field::__field5),
                        b"evidence" => _serde::__private::Ok(__Field::__field6),
                        b"expirationDate" => _serde::__private::Ok(__Field::__field7),
                        b"holder" => _serde::__private::Ok(__Field::__field8),
                        b"id" => _serde::__private::Ok(__Field::__field9),
                        b"identifier" => _serde::__private::Ok(__Field::__field10),
                        b"issuanceDate" => _serde::__private::Ok(__Field::__field11),
                        b"issued" => _serde::__private::Ok(__Field::__field12),
                        b"issuer" => _serde::__private::Ok(__Field::__field13),
                        b"proof" => _serde::__private::Ok(__Field::__field14),
                        b"termsOfUse" => _serde::__private::Ok(__Field::__field15),
                        b"validFrom" => _serde::__private::Ok(__Field::__field16),
                        b"validUntil" => _serde::__private::Ok(__Field::__field17),
                        b"type" => _serde::__private::Ok(__Field::__field18),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<EuropeanDigitalCredential>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = EuropeanDigitalCredential;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct EuropeanDigitalCredential",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<MediaObject>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<CredentialSchema>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<CredentialStatus>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        AgentOrPersonOrOrganisation,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        DisplayParameter,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    5usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Evidence>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<DateTime<Utc>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        DateTime<Utc>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    12usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        DataOrUri,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    13usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Proof>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<TermsOfUseValue>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        DateTime<Utc>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    16usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        EuropeanDigitalCredentialTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    18usize,
                                    &"struct EuropeanDigitalCredential with 19 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(EuropeanDigitalCredential {
                        attachment: __field0,
                        credential_profiles: __field1,
                        credential_schema: __field2,
                        credential_status: __field3,
                        credential_subject: __field4,
                        display_parameter: __field5,
                        evidence: __field6,
                        expiration_date: __field7,
                        holder: __field8,
                        id: __field9,
                        identifier: __field10,
                        issuance_date: __field11,
                        issued: __field12,
                        issuer: __field13,
                        proof: __field14,
                        terms_of_use: __field15,
                        valid_from: __field16,
                        valid_until: __field17,
                        type_: __field18,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<MediaObject>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<OneOrMany<Concept>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        OneOrMany<CredentialSchema>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<CredentialStatus>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        AgentOrPersonOrOrganisation,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<DisplayParameter> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<OneOrMany<Evidence>>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<
                        Option<OneOrMany<DateTime<Utc>>>,
                    > = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<DateTime<Utc>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<DateTime<Utc>> = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<DataOrUri> = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<Proof>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<OneOrMany<TermsOfUseValue>>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<DateTime<Utc>> = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<
                        Option<DateTime<Utc>>,
                    > = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<
                        EuropeanDigitalCredentialTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "attachment",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<MediaObject>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "credentialProfiles",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "credentialSchema",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<CredentialSchema>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "credentialStatus",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<CredentialStatus>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "credentialSubject",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        AgentOrPersonOrOrganisation,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "displayParameter",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        DisplayParameter,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "evidence",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Evidence>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "expirationDate",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<DateTime<Utc>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("holder"),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "issuanceDate",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("issued"),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        DateTime<Utc>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("issuer"),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<DataOrUri>(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("proof"),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Proof>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "termsOfUse",
                                        ),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<TermsOfUseValue>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "validFrom",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        DateTime<Utc>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "validUntil",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        EuropeanDigitalCredentialTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("credentialProfiles")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("credentialSchema")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("credentialSubject")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("displayParameter")?
                        }
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("expirationDate")?
                        }
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("issued")?
                        }
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("issuer")?
                        }
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("validFrom")?
                        }
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(EuropeanDigitalCredential {
                        attachment: __field0,
                        credential_profiles: __field1,
                        credential_schema: __field2,
                        credential_status: __field3,
                        credential_subject: __field4,
                        display_parameter: __field5,
                        evidence: __field6,
                        expiration_date: __field7,
                        holder: __field8,
                        id: __field9,
                        identifier: __field10,
                        issuance_date: __field11,
                        issued: __field12,
                        issuer: __field13,
                        proof: __field14,
                        terms_of_use: __field15,
                        valid_from: __field16,
                        valid_until: __field17,
                        type_: __field18,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "attachment",
                "credentialProfiles",
                "credentialSchema",
                "credentialStatus",
                "credentialSubject",
                "displayParameter",
                "evidence",
                "expirationDate",
                "holder",
                "id",
                "identifier",
                "issuanceDate",
                "issued",
                "issuer",
                "proof",
                "termsOfUse",
                "validFrom",
                "validUntil",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "EuropeanDigitalCredential",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<EuropeanDigitalCredential>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EuropeanDigitalCredential {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "EuropeanDigitalCredential",
                false as usize + if Option::is_none(&self.attachment) { 0 } else { 1 }
                    + 1 + 1
                    + if Option::is_none(&self.credential_status) { 0 } else { 1 } + 1
                    + 1 + if Option::is_none(&self.evidence) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.holder) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.issuance_date) { 0 } else { 1 } + 1 + 1
                    + if Option::is_none(&self.proof) { 0 } else { 1 }
                    + if Option::is_none(&self.terms_of_use) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.valid_until) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.attachment) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "attachment",
                    &self.attachment,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "attachment",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "credentialProfiles",
                &self.credential_profiles,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "credentialSchema",
                &self.credential_schema,
            )?;
            if !Option::is_none(&self.credential_status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "credentialStatus",
                    &self.credential_status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "credentialStatus",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "credentialSubject",
                &self.credential_subject,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "displayParameter",
                &self.display_parameter,
            )?;
            if !Option::is_none(&self.evidence) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "evidence",
                    &self.evidence,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "evidence",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "expirationDate",
                &self.expiration_date,
            )?;
            if !Option::is_none(&self.holder) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "holder",
                    &self.holder,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "holder")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.issuance_date) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "issuanceDate",
                    &self.issuance_date,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "issuanceDate",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "issued",
                &self.issued,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "issuer",
                &self.issuer,
            )?;
            if !Option::is_none(&self.proof) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "proof",
                    &self.proof,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "proof")?;
            }
            if !Option::is_none(&self.terms_of_use) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "termsOfUse",
                    &self.terms_of_use,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "termsOfUse",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "validFrom",
                &self.valid_from,
            )?;
            if !Option::is_none(&self.valid_until) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "validUntil",
                    &self.valid_until,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "validUntil",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl EuropeanDigitalCredential {
    pub fn tag() -> EuropeanDigitalCredentialTag {
        EuropeanDigitalCredentialTag::default()
    }
}
/// Tag matching the struct name
pub struct EuropeanDigitalCredentialTag(String);
#[automatically_derived]
impl ::core::clone::Clone for EuropeanDigitalCredentialTag {
    #[inline]
    fn clone(&self) -> EuropeanDigitalCredentialTag {
        EuropeanDigitalCredentialTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EuropeanDigitalCredentialTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "EuropeanDigitalCredentialTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EuropeanDigitalCredentialTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "EuropeanDigitalCredentialTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for EuropeanDigitalCredentialTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for EuropeanDigitalCredentialTag {
    fn default() -> Self {
        Self("EuropeanDigitalCredential".to_string())
    }
}
impl<'de> Deserialize<'de> for EuropeanDigitalCredentialTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "EuropeanDigitalCredential" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"EuropeanDigitalCredential",
                ),
            )
        } else {
            Ok(EuropeanDigitalCredentialTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct EuropeanDigitalPresentation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub holder: Option<OneOrMany<AgentOrPersonOrOrganisation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proof: Option<OneOrMany<Proof>>,
    #[serde(
        rename = "verifiableCredential",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub verifiable_credential: Option<OneOrMany<EuropeanDigitalCredential>>,
    #[serde(
        rename = "verificationCheck",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub verification_check: Option<OneOrMany<VerificationCheck>>,
    #[serde(rename = "type")]
    pub type_: EuropeanDigitalPresentationTag,
}
#[automatically_derived]
impl ::core::clone::Clone for EuropeanDigitalPresentation {
    #[inline]
    fn clone(&self) -> EuropeanDigitalPresentation {
        EuropeanDigitalPresentation {
            holder: ::core::clone::Clone::clone(&self.holder),
            id: ::core::clone::Clone::clone(&self.id),
            proof: ::core::clone::Clone::clone(&self.proof),
            verifiable_credential: ::core::clone::Clone::clone(
                &self.verifiable_credential,
            ),
            verification_check: ::core::clone::Clone::clone(&self.verification_check),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EuropeanDigitalPresentation {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "holder",
            "id",
            "proof",
            "verifiable_credential",
            "verification_check",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.holder,
            &self.id,
            &self.proof,
            &self.verifiable_credential,
            &self.verification_check,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "EuropeanDigitalPresentation",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for EuropeanDigitalPresentation {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 6",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "holder" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "proof" => _serde::__private::Ok(__Field::__field2),
                        "verifiableCredential" => {
                            _serde::__private::Ok(__Field::__field3)
                        }
                        "verificationCheck" => _serde::__private::Ok(__Field::__field4),
                        "type" => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"holder" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"proof" => _serde::__private::Ok(__Field::__field2),
                        b"verifiableCredential" => {
                            _serde::__private::Ok(__Field::__field3)
                        }
                        b"verificationCheck" => _serde::__private::Ok(__Field::__field4),
                        b"type" => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<EuropeanDigitalPresentation>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = EuropeanDigitalPresentation;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct EuropeanDigitalPresentation",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Proof>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<EuropeanDigitalCredential>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<VerificationCheck>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        EuropeanDigitalPresentationTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    5usize,
                                    &"struct EuropeanDigitalPresentation with 6 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(EuropeanDigitalPresentation {
                        holder: __field0,
                        id: __field1,
                        proof: __field2,
                        verifiable_credential: __field3,
                        verification_check: __field4,
                        type_: __field5,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<Proof>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<EuropeanDigitalCredential>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<VerificationCheck>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        EuropeanDigitalPresentationTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("holder"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("proof"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Proof>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "verifiableCredential",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<EuropeanDigitalCredential>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "verificationCheck",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<VerificationCheck>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        EuropeanDigitalPresentationTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(EuropeanDigitalPresentation {
                        holder: __field0,
                        id: __field1,
                        proof: __field2,
                        verifiable_credential: __field3,
                        verification_check: __field4,
                        type_: __field5,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "holder",
                "id",
                "proof",
                "verifiableCredential",
                "verificationCheck",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "EuropeanDigitalPresentation",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<
                        EuropeanDigitalPresentation,
                    >,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EuropeanDigitalPresentation {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "EuropeanDigitalPresentation",
                false as usize + if Option::is_none(&self.holder) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.proof) { 0 } else { 1 }
                    + if Option::is_none(&self.verifiable_credential) { 0 } else { 1 }
                    + if Option::is_none(&self.verification_check) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.holder) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "holder",
                    &self.holder,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "holder")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.proof) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "proof",
                    &self.proof,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "proof")?;
            }
            if !Option::is_none(&self.verifiable_credential) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "verifiableCredential",
                    &self.verifiable_credential,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "verifiableCredential",
                )?;
            }
            if !Option::is_none(&self.verification_check) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "verificationCheck",
                    &self.verification_check,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "verificationCheck",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl EuropeanDigitalPresentation {
    pub fn tag() -> EuropeanDigitalPresentationTag {
        EuropeanDigitalPresentationTag::default()
    }
}
/// Tag matching the struct name
pub struct EuropeanDigitalPresentationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for EuropeanDigitalPresentationTag {
    #[inline]
    fn clone(&self) -> EuropeanDigitalPresentationTag {
        EuropeanDigitalPresentationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EuropeanDigitalPresentationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "EuropeanDigitalPresentationTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EuropeanDigitalPresentationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "EuropeanDigitalPresentationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for EuropeanDigitalPresentationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for EuropeanDigitalPresentationTag {
    fn default() -> Self {
        Self("EuropeanDigitalPresentation".to_string())
    }
}
impl<'de> Deserialize<'de> for EuropeanDigitalPresentationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "EuropeanDigitalPresentation" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"EuropeanDigitalPresentation",
                ),
            )
        } else {
            Ok(EuropeanDigitalPresentationTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Evidence {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accreditation: Option<Box<Accreditation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub embedded_evidence: Option<OneOrMany<MediaObject>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub evidence_statement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub evidence_target: Option<AgentOrPersonOrOrganisation>,
    ///If present, it MUST contain a URL that points to where more information about this instance of evidence can be found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<Concept>,
    #[serde(rename = "type")]
    pub type_: EvidenceTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Evidence {
    #[inline]
    fn clone(&self) -> Evidence {
        Evidence {
            accreditation: ::core::clone::Clone::clone(&self.accreditation),
            embedded_evidence: ::core::clone::Clone::clone(&self.embedded_evidence),
            evidence_statement: ::core::clone::Clone::clone(&self.evidence_statement),
            evidence_target: ::core::clone::Clone::clone(&self.evidence_target),
            id: ::core::clone::Clone::clone(&self.id),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Evidence {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "accreditation",
            "embedded_evidence",
            "evidence_statement",
            "evidence_target",
            "id",
            "dc_type",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.accreditation,
            &self.embedded_evidence,
            &self.evidence_statement,
            &self.evidence_target,
            &self.id,
            &self.dc_type,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "Evidence", names, values)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Evidence {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 7",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "accreditation" => _serde::__private::Ok(__Field::__field0),
                        "embeddedEvidence" => _serde::__private::Ok(__Field::__field1),
                        "evidenceStatement" => _serde::__private::Ok(__Field::__field2),
                        "evidenceTarget" => _serde::__private::Ok(__Field::__field3),
                        "id" => _serde::__private::Ok(__Field::__field4),
                        "dcType" => _serde::__private::Ok(__Field::__field5),
                        "type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"accreditation" => _serde::__private::Ok(__Field::__field0),
                        b"embeddedEvidence" => _serde::__private::Ok(__Field::__field1),
                        b"evidenceStatement" => _serde::__private::Ok(__Field::__field2),
                        b"evidenceTarget" => _serde::__private::Ok(__Field::__field3),
                        b"id" => _serde::__private::Ok(__Field::__field4),
                        b"dcType" => _serde::__private::Ok(__Field::__field5),
                        b"type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Evidence>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Evidence;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Evidence",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<Accreditation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<MediaObject>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<AgentOrPersonOrOrganisation>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        EvidenceTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct Evidence with 7 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Evidence {
                        accreditation: __field0,
                        embedded_evidence: __field1,
                        evidence_statement: __field2,
                        evidence_target: __field3,
                        id: __field4,
                        dc_type: __field5,
                        type_: __field6,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<Box<Accreditation>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        Option<OneOrMany<MediaObject>>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<AgentOrPersonOrOrganisation>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<EvidenceTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "accreditation",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<Accreditation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "embeddedEvidence",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<MediaObject>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "evidenceStatement",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "evidenceTarget",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<AgentOrPersonOrOrganisation>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        EvidenceTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Evidence {
                        accreditation: __field0,
                        embedded_evidence: __field1,
                        evidence_statement: __field2,
                        evidence_target: __field3,
                        id: __field4,
                        dc_type: __field5,
                        type_: __field6,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "accreditation",
                "embeddedEvidence",
                "evidenceStatement",
                "evidenceTarget",
                "id",
                "dcType",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Evidence",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Evidence>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Evidence {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Evidence",
                false as usize + if Option::is_none(&self.accreditation) { 0 } else { 1 }
                    + if Option::is_none(&self.embedded_evidence) { 0 } else { 1 }
                    + if Option::is_none(&self.evidence_statement) { 0 } else { 1 }
                    + if Option::is_none(&self.evidence_target) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.accreditation) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "accreditation",
                    &self.accreditation,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "accreditation",
                )?;
            }
            if !Option::is_none(&self.embedded_evidence) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "embeddedEvidence",
                    &self.embedded_evidence,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "embeddedEvidence",
                )?;
            }
            if !Option::is_none(&self.evidence_statement) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "evidenceStatement",
                    &self.evidence_statement,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "evidenceStatement",
                )?;
            }
            if !Option::is_none(&self.evidence_target) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "evidenceTarget",
                    &self.evidence_target,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "evidenceTarget",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Evidence {
    pub fn tag() -> EvidenceTag {
        EvidenceTag::default()
    }
}
/// Tag matching the struct name
pub struct EvidenceTag(String);
#[automatically_derived]
impl ::core::clone::Clone for EvidenceTag {
    #[inline]
    fn clone(&self) -> EvidenceTag {
        EvidenceTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for EvidenceTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "EvidenceTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EvidenceTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "EvidenceTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for EvidenceTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for EvidenceTag {
    fn default() -> Self {
        Self("Evidence".to_string())
    }
}
impl<'de> Deserialize<'de> for EvidenceTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Evidence" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Evidence",
                ),
            )
        } else {
            Ok(EvidenceTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct Geometry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latitude: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub longitude: Option<String>,
    #[serde(rename = "type")]
    pub type_: GeometryTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Geometry {
    #[inline]
    fn clone(&self) -> Geometry {
        Geometry {
            id: ::core::clone::Clone::clone(&self.id),
            latitude: ::core::clone::Clone::clone(&self.latitude),
            longitude: ::core::clone::Clone::clone(&self.longitude),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Geometry {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field4_finish(
            f,
            "Geometry",
            "id",
            &self.id,
            "latitude",
            &self.latitude,
            "longitude",
            &self.longitude,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Geometry {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 4",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "latitude" => _serde::__private::Ok(__Field::__field1),
                        "longitude" => _serde::__private::Ok(__Field::__field2),
                        "type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"latitude" => _serde::__private::Ok(__Field::__field1),
                        b"longitude" => _serde::__private::Ok(__Field::__field2),
                        b"type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Geometry>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Geometry;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Geometry",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        GeometryTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct Geometry with 4 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Geometry {
                        id: __field0,
                        latitude: __field1,
                        longitude: __field2,
                        type_: __field3,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<GeometryTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "latitude",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "longitude",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        GeometryTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Geometry {
                        id: __field0,
                        latitude: __field1,
                        longitude: __field2,
                        type_: __field3,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "id",
                "latitude",
                "longitude",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Geometry",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Geometry>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Geometry {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Geometry",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.latitude) { 0 } else { 1 }
                    + if Option::is_none(&self.longitude) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.latitude) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "latitude",
                    &self.latitude,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "latitude",
                )?;
            }
            if !Option::is_none(&self.longitude) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "longitude",
                    &self.longitude,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "longitude",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Geometry {
    pub fn tag() -> GeometryTag {
        GeometryTag::default()
    }
}
/// Tag matching the struct name
pub struct GeometryTag(String);
#[automatically_derived]
impl ::core::clone::Clone for GeometryTag {
    #[inline]
    fn clone(&self) -> GeometryTag {
        GeometryTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for GeometryTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "GeometryTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for GeometryTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "GeometryTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for GeometryTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for GeometryTag {
    fn default() -> Self {
        Self("Geometry".to_string())
    }
}
impl<'de> Deserialize<'de> for GeometryTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Geometry" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Geometry",
                ),
            )
        } else {
            Ok(GeometryTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct GradingScheme {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(
        rename = "supplementaryDocument",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: GradingSchemeTag,
}
#[automatically_derived]
impl ::core::clone::Clone for GradingScheme {
    #[inline]
    fn clone(&self) -> GradingScheme {
        GradingScheme {
            description: ::core::clone::Clone::clone(&self.description),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for GradingScheme {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "description",
            "id",
            "identifier",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.description,
            &self.id,
            &self.identifier,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "GradingScheme",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for GradingScheme {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 6",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "description" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "identifier" => _serde::__private::Ok(__Field::__field2),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field3)
                        }
                        "title" => _serde::__private::Ok(__Field::__field4),
                        "type" => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"description" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"identifier" => _serde::__private::Ok(__Field::__field2),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field3)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field4),
                        b"type" => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<GradingScheme>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = GradingScheme;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct GradingScheme",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct GradingScheme with 6 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        GradingSchemeTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    5usize,
                                    &"struct GradingScheme with 6 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(GradingScheme {
                        description: __field0,
                        id: __field1,
                        identifier: __field2,
                        supplementary_document: __field3,
                        title: __field4,
                        type_: __field5,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<GradingSchemeTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        GradingSchemeTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(GradingScheme {
                        description: __field0,
                        id: __field1,
                        identifier: __field2,
                        supplementary_document: __field3,
                        title: __field4,
                        type_: __field5,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "description",
                "id",
                "identifier",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "GradingScheme",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<GradingScheme>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for GradingScheme {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "GradingScheme",
                false as usize + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl GradingScheme {
    pub fn tag() -> GradingSchemeTag {
        GradingSchemeTag::default()
    }
}
/// Tag matching the struct name
pub struct GradingSchemeTag(String);
#[automatically_derived]
impl ::core::clone::Clone for GradingSchemeTag {
    #[inline]
    fn clone(&self) -> GradingSchemeTag {
        GradingSchemeTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for GradingSchemeTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "GradingSchemeTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for GradingSchemeTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "GradingSchemeTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for GradingSchemeTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for GradingSchemeTag {
    fn default() -> Self {
        Self("GradingScheme".to_string())
    }
}
impl<'de> Deserialize<'de> for GradingSchemeTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "GradingScheme" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"GradingScheme",
                ),
            )
        } else {
            Ok(GradingSchemeTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct Grant {
    #[serde(rename = "contentURL", default, skip_serializing_if = "Option::is_none")]
    pub content_url: Option<UriType>,
    #[serde(rename = "dcType", default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(
        rename = "supplementaryDocument",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: GrantTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Grant {
    #[inline]
    fn clone(&self) -> Grant {
        Grant {
            content_url: ::core::clone::Clone::clone(&self.content_url),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            id: ::core::clone::Clone::clone(&self.id),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Grant {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "content_url",
            "dc_type",
            "description",
            "id",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.content_url,
            &self.dc_type,
            &self.description,
            &self.id,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "Grant", names, values)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Grant {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 7",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "contentURL" => _serde::__private::Ok(__Field::__field0),
                        "dcType" => _serde::__private::Ok(__Field::__field1),
                        "description" => _serde::__private::Ok(__Field::__field2),
                        "id" => _serde::__private::Ok(__Field::__field3),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field4)
                        }
                        "title" => _serde::__private::Ok(__Field::__field5),
                        "type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"contentURL" => _serde::__private::Ok(__Field::__field0),
                        b"dcType" => _serde::__private::Ok(__Field::__field1),
                        b"description" => _serde::__private::Ok(__Field::__field2),
                        b"id" => _serde::__private::Ok(__Field::__field3),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field4)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field5),
                        b"type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Grant>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Grant;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Grant")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    5usize,
                                    &"struct Grant with 7 elements",
                                ),
                            );
                        }
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        GrantTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct Grant with 7 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Grant {
                        content_url: __field0,
                        dc_type: __field1,
                        description: __field2,
                        id: __field3,
                        supplementary_document: __field4,
                        title: __field5,
                        type_: __field6,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<GrantTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contentURL",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<GrantTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Grant {
                        content_url: __field0,
                        dc_type: __field1,
                        description: __field2,
                        id: __field3,
                        supplementary_document: __field4,
                        title: __field5,
                        type_: __field6,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "contentURL",
                "dcType",
                "description",
                "id",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Grant",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Grant>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Grant {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Grant",
                false as usize + if Option::is_none(&self.content_url) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.content_url) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contentURL",
                    &self.content_url,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contentURL",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Grant {
    pub fn tag() -> GrantTag {
        GrantTag::default()
    }
}
/// Tag matching the struct name
pub struct GrantTag(String);
#[automatically_derived]
impl ::core::clone::Clone for GrantTag {
    #[inline]
    fn clone(&self) -> GrantTag {
        GrantTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for GrantTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "GrantTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for GrantTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "GrantTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for GrantTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for GrantTag {
    fn default() -> Self {
        Self("Grant".to_string())
    }
}
impl<'de> Deserialize<'de> for GrantTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Grant" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Grant",
                ),
            )
        } else {
            Ok(GrantTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Group {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alt_label: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contact_point: Option<OneOrMany<ContactPoint>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<OneOrMany<Location>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub member: Option<OneOrMany<AgentOrPersonOrOrganisation>>,
    pub pref_label: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: GroupTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Group {
    #[inline]
    fn clone(&self) -> Group {
        Group {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            alt_label: ::core::clone::Clone::clone(&self.alt_label),
            contact_point: ::core::clone::Clone::clone(&self.contact_point),
            id: ::core::clone::Clone::clone(&self.id),
            location: ::core::clone::Clone::clone(&self.location),
            member: ::core::clone::Clone::clone(&self.member),
            pref_label: ::core::clone::Clone::clone(&self.pref_label),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Group {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "alt_label",
            "contact_point",
            "id",
            "location",
            "member",
            "pref_label",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.alt_label,
            &self.contact_point,
            &self.id,
            &self.location,
            &self.member,
            &self.pref_label,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "Group", names, values)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Group {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 8",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "altLabel" => _serde::__private::Ok(__Field::__field1),
                        "contactPoint" => _serde::__private::Ok(__Field::__field2),
                        "id" => _serde::__private::Ok(__Field::__field3),
                        "location" => _serde::__private::Ok(__Field::__field4),
                        "member" => _serde::__private::Ok(__Field::__field5),
                        "prefLabel" => _serde::__private::Ok(__Field::__field6),
                        "type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"altLabel" => _serde::__private::Ok(__Field::__field1),
                        b"contactPoint" => _serde::__private::Ok(__Field::__field2),
                        b"id" => _serde::__private::Ok(__Field::__field3),
                        b"location" => _serde::__private::Ok(__Field::__field4),
                        b"member" => _serde::__private::Ok(__Field::__field5),
                        b"prefLabel" => _serde::__private::Ok(__Field::__field6),
                        b"type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Group>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Group;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Group")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<ContactPoint>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Location>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct Group with 8 elements",
                                ),
                            );
                        }
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        GroupTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct Group with 8 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Group {
                        additional_note: __field0,
                        alt_label: __field1,
                        contact_point: __field2,
                        id: __field3,
                        location: __field4,
                        member: __field5,
                        pref_label: __field6,
                        type_: __field7,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<ContactPoint>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<Location>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<GroupTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "altLabel",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contactPoint",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<ContactPoint>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Location>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("member"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "prefLabel",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<GroupTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("prefLabel")?
                        }
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Group {
                        additional_note: __field0,
                        alt_label: __field1,
                        contact_point: __field2,
                        id: __field3,
                        location: __field4,
                        member: __field5,
                        pref_label: __field6,
                        type_: __field7,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "altLabel",
                "contactPoint",
                "id",
                "location",
                "member",
                "prefLabel",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Group",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Group>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Group {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Group",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.alt_label) { 0 } else { 1 }
                    + if Option::is_none(&self.contact_point) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.location) { 0 } else { 1 }
                    + if Option::is_none(&self.member) { 0 } else { 1 } + 1 + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.alt_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "altLabel",
                    &self.alt_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "altLabel",
                )?;
            }
            if !Option::is_none(&self.contact_point) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contactPoint",
                    &self.contact_point,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contactPoint",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.location) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "location",
                    &self.location,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "location",
                )?;
            }
            if !Option::is_none(&self.member) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "member",
                    &self.member,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "member")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "prefLabel",
                &self.pref_label,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Group {
    pub fn tag() -> GroupTag {
        GroupTag::default()
    }
}
/// Tag matching the struct name
pub struct GroupTag(String);
#[automatically_derived]
impl ::core::clone::Clone for GroupTag {
    #[inline]
    fn clone(&self) -> GroupTag {
        GroupTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for GroupTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "GroupTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for GroupTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "GroupTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for GroupTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for GroupTag {
    fn default() -> Self {
        Self("Group".to_string())
    }
}
impl<'de> Deserialize<'de> for GroupTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Group" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Group",
                ),
            )
        } else {
            Ok(GroupTag(val))
        }
    }
}
pub struct HtmlType(pub String);
#[automatically_derived]
impl ::core::clone::Clone for HtmlType {
    #[inline]
    fn clone(&self) -> HtmlType {
        HtmlType(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for HtmlType {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "HtmlType", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for HtmlType {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<HtmlType>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = HtmlType;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "tuple struct HtmlType",
                    )
                }
                #[inline]
                fn visit_newtype_struct<__E>(
                    self,
                    __e: __E,
                ) -> _serde::__private::Result<Self::Value, __E::Error>
                where
                    __E: _serde::Deserializer<'de>,
                {
                    let __field0: String = <String as _serde::Deserialize>::deserialize(
                        __e,
                    )?;
                    _serde::__private::Ok(HtmlType(__field0))
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"tuple struct HtmlType with 1 element",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(HtmlType(__field0))
                }
            }
            _serde::Deserializer::deserialize_newtype_struct(
                __deserializer,
                "HtmlType",
                __Visitor {
                    marker: _serde::__private::PhantomData::<HtmlType>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[automatically_derived]
impl ::core::cmp::Eq for HtmlType {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<String>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for HtmlType {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for HtmlType {
    #[inline]
    fn cmp(&self, other: &HtmlType) -> ::core::cmp::Ordering {
        ::core::cmp::Ord::cmp(&self.0, &other.0)
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for HtmlType {}
#[automatically_derived]
impl ::core::cmp::PartialEq for HtmlType {
    #[inline]
    fn eq(&self, other: &HtmlType) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for HtmlType {
    #[inline]
    fn partial_cmp(
        &self,
        other: &HtmlType,
    ) -> ::core::option::Option<::core::cmp::Ordering> {
        ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for HtmlType {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "HtmlType",
                &self.0,
            )
        }
    }
};
impl std::ops::Deref for HtmlType {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
#[serde(rename_all = "camelCase", untagged)]
pub enum IdentifierOrLegalIdentifier {
    Identifier(Box<Identifier>),
    LegalIdentifier(Box<LegalIdentifier>),
}
#[automatically_derived]
impl ::core::clone::Clone for IdentifierOrLegalIdentifier {
    #[inline]
    fn clone(&self) -> IdentifierOrLegalIdentifier {
        match self {
            IdentifierOrLegalIdentifier::Identifier(__self_0) => {
                IdentifierOrLegalIdentifier::Identifier(
                    ::core::clone::Clone::clone(__self_0),
                )
            }
            IdentifierOrLegalIdentifier::LegalIdentifier(__self_0) => {
                IdentifierOrLegalIdentifier::LegalIdentifier(
                    ::core::clone::Clone::clone(__self_0),
                )
            }
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for IdentifierOrLegalIdentifier {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            IdentifierOrLegalIdentifier::Identifier(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "Identifier",
                    &__self_0,
                )
            }
            IdentifierOrLegalIdentifier::LegalIdentifier(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "LegalIdentifier",
                    &__self_0,
                )
            }
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for IdentifierOrLegalIdentifier {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                IdentifierOrLegalIdentifier::Identifier(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                IdentifierOrLegalIdentifier::LegalIdentifier(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
            }
        }
    }
};
impl<'de> ::serde::Deserialize<'de> for IdentifierOrLegalIdentifier {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let serde_value = serde_json::Value::deserialize(deserializer)?;
        let tag = serde_value
            .get("type")
            .map(|t| t.as_str().map(|s| s.to_string()))
            .ok_or(::serde::de::Error::missing_field("type"))?;
        if let Some(tag) = tag {
            if (&tag == "Identifier") {
                return Ok(
                    Self::Identifier(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            if (&tag == "LegalIdentifier") {
                return Ok(
                    Self::LegalIdentifier(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            Err(
                ::serde::de::Error::unknown_variant(
                    &tag,
                    &["Identifier", "LegalIdentifier"],
                ),
            )
        } else {
            Err(::serde::de::Error::missing_field("type"))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Identifier {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub creator: Option<IriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_issued: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub notation: Literal,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme_agency: Option<LangKV>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme_id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme_version: Option<String>,
    #[serde(rename = "type")]
    pub type_: IdentifierTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Identifier {
    #[inline]
    fn clone(&self) -> Identifier {
        Identifier {
            creator: ::core::clone::Clone::clone(&self.creator),
            date_issued: ::core::clone::Clone::clone(&self.date_issued),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            id: ::core::clone::Clone::clone(&self.id),
            notation: ::core::clone::Clone::clone(&self.notation),
            scheme_agency: ::core::clone::Clone::clone(&self.scheme_agency),
            scheme_id: ::core::clone::Clone::clone(&self.scheme_id),
            scheme_name: ::core::clone::Clone::clone(&self.scheme_name),
            scheme_version: ::core::clone::Clone::clone(&self.scheme_version),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Identifier {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "creator",
            "date_issued",
            "dc_type",
            "id",
            "notation",
            "scheme_agency",
            "scheme_id",
            "scheme_name",
            "scheme_version",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.creator,
            &self.date_issued,
            &self.dc_type,
            &self.id,
            &self.notation,
            &self.scheme_agency,
            &self.scheme_id,
            &self.scheme_name,
            &self.scheme_version,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "Identifier",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Identifier {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 10",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "creator" => _serde::__private::Ok(__Field::__field0),
                        "dateIssued" => _serde::__private::Ok(__Field::__field1),
                        "dcType" => _serde::__private::Ok(__Field::__field2),
                        "id" => _serde::__private::Ok(__Field::__field3),
                        "notation" => _serde::__private::Ok(__Field::__field4),
                        "schemeAgency" => _serde::__private::Ok(__Field::__field5),
                        "schemeId" => _serde::__private::Ok(__Field::__field6),
                        "schemeName" => _serde::__private::Ok(__Field::__field7),
                        "schemeVersion" => _serde::__private::Ok(__Field::__field8),
                        "type" => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"creator" => _serde::__private::Ok(__Field::__field0),
                        b"dateIssued" => _serde::__private::Ok(__Field::__field1),
                        b"dcType" => _serde::__private::Ok(__Field::__field2),
                        b"id" => _serde::__private::Ok(__Field::__field3),
                        b"notation" => _serde::__private::Ok(__Field::__field4),
                        b"schemeAgency" => _serde::__private::Ok(__Field::__field5),
                        b"schemeId" => _serde::__private::Ok(__Field::__field6),
                        b"schemeName" => _serde::__private::Ok(__Field::__field7),
                        b"schemeVersion" => _serde::__private::Ok(__Field::__field8),
                        b"type" => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Identifier>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Identifier;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Identifier",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<IriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Literal,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct Identifier with 10 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKV>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        IdentifierTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    9usize,
                                    &"struct Identifier with 10 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Identifier {
                        creator: __field0,
                        date_issued: __field1,
                        dc_type: __field2,
                        id: __field3,
                        notation: __field4,
                        scheme_agency: __field5,
                        scheme_id: __field6,
                        scheme_name: __field7,
                        scheme_version: __field8,
                        type_: __field9,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<IriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Literal> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<LangKV>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<IdentifierTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "creator",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateIssued",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "notation",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Literal>(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "schemeAgency",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKV>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "schemeId",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "schemeName",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "schemeVersion",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        IdentifierTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("notation")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Identifier {
                        creator: __field0,
                        date_issued: __field1,
                        dc_type: __field2,
                        id: __field3,
                        notation: __field4,
                        scheme_agency: __field5,
                        scheme_id: __field6,
                        scheme_name: __field7,
                        scheme_version: __field8,
                        type_: __field9,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "creator",
                "dateIssued",
                "dcType",
                "id",
                "notation",
                "schemeAgency",
                "schemeId",
                "schemeName",
                "schemeVersion",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Identifier",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Identifier>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Identifier {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Identifier",
                false as usize + if Option::is_none(&self.creator) { 0 } else { 1 }
                    + if Option::is_none(&self.date_issued) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.scheme_agency) { 0 } else { 1 }
                    + if Option::is_none(&self.scheme_id) { 0 } else { 1 }
                    + if Option::is_none(&self.scheme_name) { 0 } else { 1 }
                    + if Option::is_none(&self.scheme_version) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.creator) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "creator",
                    &self.creator,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "creator")?;
            }
            if !Option::is_none(&self.date_issued) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateIssued",
                    &self.date_issued,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateIssued",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "notation",
                &self.notation,
            )?;
            if !Option::is_none(&self.scheme_agency) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "schemeAgency",
                    &self.scheme_agency,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "schemeAgency",
                )?;
            }
            if !Option::is_none(&self.scheme_id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "schemeId",
                    &self.scheme_id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "schemeId",
                )?;
            }
            if !Option::is_none(&self.scheme_name) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "schemeName",
                    &self.scheme_name,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "schemeName",
                )?;
            }
            if !Option::is_none(&self.scheme_version) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "schemeVersion",
                    &self.scheme_version,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "schemeVersion",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Identifier {
    pub fn tag() -> IdentifierTag {
        IdentifierTag::default()
    }
}
/// Tag matching the struct name
pub struct IdentifierTag(String);
#[automatically_derived]
impl ::core::clone::Clone for IdentifierTag {
    #[inline]
    fn clone(&self) -> IdentifierTag {
        IdentifierTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for IdentifierTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "IdentifierTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for IdentifierTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "IdentifierTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for IdentifierTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for IdentifierTag {
    fn default() -> Self {
        Self("Identifier".to_string())
    }
}
impl<'de> Deserialize<'de> for IdentifierTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Identifier" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Identifier",
                ),
            )
        } else {
            Ok(IdentifierTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct IndividualDisplay {
    pub display_detail: OneOrMany<DisplayDetail>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub language: Concept,
    #[serde(rename = "type")]
    pub type_: IndividualDisplayTag,
}
#[automatically_derived]
impl ::core::clone::Clone for IndividualDisplay {
    #[inline]
    fn clone(&self) -> IndividualDisplay {
        IndividualDisplay {
            display_detail: ::core::clone::Clone::clone(&self.display_detail),
            id: ::core::clone::Clone::clone(&self.id),
            language: ::core::clone::Clone::clone(&self.language),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for IndividualDisplay {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field4_finish(
            f,
            "IndividualDisplay",
            "display_detail",
            &self.display_detail,
            "id",
            &self.id,
            "language",
            &self.language,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for IndividualDisplay {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 4",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "displayDetail" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "language" => _serde::__private::Ok(__Field::__field2),
                        "type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"displayDetail" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"language" => _serde::__private::Ok(__Field::__field2),
                        b"type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<IndividualDisplay>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = IndividualDisplay;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct IndividualDisplay",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<DisplayDetail>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct IndividualDisplay with 4 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct IndividualDisplay with 4 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        IndividualDisplayTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct IndividualDisplay with 4 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(IndividualDisplay {
                        display_detail: __field0,
                        id: __field1,
                        language: __field2,
                        type_: __field3,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        OneOrMany<DisplayDetail>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<IndividualDisplayTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "displayDetail",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<DisplayDetail>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "language",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        IndividualDisplayTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("displayDetail")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("language")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(IndividualDisplay {
                        display_detail: __field0,
                        id: __field1,
                        language: __field2,
                        type_: __field3,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "displayDetail",
                "id",
                "language",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "IndividualDisplay",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<IndividualDisplay>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for IndividualDisplay {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "IndividualDisplay",
                false as usize + 1 + if Option::is_none(&self.id) { 0 } else { 1 } + 1
                    + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "displayDetail",
                &self.display_detail,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "language",
                &self.language,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl IndividualDisplay {
    pub fn tag() -> IndividualDisplayTag {
        IndividualDisplayTag::default()
    }
}
/// Tag matching the struct name
pub struct IndividualDisplayTag(String);
#[automatically_derived]
impl ::core::clone::Clone for IndividualDisplayTag {
    #[inline]
    fn clone(&self) -> IndividualDisplayTag {
        IndividualDisplayTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for IndividualDisplayTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "IndividualDisplayTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for IndividualDisplayTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "IndividualDisplayTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for IndividualDisplayTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for IndividualDisplayTag {
    fn default() -> Self {
        Self("IndividualDisplay".to_string())
    }
}
impl<'de> Deserialize<'de> for IndividualDisplayTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "IndividualDisplay" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"IndividualDisplay",
                ),
            )
        } else {
            Ok(IndividualDisplayTag(val))
        }
    }
}
pub struct IriType(pub String);
#[automatically_derived]
impl ::core::clone::Clone for IriType {
    #[inline]
    fn clone(&self) -> IriType {
        IriType(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for IriType {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "IriType", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for IriType {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<IriType>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = IriType;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "tuple struct IriType",
                    )
                }
                #[inline]
                fn visit_newtype_struct<__E>(
                    self,
                    __e: __E,
                ) -> _serde::__private::Result<Self::Value, __E::Error>
                where
                    __E: _serde::Deserializer<'de>,
                {
                    let __field0: String = <String as _serde::Deserialize>::deserialize(
                        __e,
                    )?;
                    _serde::__private::Ok(IriType(__field0))
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"tuple struct IriType with 1 element",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(IriType(__field0))
                }
            }
            _serde::Deserializer::deserialize_newtype_struct(
                __deserializer,
                "IriType",
                __Visitor {
                    marker: _serde::__private::PhantomData::<IriType>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[automatically_derived]
impl ::core::cmp::Eq for IriType {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<String>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for IriType {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for IriType {
    #[inline]
    fn cmp(&self, other: &IriType) -> ::core::cmp::Ordering {
        ::core::cmp::Ord::cmp(&self.0, &other.0)
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for IriType {}
#[automatically_derived]
impl ::core::cmp::PartialEq for IriType {
    #[inline]
    fn eq(&self, other: &IriType) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for IriType {
    #[inline]
    fn partial_cmp(
        &self,
        other: &IriType,
    ) -> ::core::option::Option<::core::cmp::Ordering> {
        ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for IriType {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "IriType",
                &self.0,
            )
        }
    }
};
impl std::ops::Deref for IriType {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct IssuerNode {
    pub eidas_legal_identifier: LegalIdentifier,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(rename = "type")]
    pub type_: IssuerNodeTag,
}
#[automatically_derived]
impl ::core::clone::Clone for IssuerNode {
    #[inline]
    fn clone(&self) -> IssuerNode {
        IssuerNode {
            eidas_legal_identifier: ::core::clone::Clone::clone(
                &self.eidas_legal_identifier,
            ),
            id: ::core::clone::Clone::clone(&self.id),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for IssuerNode {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field3_finish(
            f,
            "IssuerNode",
            "eidas_legal_identifier",
            &self.eidas_legal_identifier,
            "id",
            &self.id,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for IssuerNode {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 3",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "eidasLegalIdentifier" => {
                            _serde::__private::Ok(__Field::__field0)
                        }
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "type" => _serde::__private::Ok(__Field::__field2),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"eidasLegalIdentifier" => {
                            _serde::__private::Ok(__Field::__field0)
                        }
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"type" => _serde::__private::Ok(__Field::__field2),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<IssuerNode>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = IssuerNode;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct IssuerNode",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        LegalIdentifier,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct IssuerNode with 3 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        IssuerNodeTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct IssuerNode with 3 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(IssuerNode {
                        eidas_legal_identifier: __field0,
                        id: __field1,
                        type_: __field2,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<LegalIdentifier> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<IssuerNodeTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "eidasLegalIdentifier",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LegalIdentifier,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        IssuerNodeTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("eidasLegalIdentifier")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(IssuerNode {
                        eidas_legal_identifier: __field0,
                        id: __field1,
                        type_: __field2,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "eidasLegalIdentifier",
                "id",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "IssuerNode",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<IssuerNode>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for IssuerNode {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "IssuerNode",
                false as usize + 1 + if Option::is_none(&self.id) { 0 } else { 1 } + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "eidasLegalIdentifier",
                &self.eidas_legal_identifier,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl IssuerNode {
    pub fn tag() -> IssuerNodeTag {
        IssuerNodeTag::default()
    }
}
/// Tag matching the struct name
pub struct IssuerNodeTag(String);
#[automatically_derived]
impl ::core::clone::Clone for IssuerNodeTag {
    #[inline]
    fn clone(&self) -> IssuerNodeTag {
        IssuerNodeTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for IssuerNodeTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "IssuerNodeTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for IssuerNodeTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "IssuerNodeTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for IssuerNodeTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for IssuerNodeTag {
    fn default() -> Self {
        Self("IssuerNode".to_string())
    }
}
impl<'de> Deserialize<'de> for IssuerNodeTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "IssuerNode" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"IssuerNode",
                ),
            )
        } else {
            Ok(IssuerNodeTag(val))
        }
    }
}
pub struct LangKV(pub serde_json::Map<String, serde_json::Value>);
#[automatically_derived]
impl ::core::clone::Clone for LangKV {
    #[inline]
    fn clone(&self) -> LangKV {
        LangKV(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LangKV {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "LangKV", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LangKV {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(__serializer, "LangKV", &self.0)
        }
    }
};
impl LangKV {
    pub fn new(kv_pair: serde_json::Map<String, serde_json::Value>) -> Option<Self> {
        if 1 == kv_pair.len() { Some(Self(kv_pair)) } else { None }
    }
}
impl std::ops::Deref for LangKV {
    type Target = serde_json::Map<String, serde_json::Value>;
    fn deref(&self) -> &serde_json::Map<String, serde_json::Value> {
        &self.0
    }
}
impl<'de> Deserialize<'de> for LangKV {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: de::Deserializer<'de>,
    {
        let map = serde_json::Map::deserialize(deserializer)?;
        if let Some(kv_pair) = LangKV::new(map) {
            Ok(kv_pair)
        } else {
            Err(<D::Error as de::Error>::missing_field("Requires 1 lang key value pair"))
        }
    }
}
#[serde(untagged)]
pub enum LearningAchievementSpecificationOrQualification {
    LearningAchievementSpecification(Box<LearningAchievementSpecification>),
    Qualification(Box<Qualification>),
}
#[automatically_derived]
impl ::core::clone::Clone for LearningAchievementSpecificationOrQualification {
    #[inline]
    fn clone(&self) -> LearningAchievementSpecificationOrQualification {
        match self {
            LearningAchievementSpecificationOrQualification::LearningAchievementSpecification(
                __self_0,
            ) => {
                LearningAchievementSpecificationOrQualification::LearningAchievementSpecification(
                    ::core::clone::Clone::clone(__self_0),
                )
            }
            LearningAchievementSpecificationOrQualification::Qualification(__self_0) => {
                LearningAchievementSpecificationOrQualification::Qualification(
                    ::core::clone::Clone::clone(__self_0),
                )
            }
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAchievementSpecificationOrQualification {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            LearningAchievementSpecificationOrQualification::LearningAchievementSpecification(
                __self_0,
            ) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "LearningAchievementSpecification",
                    &__self_0,
                )
            }
            LearningAchievementSpecificationOrQualification::Qualification(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "Qualification",
                    &__self_0,
                )
            }
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAchievementSpecificationOrQualification {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                LearningAchievementSpecificationOrQualification::LearningAchievementSpecification(
                    ref __field0,
                ) => _serde::Serialize::serialize(__field0, __serializer),
                LearningAchievementSpecificationOrQualification::Qualification(
                    ref __field0,
                ) => _serde::Serialize::serialize(__field0, __serializer),
            }
        }
    }
};
impl<'de> ::serde::Deserialize<'de> for LearningAchievementSpecificationOrQualification {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        let serde_value = serde_json::Value::deserialize(deserializer)?;
        let tag = serde_value
            .get("type")
            .map(|t| t.as_str().map(|s| s.to_string()))
            .ok_or(::serde::de::Error::missing_field("type"))?;
        if let Some(tag) = tag {
            if (&tag == "LearningAchievementSpecification") {
                return Ok(
                    Self::LearningAchievementSpecification(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            if (&tag == "Qualification") {
                return Ok(
                    Self::Qualification(
                        serde_json::from_value(serde_value)
                            .map_err(::serde::de::Error::custom)?,
                    ),
                );
            }
            Err(
                ::serde::de::Error::unknown_variant(
                    &tag,
                    &["LearningAchievementSpecification", "Qualification"],
                ),
            )
        } else {
            Err(::serde::de::Error::missing_field("type"))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningAchievementSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alt_label: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub awarding_opportunity: Option<OneOrMany<AwardingOpportunity>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credit_point: Option<OneOrMany<CreditPoint>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub education_level: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub education_subject: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entitles_to: Option<OneOrMany<LearningEntitlementSpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entry_requirement: Option<Note>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generalisation_of: Option<
        OneOrMany<LearningAchievementSpecificationOrQualification>,
    >,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<OneOrMany<LearningAchievementSpecificationOrQualification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<IdentifierOrLegalIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub influenced_by: Option<Box<OneOrMany<LearningActivitySpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<OneOrMany<LearningAchievementSpecificationOrQualification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_outcome: Option<OneOrMany<LearningOutcome>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_outcome_summary: Option<Note>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_setting: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maximum_duration: Option<DurationType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proven_by: Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub specialisation_of: Option<
        OneOrMany<LearningAchievementSpecificationOrQualification>,
    >,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_group: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub thematic_area: Option<OneOrMany<Concept>>,
    pub title: LangKVPairs,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume_of_learning: Option<DurationType>,
    #[serde(rename = "type")]
    pub type_: LearningAchievementSpecificationTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningAchievementSpecification {
    #[inline]
    fn clone(&self) -> LearningAchievementSpecification {
        LearningAchievementSpecification {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            alt_label: ::core::clone::Clone::clone(&self.alt_label),
            awarding_opportunity: ::core::clone::Clone::clone(
                &self.awarding_opportunity,
            ),
            category: ::core::clone::Clone::clone(&self.category),
            credit_point: ::core::clone::Clone::clone(&self.credit_point),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            education_level: ::core::clone::Clone::clone(&self.education_level),
            education_subject: ::core::clone::Clone::clone(&self.education_subject),
            entitles_to: ::core::clone::Clone::clone(&self.entitles_to),
            entry_requirement: ::core::clone::Clone::clone(&self.entry_requirement),
            generalisation_of: ::core::clone::Clone::clone(&self.generalisation_of),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            homepage: ::core::clone::Clone::clone(&self.homepage),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            influenced_by: ::core::clone::Clone::clone(&self.influenced_by),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            language: ::core::clone::Clone::clone(&self.language),
            learning_outcome: ::core::clone::Clone::clone(&self.learning_outcome),
            learning_outcome_summary: ::core::clone::Clone::clone(
                &self.learning_outcome_summary,
            ),
            learning_setting: ::core::clone::Clone::clone(&self.learning_setting),
            maximum_duration: ::core::clone::Clone::clone(&self.maximum_duration),
            mode: ::core::clone::Clone::clone(&self.mode),
            proven_by: ::core::clone::Clone::clone(&self.proven_by),
            specialisation_of: ::core::clone::Clone::clone(&self.specialisation_of),
            status: ::core::clone::Clone::clone(&self.status),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            target_group: ::core::clone::Clone::clone(&self.target_group),
            thematic_area: ::core::clone::Clone::clone(&self.thematic_area),
            title: ::core::clone::Clone::clone(&self.title),
            volume_of_learning: ::core::clone::Clone::clone(&self.volume_of_learning),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAchievementSpecification {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "alt_label",
            "awarding_opportunity",
            "category",
            "credit_point",
            "date_modified",
            "dc_type",
            "description",
            "education_level",
            "education_subject",
            "entitles_to",
            "entry_requirement",
            "generalisation_of",
            "has_part",
            "homepage",
            "id",
            "identifier",
            "influenced_by",
            "is_part_of",
            "language",
            "learning_outcome",
            "learning_outcome_summary",
            "learning_setting",
            "maximum_duration",
            "mode",
            "proven_by",
            "specialisation_of",
            "status",
            "supplementary_document",
            "target_group",
            "thematic_area",
            "title",
            "volume_of_learning",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.alt_label,
            &self.awarding_opportunity,
            &self.category,
            &self.credit_point,
            &self.date_modified,
            &self.dc_type,
            &self.description,
            &self.education_level,
            &self.education_subject,
            &self.entitles_to,
            &self.entry_requirement,
            &self.generalisation_of,
            &self.has_part,
            &self.homepage,
            &self.id,
            &self.identifier,
            &self.influenced_by,
            &self.is_part_of,
            &self.language,
            &self.learning_outcome,
            &self.learning_outcome_summary,
            &self.learning_setting,
            &self.maximum_duration,
            &self.mode,
            &self.proven_by,
            &self.specialisation_of,
            &self.status,
            &self.supplementary_document,
            &self.target_group,
            &self.thematic_area,
            &self.title,
            &self.volume_of_learning,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningAchievementSpecification",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningAchievementSpecification {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
                __field21,
                __field22,
                __field23,
                __field24,
                __field25,
                __field26,
                __field27,
                __field28,
                __field29,
                __field30,
                __field31,
                __field32,
                __field33,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        21u64 => _serde::__private::Ok(__Field::__field21),
                        22u64 => _serde::__private::Ok(__Field::__field22),
                        23u64 => _serde::__private::Ok(__Field::__field23),
                        24u64 => _serde::__private::Ok(__Field::__field24),
                        25u64 => _serde::__private::Ok(__Field::__field25),
                        26u64 => _serde::__private::Ok(__Field::__field26),
                        27u64 => _serde::__private::Ok(__Field::__field27),
                        28u64 => _serde::__private::Ok(__Field::__field28),
                        29u64 => _serde::__private::Ok(__Field::__field29),
                        30u64 => _serde::__private::Ok(__Field::__field30),
                        31u64 => _serde::__private::Ok(__Field::__field31),
                        32u64 => _serde::__private::Ok(__Field::__field32),
                        33u64 => _serde::__private::Ok(__Field::__field33),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 34",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "altLabel" => _serde::__private::Ok(__Field::__field1),
                        "awardingOpportunity" => _serde::__private::Ok(__Field::__field2),
                        "category" => _serde::__private::Ok(__Field::__field3),
                        "creditPoint" => _serde::__private::Ok(__Field::__field4),
                        "dateModified" => _serde::__private::Ok(__Field::__field5),
                        "dcType" => _serde::__private::Ok(__Field::__field6),
                        "description" => _serde::__private::Ok(__Field::__field7),
                        "educationLevel" => _serde::__private::Ok(__Field::__field8),
                        "educationSubject" => _serde::__private::Ok(__Field::__field9),
                        "entitlesTo" => _serde::__private::Ok(__Field::__field10),
                        "entryRequirement" => _serde::__private::Ok(__Field::__field11),
                        "generalisationOf" => _serde::__private::Ok(__Field::__field12),
                        "hasPart" => _serde::__private::Ok(__Field::__field13),
                        "homepage" => _serde::__private::Ok(__Field::__field14),
                        "id" => _serde::__private::Ok(__Field::__field15),
                        "identifier" => _serde::__private::Ok(__Field::__field16),
                        "influencedBy" => _serde::__private::Ok(__Field::__field17),
                        "isPartOf" => _serde::__private::Ok(__Field::__field18),
                        "language" => _serde::__private::Ok(__Field::__field19),
                        "learningOutcome" => _serde::__private::Ok(__Field::__field20),
                        "learningOutcomeSummary" => {
                            _serde::__private::Ok(__Field::__field21)
                        }
                        "learningSetting" => _serde::__private::Ok(__Field::__field22),
                        "maximumDuration" => _serde::__private::Ok(__Field::__field23),
                        "mode" => _serde::__private::Ok(__Field::__field24),
                        "provenBy" => _serde::__private::Ok(__Field::__field25),
                        "specialisationOf" => _serde::__private::Ok(__Field::__field26),
                        "status" => _serde::__private::Ok(__Field::__field27),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field28)
                        }
                        "targetGroup" => _serde::__private::Ok(__Field::__field29),
                        "thematicArea" => _serde::__private::Ok(__Field::__field30),
                        "title" => _serde::__private::Ok(__Field::__field31),
                        "volumeOfLearning" => _serde::__private::Ok(__Field::__field32),
                        "type" => _serde::__private::Ok(__Field::__field33),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"altLabel" => _serde::__private::Ok(__Field::__field1),
                        b"awardingOpportunity" => {
                            _serde::__private::Ok(__Field::__field2)
                        }
                        b"category" => _serde::__private::Ok(__Field::__field3),
                        b"creditPoint" => _serde::__private::Ok(__Field::__field4),
                        b"dateModified" => _serde::__private::Ok(__Field::__field5),
                        b"dcType" => _serde::__private::Ok(__Field::__field6),
                        b"description" => _serde::__private::Ok(__Field::__field7),
                        b"educationLevel" => _serde::__private::Ok(__Field::__field8),
                        b"educationSubject" => _serde::__private::Ok(__Field::__field9),
                        b"entitlesTo" => _serde::__private::Ok(__Field::__field10),
                        b"entryRequirement" => _serde::__private::Ok(__Field::__field11),
                        b"generalisationOf" => _serde::__private::Ok(__Field::__field12),
                        b"hasPart" => _serde::__private::Ok(__Field::__field13),
                        b"homepage" => _serde::__private::Ok(__Field::__field14),
                        b"id" => _serde::__private::Ok(__Field::__field15),
                        b"identifier" => _serde::__private::Ok(__Field::__field16),
                        b"influencedBy" => _serde::__private::Ok(__Field::__field17),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field18),
                        b"language" => _serde::__private::Ok(__Field::__field19),
                        b"learningOutcome" => _serde::__private::Ok(__Field::__field20),
                        b"learningOutcomeSummary" => {
                            _serde::__private::Ok(__Field::__field21)
                        }
                        b"learningSetting" => _serde::__private::Ok(__Field::__field22),
                        b"maximumDuration" => _serde::__private::Ok(__Field::__field23),
                        b"mode" => _serde::__private::Ok(__Field::__field24),
                        b"provenBy" => _serde::__private::Ok(__Field::__field25),
                        b"specialisationOf" => _serde::__private::Ok(__Field::__field26),
                        b"status" => _serde::__private::Ok(__Field::__field27),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field28)
                        }
                        b"targetGroup" => _serde::__private::Ok(__Field::__field29),
                        b"thematicArea" => _serde::__private::Ok(__Field::__field30),
                        b"title" => _serde::__private::Ok(__Field::__field31),
                        b"volumeOfLearning" => _serde::__private::Ok(__Field::__field32),
                        b"type" => _serde::__private::Ok(__Field::__field33),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningAchievementSpecification>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningAchievementSpecification;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningAchievementSpecification",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<AwardingOpportunity>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<CreditPoint>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningEntitlementSpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<Note>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<IdentifierOrLegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningActivitySpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningOutcome>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match _serde::de::SeqAccess::next_element::<
                        Option<Note>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field22 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field23 = match _serde::de::SeqAccess::next_element::<
                        Option<DurationType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field24 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field25 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field26 = match _serde::de::SeqAccess::next_element::<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field27 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field28 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field29 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field30 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field31 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    31usize,
                                    &"struct LearningAchievementSpecification with 34 elements",
                                ),
                            );
                        }
                    };
                    let __field32 = match _serde::de::SeqAccess::next_element::<
                        Option<DurationType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field33 = match _serde::de::SeqAccess::next_element::<
                        LearningAchievementSpecificationTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    33usize,
                                    &"struct LearningAchievementSpecification with 34 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningAchievementSpecification {
                        additional_note: __field0,
                        alt_label: __field1,
                        awarding_opportunity: __field2,
                        category: __field3,
                        credit_point: __field4,
                        date_modified: __field5,
                        dc_type: __field6,
                        description: __field7,
                        education_level: __field8,
                        education_subject: __field9,
                        entitles_to: __field10,
                        entry_requirement: __field11,
                        generalisation_of: __field12,
                        has_part: __field13,
                        homepage: __field14,
                        id: __field15,
                        identifier: __field16,
                        influenced_by: __field17,
                        is_part_of: __field18,
                        language: __field19,
                        learning_outcome: __field20,
                        learning_outcome_summary: __field21,
                        learning_setting: __field22,
                        maximum_duration: __field23,
                        mode: __field24,
                        proven_by: __field25,
                        specialisation_of: __field26,
                        status: __field27,
                        supplementary_document: __field28,
                        target_group: __field29,
                        thematic_area: __field30,
                        title: __field31,
                        volume_of_learning: __field32,
                        type_: __field33,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<AwardingOpportunity>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<CreditPoint>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<OneOrMany<LearningEntitlementSpecification>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<Option<Note>> = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    > = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<IdentifierOrLegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningActivitySpecification>>>,
                    > = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    > = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<
                        Option<OneOrMany<LearningOutcome>>,
                    > = _serde::__private::None;
                    let mut __field21: _serde::__private::Option<Option<Note>> = _serde::__private::None;
                    let mut __field22: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field23: _serde::__private::Option<Option<DurationType>> = _serde::__private::None;
                    let mut __field24: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field25: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field26: _serde::__private::Option<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    > = _serde::__private::None;
                    let mut __field27: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field28: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field29: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field30: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field31: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field32: _serde::__private::Option<Option<DurationType>> = _serde::__private::None;
                    let mut __field33: _serde::__private::Option<
                        LearningAchievementSpecificationTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "altLabel",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardingOpportunity",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<AwardingOpportunity>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "category",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "creditPoint",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<CreditPoint>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "educationLevel",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "educationSubject",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "entitlesTo",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningEntitlementSpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "entryRequirement",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Note>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "generalisationOf",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<
                                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                                        >,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<
                                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                                        >,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "homepage",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IdentifierOrLegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "influencedBy",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningActivitySpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<
                                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                                        >,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "language",
                                        ),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningOutcome",
                                        ),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningOutcome>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field21 => {
                                if _serde::__private::Option::is_some(&__field21) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningOutcomeSummary",
                                        ),
                                    );
                                }
                                __field21 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Note>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field22 => {
                                if _serde::__private::Option::is_some(&__field22) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningSetting",
                                        ),
                                    );
                                }
                                __field22 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field23 => {
                                if _serde::__private::Option::is_some(&__field23) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "maximumDuration",
                                        ),
                                    );
                                }
                                __field23 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DurationType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field24 => {
                                if _serde::__private::Option::is_some(&__field24) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("mode"),
                                    );
                                }
                                __field24 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field25 => {
                                if _serde::__private::Option::is_some(&__field25) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "provenBy",
                                        ),
                                    );
                                }
                                __field25 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field26 => {
                                if _serde::__private::Option::is_some(&__field26) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specialisationOf",
                                        ),
                                    );
                                }
                                __field26 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<
                                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                                        >,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field27 => {
                                if _serde::__private::Option::is_some(&__field27) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                    );
                                }
                                __field27 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field28 => {
                                if _serde::__private::Option::is_some(&__field28) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field28 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field29 => {
                                if _serde::__private::Option::is_some(&__field29) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "targetGroup",
                                        ),
                                    );
                                }
                                __field29 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field30 => {
                                if _serde::__private::Option::is_some(&__field30) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "thematicArea",
                                        ),
                                    );
                                }
                                __field30 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field31 => {
                                if _serde::__private::Option::is_some(&__field31) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field31 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field32 => {
                                if _serde::__private::Option::is_some(&__field32) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "volumeOfLearning",
                                        ),
                                    );
                                }
                                __field32 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DurationType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field33 => {
                                if _serde::__private::Option::is_some(&__field33) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field33 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningAchievementSpecificationTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match __field21 {
                        _serde::__private::Some(__field21) => __field21,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field22 = match __field22 {
                        _serde::__private::Some(__field22) => __field22,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field23 = match __field23 {
                        _serde::__private::Some(__field23) => __field23,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field24 = match __field24 {
                        _serde::__private::Some(__field24) => __field24,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field25 = match __field25 {
                        _serde::__private::Some(__field25) => __field25,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field26 = match __field26 {
                        _serde::__private::Some(__field26) => __field26,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field27 = match __field27 {
                        _serde::__private::Some(__field27) => __field27,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field28 = match __field28 {
                        _serde::__private::Some(__field28) => __field28,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field29 = match __field29 {
                        _serde::__private::Some(__field29) => __field29,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field30 = match __field30 {
                        _serde::__private::Some(__field30) => __field30,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field31 = match __field31 {
                        _serde::__private::Some(__field31) => __field31,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field32 = match __field32 {
                        _serde::__private::Some(__field32) => __field32,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field33 = match __field33 {
                        _serde::__private::Some(__field33) => __field33,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningAchievementSpecification {
                        additional_note: __field0,
                        alt_label: __field1,
                        awarding_opportunity: __field2,
                        category: __field3,
                        credit_point: __field4,
                        date_modified: __field5,
                        dc_type: __field6,
                        description: __field7,
                        education_level: __field8,
                        education_subject: __field9,
                        entitles_to: __field10,
                        entry_requirement: __field11,
                        generalisation_of: __field12,
                        has_part: __field13,
                        homepage: __field14,
                        id: __field15,
                        identifier: __field16,
                        influenced_by: __field17,
                        is_part_of: __field18,
                        language: __field19,
                        learning_outcome: __field20,
                        learning_outcome_summary: __field21,
                        learning_setting: __field22,
                        maximum_duration: __field23,
                        mode: __field24,
                        proven_by: __field25,
                        specialisation_of: __field26,
                        status: __field27,
                        supplementary_document: __field28,
                        target_group: __field29,
                        thematic_area: __field30,
                        title: __field31,
                        volume_of_learning: __field32,
                        type_: __field33,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "altLabel",
                "awardingOpportunity",
                "category",
                "creditPoint",
                "dateModified",
                "dcType",
                "description",
                "educationLevel",
                "educationSubject",
                "entitlesTo",
                "entryRequirement",
                "generalisationOf",
                "hasPart",
                "homepage",
                "id",
                "identifier",
                "influencedBy",
                "isPartOf",
                "language",
                "learningOutcome",
                "learningOutcomeSummary",
                "learningSetting",
                "maximumDuration",
                "mode",
                "provenBy",
                "specialisationOf",
                "status",
                "supplementaryDocument",
                "targetGroup",
                "thematicArea",
                "title",
                "volumeOfLearning",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningAchievementSpecification",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<
                        LearningAchievementSpecification,
                    >,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAchievementSpecification {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningAchievementSpecification",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.alt_label) { 0 } else { 1 }
                    + if Option::is_none(&self.awarding_opportunity) { 0 } else { 1 }
                    + if Option::is_none(&self.category) { 0 } else { 1 }
                    + if Option::is_none(&self.credit_point) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.education_level) { 0 } else { 1 }
                    + if Option::is_none(&self.education_subject) { 0 } else { 1 }
                    + if Option::is_none(&self.entitles_to) { 0 } else { 1 }
                    + if Option::is_none(&self.entry_requirement) { 0 } else { 1 }
                    + if Option::is_none(&self.generalisation_of) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.homepage) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.influenced_by) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.language) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_outcome) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_outcome_summary) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_setting) { 0 } else { 1 }
                    + if Option::is_none(&self.maximum_duration) { 0 } else { 1 }
                    + if Option::is_none(&self.mode) { 0 } else { 1 }
                    + if Option::is_none(&self.proven_by) { 0 } else { 1 }
                    + if Option::is_none(&self.specialisation_of) { 0 } else { 1 }
                    + if Option::is_none(&self.status) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + if Option::is_none(&self.target_group) { 0 } else { 1 }
                    + if Option::is_none(&self.thematic_area) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.volume_of_learning) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.alt_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "altLabel",
                    &self.alt_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "altLabel",
                )?;
            }
            if !Option::is_none(&self.awarding_opportunity) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "awardingOpportunity",
                    &self.awarding_opportunity,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "awardingOpportunity",
                )?;
            }
            if !Option::is_none(&self.category) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "category",
                    &self.category,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "category",
                )?;
            }
            if !Option::is_none(&self.credit_point) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "creditPoint",
                    &self.credit_point,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "creditPoint",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.education_level) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "educationLevel",
                    &self.education_level,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "educationLevel",
                )?;
            }
            if !Option::is_none(&self.education_subject) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "educationSubject",
                    &self.education_subject,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "educationSubject",
                )?;
            }
            if !Option::is_none(&self.entitles_to) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "entitlesTo",
                    &self.entitles_to,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "entitlesTo",
                )?;
            }
            if !Option::is_none(&self.entry_requirement) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "entryRequirement",
                    &self.entry_requirement,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "entryRequirement",
                )?;
            }
            if !Option::is_none(&self.generalisation_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "generalisationOf",
                    &self.generalisation_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "generalisationOf",
                )?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.homepage) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "homepage",
                    &self.homepage,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "homepage",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.influenced_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "influencedBy",
                    &self.influenced_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "influencedBy",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.language) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "language",
                    &self.language,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "language",
                )?;
            }
            if !Option::is_none(&self.learning_outcome) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningOutcome",
                    &self.learning_outcome,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningOutcome",
                )?;
            }
            if !Option::is_none(&self.learning_outcome_summary) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningOutcomeSummary",
                    &self.learning_outcome_summary,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningOutcomeSummary",
                )?;
            }
            if !Option::is_none(&self.learning_setting) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningSetting",
                    &self.learning_setting,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningSetting",
                )?;
            }
            if !Option::is_none(&self.maximum_duration) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "maximumDuration",
                    &self.maximum_duration,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "maximumDuration",
                )?;
            }
            if !Option::is_none(&self.mode) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "mode",
                    &self.mode,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "mode")?;
            }
            if !Option::is_none(&self.proven_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "provenBy",
                    &self.proven_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "provenBy",
                )?;
            }
            if !Option::is_none(&self.specialisation_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "specialisationOf",
                    &self.specialisation_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "specialisationOf",
                )?;
            }
            if !Option::is_none(&self.status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "status")?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            if !Option::is_none(&self.target_group) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "targetGroup",
                    &self.target_group,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "targetGroup",
                )?;
            }
            if !Option::is_none(&self.thematic_area) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "thematicArea",
                    &self.thematic_area,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "thematicArea",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            if !Option::is_none(&self.volume_of_learning) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "volumeOfLearning",
                    &self.volume_of_learning,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "volumeOfLearning",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningAchievementSpecification {
    pub fn tag() -> LearningAchievementSpecificationTag {
        LearningAchievementSpecificationTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningAchievementSpecificationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningAchievementSpecificationTag {
    #[inline]
    fn clone(&self) -> LearningAchievementSpecificationTag {
        LearningAchievementSpecificationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAchievementSpecificationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningAchievementSpecificationTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAchievementSpecificationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningAchievementSpecificationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningAchievementSpecificationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningAchievementSpecificationTag {
    fn default() -> Self {
        Self("LearningAchievementSpecification".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningAchievementSpecificationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningAchievementSpecification" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningAchievementSpecification",
                ),
            )
        } else {
            Ok(LearningAchievementSpecificationTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningAchievement {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    pub awarded_by: Box<AwardingProcess>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credit_received: Option<OneOrMany<CreditPoint>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entitles_to: Option<OneOrMany<LearningEntitlement>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<Box<OneOrMany<LearningAchievement>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<IdentifierOrLegalIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub influenced_by: Option<OneOrMany<LearningActivity>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<Box<OneOrMany<LearningAchievement>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_opportunity: Option<LearningOpportunity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proven_by: Option<Box<OneOrMany<LearningAssessment>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub specified_by: Option<LearningAchievementSpecificationOrQualification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: LearningAchievementTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningAchievement {
    #[inline]
    fn clone(&self) -> LearningAchievement {
        LearningAchievement {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            awarded_by: ::core::clone::Clone::clone(&self.awarded_by),
            credit_received: ::core::clone::Clone::clone(&self.credit_received),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            entitles_to: ::core::clone::Clone::clone(&self.entitles_to),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            influenced_by: ::core::clone::Clone::clone(&self.influenced_by),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            learning_opportunity: ::core::clone::Clone::clone(
                &self.learning_opportunity,
            ),
            proven_by: ::core::clone::Clone::clone(&self.proven_by),
            specified_by: ::core::clone::Clone::clone(&self.specified_by),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAchievement {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "awarded_by",
            "credit_received",
            "dc_type",
            "description",
            "entitles_to",
            "has_part",
            "id",
            "identifier",
            "influenced_by",
            "is_part_of",
            "learning_opportunity",
            "proven_by",
            "specified_by",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.awarded_by,
            &self.credit_received,
            &self.dc_type,
            &self.description,
            &self.entitles_to,
            &self.has_part,
            &self.id,
            &self.identifier,
            &self.influenced_by,
            &self.is_part_of,
            &self.learning_opportunity,
            &self.proven_by,
            &self.specified_by,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningAchievement",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningAchievement {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 17",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "awardedBy" => _serde::__private::Ok(__Field::__field1),
                        "creditReceived" => _serde::__private::Ok(__Field::__field2),
                        "dcType" => _serde::__private::Ok(__Field::__field3),
                        "description" => _serde::__private::Ok(__Field::__field4),
                        "entitlesTo" => _serde::__private::Ok(__Field::__field5),
                        "hasPart" => _serde::__private::Ok(__Field::__field6),
                        "id" => _serde::__private::Ok(__Field::__field7),
                        "identifier" => _serde::__private::Ok(__Field::__field8),
                        "influencedBy" => _serde::__private::Ok(__Field::__field9),
                        "isPartOf" => _serde::__private::Ok(__Field::__field10),
                        "learningOpportunity" => {
                            _serde::__private::Ok(__Field::__field11)
                        }
                        "provenBy" => _serde::__private::Ok(__Field::__field12),
                        "specifiedBy" => _serde::__private::Ok(__Field::__field13),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field14)
                        }
                        "title" => _serde::__private::Ok(__Field::__field15),
                        "type" => _serde::__private::Ok(__Field::__field16),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"awardedBy" => _serde::__private::Ok(__Field::__field1),
                        b"creditReceived" => _serde::__private::Ok(__Field::__field2),
                        b"dcType" => _serde::__private::Ok(__Field::__field3),
                        b"description" => _serde::__private::Ok(__Field::__field4),
                        b"entitlesTo" => _serde::__private::Ok(__Field::__field5),
                        b"hasPart" => _serde::__private::Ok(__Field::__field6),
                        b"id" => _serde::__private::Ok(__Field::__field7),
                        b"identifier" => _serde::__private::Ok(__Field::__field8),
                        b"influencedBy" => _serde::__private::Ok(__Field::__field9),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field10),
                        b"learningOpportunity" => {
                            _serde::__private::Ok(__Field::__field11)
                        }
                        b"provenBy" => _serde::__private::Ok(__Field::__field12),
                        b"specifiedBy" => _serde::__private::Ok(__Field::__field13),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field14)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field15),
                        b"type" => _serde::__private::Ok(__Field::__field16),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningAchievement>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningAchievement;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningAchievement",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Box<AwardingProcess>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct LearningAchievement with 17 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<CreditPoint>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningEntitlement>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAchievement>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<IdentifierOrLegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningActivity>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAchievement>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<LearningOpportunity>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessment>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<LearningAchievementSpecificationOrQualification>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    15usize,
                                    &"struct LearningAchievement with 17 elements",
                                ),
                            );
                        }
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        LearningAchievementTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    16usize,
                                    &"struct LearningAchievement with 17 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningAchievement {
                        additional_note: __field0,
                        awarded_by: __field1,
                        credit_received: __field2,
                        dc_type: __field3,
                        description: __field4,
                        entitles_to: __field5,
                        has_part: __field6,
                        id: __field7,
                        identifier: __field8,
                        influenced_by: __field9,
                        is_part_of: __field10,
                        learning_opportunity: __field11,
                        proven_by: __field12,
                        specified_by: __field13,
                        supplementary_document: __field14,
                        title: __field15,
                        type_: __field16,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Box<AwardingProcess>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<CreditPoint>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<OneOrMany<LearningEntitlement>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAchievement>>>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<IdentifierOrLegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<LearningActivity>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAchievement>>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<LearningOpportunity>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessment>>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<
                        Option<LearningAchievementSpecificationOrQualification>,
                    > = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        LearningAchievementTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardedBy",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Box<AwardingProcess>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "creditReceived",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<CreditPoint>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "entitlesTo",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningEntitlement>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAchievement>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IdentifierOrLegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "influencedBy",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningActivity>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAchievement>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningOpportunity",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LearningOpportunity>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "provenBy",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessment>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specifiedBy",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LearningAchievementSpecificationOrQualification>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningAchievementTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("awardedBy")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningAchievement {
                        additional_note: __field0,
                        awarded_by: __field1,
                        credit_received: __field2,
                        dc_type: __field3,
                        description: __field4,
                        entitles_to: __field5,
                        has_part: __field6,
                        id: __field7,
                        identifier: __field8,
                        influenced_by: __field9,
                        is_part_of: __field10,
                        learning_opportunity: __field11,
                        proven_by: __field12,
                        specified_by: __field13,
                        supplementary_document: __field14,
                        title: __field15,
                        type_: __field16,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "awardedBy",
                "creditReceived",
                "dcType",
                "description",
                "entitlesTo",
                "hasPart",
                "id",
                "identifier",
                "influencedBy",
                "isPartOf",
                "learningOpportunity",
                "provenBy",
                "specifiedBy",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningAchievement",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<LearningAchievement>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAchievement {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningAchievement",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.credit_received) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.entitles_to) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.influenced_by) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_opportunity) { 0 } else { 1 }
                    + if Option::is_none(&self.proven_by) { 0 } else { 1 }
                    + if Option::is_none(&self.specified_by) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "awardedBy",
                &self.awarded_by,
            )?;
            if !Option::is_none(&self.credit_received) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "creditReceived",
                    &self.credit_received,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "creditReceived",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.entitles_to) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "entitlesTo",
                    &self.entitles_to,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "entitlesTo",
                )?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.influenced_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "influencedBy",
                    &self.influenced_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "influencedBy",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.learning_opportunity) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningOpportunity",
                    &self.learning_opportunity,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningOpportunity",
                )?;
            }
            if !Option::is_none(&self.proven_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "provenBy",
                    &self.proven_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "provenBy",
                )?;
            }
            if !Option::is_none(&self.specified_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "specifiedBy",
                    &self.specified_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "specifiedBy",
                )?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningAchievement {
    pub fn tag() -> LearningAchievementTag {
        LearningAchievementTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningAchievementTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningAchievementTag {
    #[inline]
    fn clone(&self) -> LearningAchievementTag {
        LearningAchievementTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAchievementTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningAchievementTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAchievementTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningAchievementTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningAchievementTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningAchievementTag {
    fn default() -> Self {
        Self("LearningAchievement".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningAchievementTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningAchievement" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningAchievement",
                ),
            )
        } else {
            Ok(LearningAchievementTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningActivitySpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alt_label: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contact_hour: Option<OneOrMany<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generalisation_of: Option<OneOrMany<LearningActivitySpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<OneOrMany<LearningActivitySpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub influences: Option<OneOrMany<LearningAchievementSpecificationOrQualification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<OneOrMany<LearningActivitySpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub specialisation_of: Option<OneOrMany<LearningActivitySpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume_of_learning: Option<DurationType>,
    #[serde(rename = "type")]
    pub type_: LearningActivitySpecificationTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningActivitySpecification {
    #[inline]
    fn clone(&self) -> LearningActivitySpecification {
        LearningActivitySpecification {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            alt_label: ::core::clone::Clone::clone(&self.alt_label),
            category: ::core::clone::Clone::clone(&self.category),
            contact_hour: ::core::clone::Clone::clone(&self.contact_hour),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            generalisation_of: ::core::clone::Clone::clone(&self.generalisation_of),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            homepage: ::core::clone::Clone::clone(&self.homepage),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            influences: ::core::clone::Clone::clone(&self.influences),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            language: ::core::clone::Clone::clone(&self.language),
            mode: ::core::clone::Clone::clone(&self.mode),
            specialisation_of: ::core::clone::Clone::clone(&self.specialisation_of),
            status: ::core::clone::Clone::clone(&self.status),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            volume_of_learning: ::core::clone::Clone::clone(&self.volume_of_learning),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningActivitySpecification {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "alt_label",
            "category",
            "contact_hour",
            "date_modified",
            "dc_type",
            "description",
            "generalisation_of",
            "has_part",
            "homepage",
            "id",
            "identifier",
            "influences",
            "is_part_of",
            "language",
            "mode",
            "specialisation_of",
            "status",
            "supplementary_document",
            "title",
            "volume_of_learning",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.alt_label,
            &self.category,
            &self.contact_hour,
            &self.date_modified,
            &self.dc_type,
            &self.description,
            &self.generalisation_of,
            &self.has_part,
            &self.homepage,
            &self.id,
            &self.identifier,
            &self.influences,
            &self.is_part_of,
            &self.language,
            &self.mode,
            &self.specialisation_of,
            &self.status,
            &self.supplementary_document,
            &self.title,
            &self.volume_of_learning,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningActivitySpecification",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningActivitySpecification {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
                __field21,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        21u64 => _serde::__private::Ok(__Field::__field21),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 22",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "altLabel" => _serde::__private::Ok(__Field::__field1),
                        "category" => _serde::__private::Ok(__Field::__field2),
                        "contactHour" => _serde::__private::Ok(__Field::__field3),
                        "dateModified" => _serde::__private::Ok(__Field::__field4),
                        "dcType" => _serde::__private::Ok(__Field::__field5),
                        "description" => _serde::__private::Ok(__Field::__field6),
                        "generalisationOf" => _serde::__private::Ok(__Field::__field7),
                        "hasPart" => _serde::__private::Ok(__Field::__field8),
                        "homepage" => _serde::__private::Ok(__Field::__field9),
                        "id" => _serde::__private::Ok(__Field::__field10),
                        "identifier" => _serde::__private::Ok(__Field::__field11),
                        "influences" => _serde::__private::Ok(__Field::__field12),
                        "isPartOf" => _serde::__private::Ok(__Field::__field13),
                        "language" => _serde::__private::Ok(__Field::__field14),
                        "mode" => _serde::__private::Ok(__Field::__field15),
                        "specialisationOf" => _serde::__private::Ok(__Field::__field16),
                        "status" => _serde::__private::Ok(__Field::__field17),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field18)
                        }
                        "title" => _serde::__private::Ok(__Field::__field19),
                        "volumeOfLearning" => _serde::__private::Ok(__Field::__field20),
                        "type" => _serde::__private::Ok(__Field::__field21),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"altLabel" => _serde::__private::Ok(__Field::__field1),
                        b"category" => _serde::__private::Ok(__Field::__field2),
                        b"contactHour" => _serde::__private::Ok(__Field::__field3),
                        b"dateModified" => _serde::__private::Ok(__Field::__field4),
                        b"dcType" => _serde::__private::Ok(__Field::__field5),
                        b"description" => _serde::__private::Ok(__Field::__field6),
                        b"generalisationOf" => _serde::__private::Ok(__Field::__field7),
                        b"hasPart" => _serde::__private::Ok(__Field::__field8),
                        b"homepage" => _serde::__private::Ok(__Field::__field9),
                        b"id" => _serde::__private::Ok(__Field::__field10),
                        b"identifier" => _serde::__private::Ok(__Field::__field11),
                        b"influences" => _serde::__private::Ok(__Field::__field12),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field13),
                        b"language" => _serde::__private::Ok(__Field::__field14),
                        b"mode" => _serde::__private::Ok(__Field::__field15),
                        b"specialisationOf" => _serde::__private::Ok(__Field::__field16),
                        b"status" => _serde::__private::Ok(__Field::__field17),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field18)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field19),
                        b"volumeOfLearning" => _serde::__private::Ok(__Field::__field20),
                        b"type" => _serde::__private::Ok(__Field::__field21),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningActivitySpecification>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningActivitySpecification;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningActivitySpecification",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<String>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    19usize,
                                    &"struct LearningActivitySpecification with 22 elements",
                                ),
                            );
                        }
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        Option<DurationType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match _serde::de::SeqAccess::next_element::<
                        LearningActivitySpecificationTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    21usize,
                                    &"struct LearningActivitySpecification with 22 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningActivitySpecification {
                        additional_note: __field0,
                        alt_label: __field1,
                        category: __field2,
                        contact_hour: __field3,
                        date_modified: __field4,
                        dc_type: __field5,
                        description: __field6,
                        generalisation_of: __field7,
                        has_part: __field8,
                        homepage: __field9,
                        id: __field10,
                        identifier: __field11,
                        influences: __field12,
                        is_part_of: __field13,
                        language: __field14,
                        mode: __field15,
                        specialisation_of: __field16,
                        status: __field17,
                        supplementary_document: __field18,
                        title: __field19,
                        volume_of_learning: __field20,
                        type_: __field21,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<String>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    > = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    > = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<Option<DurationType>> = _serde::__private::None;
                    let mut __field21: _serde::__private::Option<
                        LearningActivitySpecificationTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "altLabel",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "category",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contactHour",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<String>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "generalisationOf",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningActivitySpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningActivitySpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "homepage",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "influences",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<
                                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                                        >,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningActivitySpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "language",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("mode"),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specialisationOf",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningActivitySpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "volumeOfLearning",
                                        ),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DurationType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field21 => {
                                if _serde::__private::Option::is_some(&__field21) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field21 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningActivitySpecificationTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match __field21 {
                        _serde::__private::Some(__field21) => __field21,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningActivitySpecification {
                        additional_note: __field0,
                        alt_label: __field1,
                        category: __field2,
                        contact_hour: __field3,
                        date_modified: __field4,
                        dc_type: __field5,
                        description: __field6,
                        generalisation_of: __field7,
                        has_part: __field8,
                        homepage: __field9,
                        id: __field10,
                        identifier: __field11,
                        influences: __field12,
                        is_part_of: __field13,
                        language: __field14,
                        mode: __field15,
                        specialisation_of: __field16,
                        status: __field17,
                        supplementary_document: __field18,
                        title: __field19,
                        volume_of_learning: __field20,
                        type_: __field21,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "altLabel",
                "category",
                "contactHour",
                "dateModified",
                "dcType",
                "description",
                "generalisationOf",
                "hasPart",
                "homepage",
                "id",
                "identifier",
                "influences",
                "isPartOf",
                "language",
                "mode",
                "specialisationOf",
                "status",
                "supplementaryDocument",
                "title",
                "volumeOfLearning",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningActivitySpecification",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<
                        LearningActivitySpecification,
                    >,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningActivitySpecification {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningActivitySpecification",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.alt_label) { 0 } else { 1 }
                    + if Option::is_none(&self.category) { 0 } else { 1 }
                    + if Option::is_none(&self.contact_hour) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.generalisation_of) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.homepage) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.influences) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.language) { 0 } else { 1 }
                    + if Option::is_none(&self.mode) { 0 } else { 1 }
                    + if Option::is_none(&self.specialisation_of) { 0 } else { 1 }
                    + if Option::is_none(&self.status) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + if Option::is_none(&self.volume_of_learning) { 0 } else { 1 }
                    + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.alt_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "altLabel",
                    &self.alt_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "altLabel",
                )?;
            }
            if !Option::is_none(&self.category) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "category",
                    &self.category,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "category",
                )?;
            }
            if !Option::is_none(&self.contact_hour) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contactHour",
                    &self.contact_hour,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contactHour",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.generalisation_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "generalisationOf",
                    &self.generalisation_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "generalisationOf",
                )?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.homepage) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "homepage",
                    &self.homepage,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "homepage",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.influences) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "influences",
                    &self.influences,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "influences",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.language) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "language",
                    &self.language,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "language",
                )?;
            }
            if !Option::is_none(&self.mode) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "mode",
                    &self.mode,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "mode")?;
            }
            if !Option::is_none(&self.specialisation_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "specialisationOf",
                    &self.specialisation_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "specialisationOf",
                )?;
            }
            if !Option::is_none(&self.status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "status")?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            if !Option::is_none(&self.volume_of_learning) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "volumeOfLearning",
                    &self.volume_of_learning,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "volumeOfLearning",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningActivitySpecification {
    pub fn tag() -> LearningActivitySpecificationTag {
        LearningActivitySpecificationTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningActivitySpecificationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningActivitySpecificationTag {
    #[inline]
    fn clone(&self) -> LearningActivitySpecificationTag {
        LearningActivitySpecificationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningActivitySpecificationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningActivitySpecificationTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningActivitySpecificationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningActivitySpecificationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningActivitySpecificationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningActivitySpecificationTag {
    fn default() -> Self {
        Self("LearningActivitySpecification".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningActivitySpecificationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningActivitySpecification" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningActivitySpecification",
                ),
            )
        } else {
            Ok(LearningActivitySpecificationTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningActivity {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    pub awarded_by: Box<AwardingProcess>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directed_by: Option<OneOrMany<AgentOrPersonOrOrganisation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<Box<OneOrMany<LearningActivity>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub influences: Option<Box<OneOrMany<LearningAchievement>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<Box<OneOrMany<LearningActivity>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_opportunity: Option<LearningOpportunity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level_of_completion: Option<Percentage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<OneOrMany<Location>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub specified_by: Option<LearningActivitySpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temporal: Option<OneOrMany<PeriodOfTime>>,
    pub title: LangKVPairs,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workload: Option<DurationType>,
    #[serde(rename = "type")]
    pub r#type: String,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningActivity {
    #[inline]
    fn clone(&self) -> LearningActivity {
        LearningActivity {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            awarded_by: ::core::clone::Clone::clone(&self.awarded_by),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            directed_by: ::core::clone::Clone::clone(&self.directed_by),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            influences: ::core::clone::Clone::clone(&self.influences),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            learning_opportunity: ::core::clone::Clone::clone(
                &self.learning_opportunity,
            ),
            level_of_completion: ::core::clone::Clone::clone(&self.level_of_completion),
            location: ::core::clone::Clone::clone(&self.location),
            specified_by: ::core::clone::Clone::clone(&self.specified_by),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            temporal: ::core::clone::Clone::clone(&self.temporal),
            title: ::core::clone::Clone::clone(&self.title),
            workload: ::core::clone::Clone::clone(&self.workload),
            r#type: ::core::clone::Clone::clone(&self.r#type),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningActivity {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "awarded_by",
            "dc_type",
            "description",
            "directed_by",
            "has_part",
            "id",
            "identifier",
            "influences",
            "is_part_of",
            "learning_opportunity",
            "level_of_completion",
            "location",
            "specified_by",
            "supplementary_document",
            "temporal",
            "title",
            "workload",
            "type",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.awarded_by,
            &self.dc_type,
            &self.description,
            &self.directed_by,
            &self.has_part,
            &self.id,
            &self.identifier,
            &self.influences,
            &self.is_part_of,
            &self.learning_opportunity,
            &self.level_of_completion,
            &self.location,
            &self.specified_by,
            &self.supplementary_document,
            &self.temporal,
            &self.title,
            &self.workload,
            &&self.r#type,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningActivity",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningActivity {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 19",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "awardedBy" => _serde::__private::Ok(__Field::__field1),
                        "dcType" => _serde::__private::Ok(__Field::__field2),
                        "description" => _serde::__private::Ok(__Field::__field3),
                        "directedBy" => _serde::__private::Ok(__Field::__field4),
                        "hasPart" => _serde::__private::Ok(__Field::__field5),
                        "id" => _serde::__private::Ok(__Field::__field6),
                        "identifier" => _serde::__private::Ok(__Field::__field7),
                        "influences" => _serde::__private::Ok(__Field::__field8),
                        "isPartOf" => _serde::__private::Ok(__Field::__field9),
                        "learningOpportunity" => {
                            _serde::__private::Ok(__Field::__field10)
                        }
                        "levelOfCompletion" => _serde::__private::Ok(__Field::__field11),
                        "location" => _serde::__private::Ok(__Field::__field12),
                        "specifiedBy" => _serde::__private::Ok(__Field::__field13),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field14)
                        }
                        "temporal" => _serde::__private::Ok(__Field::__field15),
                        "title" => _serde::__private::Ok(__Field::__field16),
                        "workload" => _serde::__private::Ok(__Field::__field17),
                        "type" => _serde::__private::Ok(__Field::__field18),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"awardedBy" => _serde::__private::Ok(__Field::__field1),
                        b"dcType" => _serde::__private::Ok(__Field::__field2),
                        b"description" => _serde::__private::Ok(__Field::__field3),
                        b"directedBy" => _serde::__private::Ok(__Field::__field4),
                        b"hasPart" => _serde::__private::Ok(__Field::__field5),
                        b"id" => _serde::__private::Ok(__Field::__field6),
                        b"identifier" => _serde::__private::Ok(__Field::__field7),
                        b"influences" => _serde::__private::Ok(__Field::__field8),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field9),
                        b"learningOpportunity" => {
                            _serde::__private::Ok(__Field::__field10)
                        }
                        b"levelOfCompletion" => _serde::__private::Ok(__Field::__field11),
                        b"location" => _serde::__private::Ok(__Field::__field12),
                        b"specifiedBy" => _serde::__private::Ok(__Field::__field13),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field14)
                        }
                        b"temporal" => _serde::__private::Ok(__Field::__field15),
                        b"title" => _serde::__private::Ok(__Field::__field16),
                        b"workload" => _serde::__private::Ok(__Field::__field17),
                        b"type" => _serde::__private::Ok(__Field::__field18),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningActivity>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningActivity;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningActivity",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Box<AwardingProcess>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct LearningActivity with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningActivity>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAchievement>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningActivity>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<LearningOpportunity>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<Percentage>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Location>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<LearningActivitySpecification>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<PeriodOfTime>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    16usize,
                                    &"struct LearningActivity with 19 elements",
                                ),
                            );
                        }
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<DurationType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    18usize,
                                    &"struct LearningActivity with 19 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningActivity {
                        additional_note: __field0,
                        awarded_by: __field1,
                        dc_type: __field2,
                        description: __field3,
                        directed_by: __field4,
                        has_part: __field5,
                        id: __field6,
                        identifier: __field7,
                        influences: __field8,
                        is_part_of: __field9,
                        learning_opportunity: __field10,
                        level_of_completion: __field11,
                        location: __field12,
                        specified_by: __field13,
                        supplementary_document: __field14,
                        temporal: __field15,
                        title: __field16,
                        workload: __field17,
                        r#type: __field18,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Box<AwardingProcess>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningActivity>>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAchievement>>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningActivity>>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<LearningOpportunity>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<Option<Percentage>> = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<OneOrMany<Location>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<
                        Option<LearningActivitySpecification>,
                    > = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<OneOrMany<PeriodOfTime>>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<Option<DurationType>> = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<String> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardedBy",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Box<AwardingProcess>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "directedBy",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningActivity>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "influences",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAchievement>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningActivity>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningOpportunity",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LearningOpportunity>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "levelOfCompletion",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Percentage>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Location>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specifiedBy",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LearningActivitySpecification>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "temporal",
                                        ),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<PeriodOfTime>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "workload",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DurationType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("awardedBy")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningActivity {
                        additional_note: __field0,
                        awarded_by: __field1,
                        dc_type: __field2,
                        description: __field3,
                        directed_by: __field4,
                        has_part: __field5,
                        id: __field6,
                        identifier: __field7,
                        influences: __field8,
                        is_part_of: __field9,
                        learning_opportunity: __field10,
                        level_of_completion: __field11,
                        location: __field12,
                        specified_by: __field13,
                        supplementary_document: __field14,
                        temporal: __field15,
                        title: __field16,
                        workload: __field17,
                        r#type: __field18,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "awardedBy",
                "dcType",
                "description",
                "directedBy",
                "hasPart",
                "id",
                "identifier",
                "influences",
                "isPartOf",
                "learningOpportunity",
                "levelOfCompletion",
                "location",
                "specifiedBy",
                "supplementaryDocument",
                "temporal",
                "title",
                "workload",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningActivity",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<LearningActivity>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningActivity {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningActivity",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.directed_by) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.influences) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_opportunity) { 0 } else { 1 }
                    + if Option::is_none(&self.level_of_completion) { 0 } else { 1 }
                    + if Option::is_none(&self.location) { 0 } else { 1 }
                    + if Option::is_none(&self.specified_by) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + if Option::is_none(&self.temporal) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.workload) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "awardedBy",
                &self.awarded_by,
            )?;
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.directed_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "directedBy",
                    &self.directed_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "directedBy",
                )?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.influences) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "influences",
                    &self.influences,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "influences",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.learning_opportunity) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningOpportunity",
                    &self.learning_opportunity,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningOpportunity",
                )?;
            }
            if !Option::is_none(&self.level_of_completion) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "levelOfCompletion",
                    &self.level_of_completion,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "levelOfCompletion",
                )?;
            }
            if !Option::is_none(&self.location) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "location",
                    &self.location,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "location",
                )?;
            }
            if !Option::is_none(&self.specified_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "specifiedBy",
                    &self.specified_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "specifiedBy",
                )?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            if !Option::is_none(&self.temporal) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "temporal",
                    &self.temporal,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "temporal",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            if !Option::is_none(&self.workload) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "workload",
                    &self.workload,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "workload",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.r#type,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[serde(deny_unknown_fields)]
pub struct LearningAssessmentSpecification {
    #[serde(rename = "additionalNote", default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(rename = "altLabel", default, skip_serializing_if = "Option::is_none")]
    pub alt_label: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<LangKVPairs>,
    #[serde(rename = "dateModified", default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(rename = "dcType", default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(rename = "generalisationOf", default)]
    pub generalisation_of: Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
    #[serde(rename = "gradingScheme", default, skip_serializing_if = "Option::is_none")]
    pub grading_scheme: Option<GradingScheme>,
    #[serde(rename = "hasPart", default)]
    pub has_part: Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(rename = "isPartOf", default)]
    pub is_part_of: Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proves: Option<OneOrMany<LearningAchievementSpecificationOrQualification>>,
    #[serde(rename = "specialisationOf", default)]
    pub specialisation_of: Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(
        rename = "supplementaryDocument",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: LearningAssessmentSpecificationTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningAssessmentSpecification {
    #[inline]
    fn clone(&self) -> LearningAssessmentSpecification {
        LearningAssessmentSpecification {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            alt_label: ::core::clone::Clone::clone(&self.alt_label),
            category: ::core::clone::Clone::clone(&self.category),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            generalisation_of: ::core::clone::Clone::clone(&self.generalisation_of),
            grading_scheme: ::core::clone::Clone::clone(&self.grading_scheme),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            homepage: ::core::clone::Clone::clone(&self.homepage),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            language: ::core::clone::Clone::clone(&self.language),
            mode: ::core::clone::Clone::clone(&self.mode),
            proves: ::core::clone::Clone::clone(&self.proves),
            specialisation_of: ::core::clone::Clone::clone(&self.specialisation_of),
            status: ::core::clone::Clone::clone(&self.status),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAssessmentSpecification {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "alt_label",
            "category",
            "date_modified",
            "dc_type",
            "description",
            "generalisation_of",
            "grading_scheme",
            "has_part",
            "homepage",
            "id",
            "identifier",
            "is_part_of",
            "language",
            "mode",
            "proves",
            "specialisation_of",
            "status",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.alt_label,
            &self.category,
            &self.date_modified,
            &self.dc_type,
            &self.description,
            &self.generalisation_of,
            &self.grading_scheme,
            &self.has_part,
            &self.homepage,
            &self.id,
            &self.identifier,
            &self.is_part_of,
            &self.language,
            &self.mode,
            &self.proves,
            &self.specialisation_of,
            &self.status,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningAssessmentSpecification",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningAssessmentSpecification {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 21",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "altLabel" => _serde::__private::Ok(__Field::__field1),
                        "category" => _serde::__private::Ok(__Field::__field2),
                        "dateModified" => _serde::__private::Ok(__Field::__field3),
                        "dcType" => _serde::__private::Ok(__Field::__field4),
                        "description" => _serde::__private::Ok(__Field::__field5),
                        "generalisationOf" => _serde::__private::Ok(__Field::__field6),
                        "gradingScheme" => _serde::__private::Ok(__Field::__field7),
                        "hasPart" => _serde::__private::Ok(__Field::__field8),
                        "homepage" => _serde::__private::Ok(__Field::__field9),
                        "id" => _serde::__private::Ok(__Field::__field10),
                        "identifier" => _serde::__private::Ok(__Field::__field11),
                        "isPartOf" => _serde::__private::Ok(__Field::__field12),
                        "language" => _serde::__private::Ok(__Field::__field13),
                        "mode" => _serde::__private::Ok(__Field::__field14),
                        "proves" => _serde::__private::Ok(__Field::__field15),
                        "specialisationOf" => _serde::__private::Ok(__Field::__field16),
                        "status" => _serde::__private::Ok(__Field::__field17),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field18)
                        }
                        "title" => _serde::__private::Ok(__Field::__field19),
                        "type" => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"altLabel" => _serde::__private::Ok(__Field::__field1),
                        b"category" => _serde::__private::Ok(__Field::__field2),
                        b"dateModified" => _serde::__private::Ok(__Field::__field3),
                        b"dcType" => _serde::__private::Ok(__Field::__field4),
                        b"description" => _serde::__private::Ok(__Field::__field5),
                        b"generalisationOf" => _serde::__private::Ok(__Field::__field6),
                        b"gradingScheme" => _serde::__private::Ok(__Field::__field7),
                        b"hasPart" => _serde::__private::Ok(__Field::__field8),
                        b"homepage" => _serde::__private::Ok(__Field::__field9),
                        b"id" => _serde::__private::Ok(__Field::__field10),
                        b"identifier" => _serde::__private::Ok(__Field::__field11),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field12),
                        b"language" => _serde::__private::Ok(__Field::__field13),
                        b"mode" => _serde::__private::Ok(__Field::__field14),
                        b"proves" => _serde::__private::Ok(__Field::__field15),
                        b"specialisationOf" => _serde::__private::Ok(__Field::__field16),
                        b"status" => _serde::__private::Ok(__Field::__field17),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field18)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field19),
                        b"type" => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningAssessmentSpecification>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningAssessmentSpecification;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningAssessmentSpecification",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<GradingScheme>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    19usize,
                                    &"struct LearningAssessmentSpecification with 21 elements",
                                ),
                            );
                        }
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        LearningAssessmentSpecificationTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    20usize,
                                    &"struct LearningAssessmentSpecification with 21 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningAssessmentSpecification {
                        additional_note: __field0,
                        alt_label: __field1,
                        category: __field2,
                        date_modified: __field3,
                        dc_type: __field4,
                        description: __field5,
                        generalisation_of: __field6,
                        grading_scheme: __field7,
                        has_part: __field8,
                        homepage: __field9,
                        id: __field10,
                        identifier: __field11,
                        is_part_of: __field12,
                        language: __field13,
                        mode: __field14,
                        proves: __field15,
                        specialisation_of: __field16,
                        status: __field17,
                        supplementary_document: __field18,
                        title: __field19,
                        type_: __field20,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<GradingScheme>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<
                        LearningAssessmentSpecificationTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "altLabel",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "category",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "generalisationOf",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "gradingScheme",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<GradingScheme>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "homepage",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "language",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("mode"),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("proves"),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<
                                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                                        >,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specialisationOf",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningAssessmentSpecificationTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningAssessmentSpecification {
                        additional_note: __field0,
                        alt_label: __field1,
                        category: __field2,
                        date_modified: __field3,
                        dc_type: __field4,
                        description: __field5,
                        generalisation_of: __field6,
                        grading_scheme: __field7,
                        has_part: __field8,
                        homepage: __field9,
                        id: __field10,
                        identifier: __field11,
                        is_part_of: __field12,
                        language: __field13,
                        mode: __field14,
                        proves: __field15,
                        specialisation_of: __field16,
                        status: __field17,
                        supplementary_document: __field18,
                        title: __field19,
                        type_: __field20,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "altLabel",
                "category",
                "dateModified",
                "dcType",
                "description",
                "generalisationOf",
                "gradingScheme",
                "hasPart",
                "homepage",
                "id",
                "identifier",
                "isPartOf",
                "language",
                "mode",
                "proves",
                "specialisationOf",
                "status",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningAssessmentSpecification",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<
                        LearningAssessmentSpecification,
                    >,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAssessmentSpecification {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningAssessmentSpecification",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.alt_label) { 0 } else { 1 }
                    + if Option::is_none(&self.category) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.grading_scheme) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.homepage) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.language) { 0 } else { 1 }
                    + if Option::is_none(&self.mode) { 0 } else { 1 }
                    + if Option::is_none(&self.proves) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.status) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.alt_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "altLabel",
                    &self.alt_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "altLabel",
                )?;
            }
            if !Option::is_none(&self.category) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "category",
                    &self.category,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "category",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "generalisationOf",
                &self.generalisation_of,
            )?;
            if !Option::is_none(&self.grading_scheme) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "gradingScheme",
                    &self.grading_scheme,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "gradingScheme",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "hasPart",
                &self.has_part,
            )?;
            if !Option::is_none(&self.homepage) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "homepage",
                    &self.homepage,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "homepage",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "isPartOf",
                &self.is_part_of,
            )?;
            if !Option::is_none(&self.language) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "language",
                    &self.language,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "language",
                )?;
            }
            if !Option::is_none(&self.mode) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "mode",
                    &self.mode,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "mode")?;
            }
            if !Option::is_none(&self.proves) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "proves",
                    &self.proves,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "proves")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "specialisationOf",
                &self.specialisation_of,
            )?;
            if !Option::is_none(&self.status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "status")?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningAssessmentSpecification {
    pub fn tag() -> LearningAssessmentSpecificationTag {
        LearningAssessmentSpecificationTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningAssessmentSpecificationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningAssessmentSpecificationTag {
    #[inline]
    fn clone(&self) -> LearningAssessmentSpecificationTag {
        LearningAssessmentSpecificationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAssessmentSpecificationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningAssessmentSpecificationTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAssessmentSpecificationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningAssessmentSpecificationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningAssessmentSpecificationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningAssessmentSpecificationTag {
    fn default() -> Self {
        Self("LearningAssessmentSpecification".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningAssessmentSpecificationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningAssessmentSpecification" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningAssessmentSpecification",
                ),
            )
        } else {
            Ok(LearningAssessmentSpecificationTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningAssessment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assessed_by: Option<OneOrMany<AgentOrPersonOrOrganisation>>,
    pub awarded_by: Box<AwardingProcess>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_issued: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    pub grade: Note,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grade_status: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<Box<OneOrMany<LearningAssessment>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id_verification: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<Box<OneOrMany<LearningAssessment>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Location>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proves: Option<OneOrMany<LearningAchievement>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result_distribution: Option<ResultDistribution>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub shortened_grading: Option<ShortenedGrading>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub specified_by: Option<OneOrMany<LearningAssessmentSpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: LearningAssessmentTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningAssessment {
    #[inline]
    fn clone(&self) -> LearningAssessment {
        LearningAssessment {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            assessed_by: ::core::clone::Clone::clone(&self.assessed_by),
            awarded_by: ::core::clone::Clone::clone(&self.awarded_by),
            date_issued: ::core::clone::Clone::clone(&self.date_issued),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            grade: ::core::clone::Clone::clone(&self.grade),
            grade_status: ::core::clone::Clone::clone(&self.grade_status),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            id: ::core::clone::Clone::clone(&self.id),
            id_verification: ::core::clone::Clone::clone(&self.id_verification),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            location: ::core::clone::Clone::clone(&self.location),
            proves: ::core::clone::Clone::clone(&self.proves),
            result_distribution: ::core::clone::Clone::clone(&self.result_distribution),
            shortened_grading: ::core::clone::Clone::clone(&self.shortened_grading),
            specified_by: ::core::clone::Clone::clone(&self.specified_by),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAssessment {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "assessed_by",
            "awarded_by",
            "date_issued",
            "dc_type",
            "description",
            "grade",
            "grade_status",
            "has_part",
            "id",
            "id_verification",
            "identifier",
            "is_part_of",
            "location",
            "proves",
            "result_distribution",
            "shortened_grading",
            "specified_by",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.assessed_by,
            &self.awarded_by,
            &self.date_issued,
            &self.dc_type,
            &self.description,
            &self.grade,
            &self.grade_status,
            &self.has_part,
            &self.id,
            &self.id_verification,
            &self.identifier,
            &self.is_part_of,
            &self.location,
            &self.proves,
            &self.result_distribution,
            &self.shortened_grading,
            &self.specified_by,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningAssessment",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningAssessment {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 21",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "assessedBy" => _serde::__private::Ok(__Field::__field1),
                        "awardedBy" => _serde::__private::Ok(__Field::__field2),
                        "dateIssued" => _serde::__private::Ok(__Field::__field3),
                        "dcType" => _serde::__private::Ok(__Field::__field4),
                        "description" => _serde::__private::Ok(__Field::__field5),
                        "grade" => _serde::__private::Ok(__Field::__field6),
                        "gradeStatus" => _serde::__private::Ok(__Field::__field7),
                        "hasPart" => _serde::__private::Ok(__Field::__field8),
                        "id" => _serde::__private::Ok(__Field::__field9),
                        "idVerification" => _serde::__private::Ok(__Field::__field10),
                        "identifier" => _serde::__private::Ok(__Field::__field11),
                        "isPartOf" => _serde::__private::Ok(__Field::__field12),
                        "location" => _serde::__private::Ok(__Field::__field13),
                        "proves" => _serde::__private::Ok(__Field::__field14),
                        "resultDistribution" => _serde::__private::Ok(__Field::__field15),
                        "shortenedGrading" => _serde::__private::Ok(__Field::__field16),
                        "specifiedBy" => _serde::__private::Ok(__Field::__field17),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field18)
                        }
                        "title" => _serde::__private::Ok(__Field::__field19),
                        "type" => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"assessedBy" => _serde::__private::Ok(__Field::__field1),
                        b"awardedBy" => _serde::__private::Ok(__Field::__field2),
                        b"dateIssued" => _serde::__private::Ok(__Field::__field3),
                        b"dcType" => _serde::__private::Ok(__Field::__field4),
                        b"description" => _serde::__private::Ok(__Field::__field5),
                        b"grade" => _serde::__private::Ok(__Field::__field6),
                        b"gradeStatus" => _serde::__private::Ok(__Field::__field7),
                        b"hasPart" => _serde::__private::Ok(__Field::__field8),
                        b"id" => _serde::__private::Ok(__Field::__field9),
                        b"idVerification" => _serde::__private::Ok(__Field::__field10),
                        b"identifier" => _serde::__private::Ok(__Field::__field11),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field12),
                        b"location" => _serde::__private::Ok(__Field::__field13),
                        b"proves" => _serde::__private::Ok(__Field::__field14),
                        b"resultDistribution" => {
                            _serde::__private::Ok(__Field::__field15)
                        }
                        b"shortenedGrading" => _serde::__private::Ok(__Field::__field16),
                        b"specifiedBy" => _serde::__private::Ok(__Field::__field17),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field18)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field19),
                        b"type" => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningAssessment>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningAssessment;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningAssessment",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Box<AwardingProcess>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct LearningAssessment with 21 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Note,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct LearningAssessment with 21 elements",
                                ),
                            );
                        }
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessment>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessment>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<Location>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningAchievement>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<ResultDistribution>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<ShortenedGrading>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningAssessmentSpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    19usize,
                                    &"struct LearningAssessment with 21 elements",
                                ),
                            );
                        }
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        LearningAssessmentTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    20usize,
                                    &"struct LearningAssessment with 21 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningAssessment {
                        additional_note: __field0,
                        assessed_by: __field1,
                        awarded_by: __field2,
                        date_issued: __field3,
                        dc_type: __field4,
                        description: __field5,
                        grade: __field6,
                        grade_status: __field7,
                        has_part: __field8,
                        id: __field9,
                        id_verification: __field10,
                        identifier: __field11,
                        is_part_of: __field12,
                        location: __field13,
                        proves: __field14,
                        result_distribution: __field15,
                        shortened_grading: __field16,
                        specified_by: __field17,
                        supplementary_document: __field18,
                        title: __field19,
                        type_: __field20,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Box<AwardingProcess>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Note> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessment>>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessment>>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<Option<Location>> = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<LearningAchievement>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<ResultDistribution>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<ShortenedGrading>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<
                        Option<OneOrMany<LearningAssessmentSpecification>>,
                    > = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<
                        LearningAssessmentTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "assessedBy",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<AgentOrPersonOrOrganisation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardedBy",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Box<AwardingProcess>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateIssued",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("grade"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Note>(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "gradeStatus",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessment>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "idVerification",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessment>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Location>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("proves"),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningAchievement>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "resultDistribution",
                                        ),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<ResultDistribution>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "shortenedGrading",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<ShortenedGrading>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specifiedBy",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningAssessmentSpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningAssessmentTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("awardedBy")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("grade")?
                        }
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningAssessment {
                        additional_note: __field0,
                        assessed_by: __field1,
                        awarded_by: __field2,
                        date_issued: __field3,
                        dc_type: __field4,
                        description: __field5,
                        grade: __field6,
                        grade_status: __field7,
                        has_part: __field8,
                        id: __field9,
                        id_verification: __field10,
                        identifier: __field11,
                        is_part_of: __field12,
                        location: __field13,
                        proves: __field14,
                        result_distribution: __field15,
                        shortened_grading: __field16,
                        specified_by: __field17,
                        supplementary_document: __field18,
                        title: __field19,
                        type_: __field20,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "assessedBy",
                "awardedBy",
                "dateIssued",
                "dcType",
                "description",
                "grade",
                "gradeStatus",
                "hasPart",
                "id",
                "idVerification",
                "identifier",
                "isPartOf",
                "location",
                "proves",
                "resultDistribution",
                "shortenedGrading",
                "specifiedBy",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningAssessment",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<LearningAssessment>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAssessment {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningAssessment",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.assessed_by) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.date_issued) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.grade_status) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.id_verification) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.location) { 0 } else { 1 }
                    + if Option::is_none(&self.proves) { 0 } else { 1 }
                    + if Option::is_none(&self.result_distribution) { 0 } else { 1 }
                    + if Option::is_none(&self.shortened_grading) { 0 } else { 1 }
                    + if Option::is_none(&self.specified_by) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.assessed_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "assessedBy",
                    &self.assessed_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "assessedBy",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "awardedBy",
                &self.awarded_by,
            )?;
            if !Option::is_none(&self.date_issued) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateIssued",
                    &self.date_issued,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateIssued",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "grade",
                &self.grade,
            )?;
            if !Option::is_none(&self.grade_status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "gradeStatus",
                    &self.grade_status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "gradeStatus",
                )?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.id_verification) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "idVerification",
                    &self.id_verification,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "idVerification",
                )?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.location) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "location",
                    &self.location,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "location",
                )?;
            }
            if !Option::is_none(&self.proves) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "proves",
                    &self.proves,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "proves")?;
            }
            if !Option::is_none(&self.result_distribution) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "resultDistribution",
                    &self.result_distribution,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "resultDistribution",
                )?;
            }
            if !Option::is_none(&self.shortened_grading) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "shortenedGrading",
                    &self.shortened_grading,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "shortenedGrading",
                )?;
            }
            if !Option::is_none(&self.specified_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "specifiedBy",
                    &self.specified_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "specifiedBy",
                )?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningAssessment {
    pub fn tag() -> LearningAssessmentTag {
        LearningAssessmentTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningAssessmentTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningAssessmentTag {
    #[inline]
    fn clone(&self) -> LearningAssessmentTag {
        LearningAssessmentTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningAssessmentTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningAssessmentTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningAssessmentTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningAssessmentTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningAssessmentTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningAssessmentTag {
    fn default() -> Self {
        Self("LearningAssessment".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningAssessmentTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningAssessment" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningAssessment",
                ),
            )
        } else {
            Ok(LearningAssessmentTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningEntitlementSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alt_label: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    pub dc_type: OneOrMany<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entitled_by: Option<OneOrMany<LearningAchievementSpecificationOrQualification>>,
    pub entitlement_status: Concept,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generalisation_of: Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit_jurisdiction: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit_national_occupation: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit_occupation: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limit_organisation: Option<Box<OneOrMany<Organisation>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub specialisation_of: Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: LearningEntitlementSpecificationTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningEntitlementSpecification {
    #[inline]
    fn clone(&self) -> LearningEntitlementSpecification {
        LearningEntitlementSpecification {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            alt_label: ::core::clone::Clone::clone(&self.alt_label),
            category: ::core::clone::Clone::clone(&self.category),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            entitled_by: ::core::clone::Clone::clone(&self.entitled_by),
            entitlement_status: ::core::clone::Clone::clone(&self.entitlement_status),
            generalisation_of: ::core::clone::Clone::clone(&self.generalisation_of),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            homepage: ::core::clone::Clone::clone(&self.homepage),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            limit_jurisdiction: ::core::clone::Clone::clone(&self.limit_jurisdiction),
            limit_national_occupation: ::core::clone::Clone::clone(
                &self.limit_national_occupation,
            ),
            limit_occupation: ::core::clone::Clone::clone(&self.limit_occupation),
            limit_organisation: ::core::clone::Clone::clone(&self.limit_organisation),
            specialisation_of: ::core::clone::Clone::clone(&self.specialisation_of),
            status: ::core::clone::Clone::clone(&self.status),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningEntitlementSpecification {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "alt_label",
            "category",
            "date_modified",
            "dc_type",
            "description",
            "entitled_by",
            "entitlement_status",
            "generalisation_of",
            "has_part",
            "homepage",
            "id",
            "identifier",
            "is_part_of",
            "limit_jurisdiction",
            "limit_national_occupation",
            "limit_occupation",
            "limit_organisation",
            "specialisation_of",
            "status",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.alt_label,
            &self.category,
            &self.date_modified,
            &self.dc_type,
            &self.description,
            &self.entitled_by,
            &self.entitlement_status,
            &self.generalisation_of,
            &self.has_part,
            &self.homepage,
            &self.id,
            &self.identifier,
            &self.is_part_of,
            &self.limit_jurisdiction,
            &self.limit_national_occupation,
            &self.limit_occupation,
            &self.limit_organisation,
            &self.specialisation_of,
            &self.status,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningEntitlementSpecification",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningEntitlementSpecification {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
                __field21,
                __field22,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        21u64 => _serde::__private::Ok(__Field::__field21),
                        22u64 => _serde::__private::Ok(__Field::__field22),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 23",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "altLabel" => _serde::__private::Ok(__Field::__field1),
                        "category" => _serde::__private::Ok(__Field::__field2),
                        "dateModified" => _serde::__private::Ok(__Field::__field3),
                        "dcType" => _serde::__private::Ok(__Field::__field4),
                        "description" => _serde::__private::Ok(__Field::__field5),
                        "entitledBy" => _serde::__private::Ok(__Field::__field6),
                        "entitlementStatus" => _serde::__private::Ok(__Field::__field7),
                        "generalisationOf" => _serde::__private::Ok(__Field::__field8),
                        "hasPart" => _serde::__private::Ok(__Field::__field9),
                        "homepage" => _serde::__private::Ok(__Field::__field10),
                        "id" => _serde::__private::Ok(__Field::__field11),
                        "identifier" => _serde::__private::Ok(__Field::__field12),
                        "isPartOf" => _serde::__private::Ok(__Field::__field13),
                        "limitJurisdiction" => _serde::__private::Ok(__Field::__field14),
                        "limitNationalOccupation" => {
                            _serde::__private::Ok(__Field::__field15)
                        }
                        "limitOccupation" => _serde::__private::Ok(__Field::__field16),
                        "limitOrganisation" => _serde::__private::Ok(__Field::__field17),
                        "specialisationOf" => _serde::__private::Ok(__Field::__field18),
                        "status" => _serde::__private::Ok(__Field::__field19),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field20)
                        }
                        "title" => _serde::__private::Ok(__Field::__field21),
                        "type" => _serde::__private::Ok(__Field::__field22),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"altLabel" => _serde::__private::Ok(__Field::__field1),
                        b"category" => _serde::__private::Ok(__Field::__field2),
                        b"dateModified" => _serde::__private::Ok(__Field::__field3),
                        b"dcType" => _serde::__private::Ok(__Field::__field4),
                        b"description" => _serde::__private::Ok(__Field::__field5),
                        b"entitledBy" => _serde::__private::Ok(__Field::__field6),
                        b"entitlementStatus" => _serde::__private::Ok(__Field::__field7),
                        b"generalisationOf" => _serde::__private::Ok(__Field::__field8),
                        b"hasPart" => _serde::__private::Ok(__Field::__field9),
                        b"homepage" => _serde::__private::Ok(__Field::__field10),
                        b"id" => _serde::__private::Ok(__Field::__field11),
                        b"identifier" => _serde::__private::Ok(__Field::__field12),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field13),
                        b"limitJurisdiction" => _serde::__private::Ok(__Field::__field14),
                        b"limitNationalOccupation" => {
                            _serde::__private::Ok(__Field::__field15)
                        }
                        b"limitOccupation" => _serde::__private::Ok(__Field::__field16),
                        b"limitOrganisation" => _serde::__private::Ok(__Field::__field17),
                        b"specialisationOf" => _serde::__private::Ok(__Field::__field18),
                        b"status" => _serde::__private::Ok(__Field::__field19),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field20)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field21),
                        b"type" => _serde::__private::Ok(__Field::__field22),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningEntitlementSpecification>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningEntitlementSpecification;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningEntitlementSpecification",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct LearningEntitlementSpecification with 23 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct LearningEntitlementSpecification with 23 elements",
                                ),
                            );
                        }
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<Organisation>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    21usize,
                                    &"struct LearningEntitlementSpecification with 23 elements",
                                ),
                            );
                        }
                    };
                    let __field22 = match _serde::de::SeqAccess::next_element::<
                        LearningEntitlementSpecificationTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    22usize,
                                    &"struct LearningEntitlementSpecification with 23 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningEntitlementSpecification {
                        additional_note: __field0,
                        alt_label: __field1,
                        category: __field2,
                        date_modified: __field3,
                        dc_type: __field4,
                        description: __field5,
                        entitled_by: __field6,
                        entitlement_status: __field7,
                        generalisation_of: __field8,
                        has_part: __field9,
                        homepage: __field10,
                        id: __field11,
                        identifier: __field12,
                        is_part_of: __field13,
                        limit_jurisdiction: __field14,
                        limit_national_occupation: __field15,
                        limit_occupation: __field16,
                        limit_organisation: __field17,
                        specialisation_of: __field18,
                        status: __field19,
                        supplementary_document: __field20,
                        title: __field21,
                        type_: __field22,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<OneOrMany<Concept>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<
                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                        >,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<
                        Option<Box<OneOrMany<Organisation>>>,
                    > = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field21: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field22: _serde::__private::Option<
                        LearningEntitlementSpecificationTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "altLabel",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "category",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "entitledBy",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<
                                            OneOrMany<LearningAchievementSpecificationOrQualification>,
                                        >,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "entitlementStatus",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "generalisationOf",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "homepage",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitJurisdiction",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitNationalOccupation",
                                        ),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitOccupation",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "limitOrganisation",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<Organisation>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specialisationOf",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningEntitlementSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field21 => {
                                if _serde::__private::Option::is_some(&__field21) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field21 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field22 => {
                                if _serde::__private::Option::is_some(&__field22) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field22 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningEntitlementSpecificationTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("dcType")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("entitlementStatus")?
                        }
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match __field21 {
                        _serde::__private::Some(__field21) => __field21,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field22 = match __field22 {
                        _serde::__private::Some(__field22) => __field22,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningEntitlementSpecification {
                        additional_note: __field0,
                        alt_label: __field1,
                        category: __field2,
                        date_modified: __field3,
                        dc_type: __field4,
                        description: __field5,
                        entitled_by: __field6,
                        entitlement_status: __field7,
                        generalisation_of: __field8,
                        has_part: __field9,
                        homepage: __field10,
                        id: __field11,
                        identifier: __field12,
                        is_part_of: __field13,
                        limit_jurisdiction: __field14,
                        limit_national_occupation: __field15,
                        limit_occupation: __field16,
                        limit_organisation: __field17,
                        specialisation_of: __field18,
                        status: __field19,
                        supplementary_document: __field20,
                        title: __field21,
                        type_: __field22,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "altLabel",
                "category",
                "dateModified",
                "dcType",
                "description",
                "entitledBy",
                "entitlementStatus",
                "generalisationOf",
                "hasPart",
                "homepage",
                "id",
                "identifier",
                "isPartOf",
                "limitJurisdiction",
                "limitNationalOccupation",
                "limitOccupation",
                "limitOrganisation",
                "specialisationOf",
                "status",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningEntitlementSpecification",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<
                        LearningEntitlementSpecification,
                    >,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningEntitlementSpecification {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningEntitlementSpecification",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.alt_label) { 0 } else { 1 }
                    + if Option::is_none(&self.category) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.entitled_by) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.generalisation_of) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.homepage) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.limit_jurisdiction) { 0 } else { 1 }
                    + if Option::is_none(&self.limit_national_occupation) {
                        0
                    } else {
                        1
                    } + if Option::is_none(&self.limit_occupation) { 0 } else { 1 }
                    + if Option::is_none(&self.limit_organisation) { 0 } else { 1 }
                    + if Option::is_none(&self.specialisation_of) { 0 } else { 1 }
                    + if Option::is_none(&self.status) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.alt_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "altLabel",
                    &self.alt_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "altLabel",
                )?;
            }
            if !Option::is_none(&self.category) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "category",
                    &self.category,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "category",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "dcType",
                &self.dc_type,
            )?;
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.entitled_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "entitledBy",
                    &self.entitled_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "entitledBy",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "entitlementStatus",
                &self.entitlement_status,
            )?;
            if !Option::is_none(&self.generalisation_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "generalisationOf",
                    &self.generalisation_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "generalisationOf",
                )?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.homepage) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "homepage",
                    &self.homepage,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "homepage",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.limit_jurisdiction) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitJurisdiction",
                    &self.limit_jurisdiction,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitJurisdiction",
                )?;
            }
            if !Option::is_none(&self.limit_national_occupation) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitNationalOccupation",
                    &self.limit_national_occupation,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitNationalOccupation",
                )?;
            }
            if !Option::is_none(&self.limit_occupation) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitOccupation",
                    &self.limit_occupation,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitOccupation",
                )?;
            }
            if !Option::is_none(&self.limit_organisation) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "limitOrganisation",
                    &self.limit_organisation,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "limitOrganisation",
                )?;
            }
            if !Option::is_none(&self.specialisation_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "specialisationOf",
                    &self.specialisation_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "specialisationOf",
                )?;
            }
            if !Option::is_none(&self.status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "status")?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningEntitlementSpecification {
    pub fn tag() -> LearningEntitlementSpecificationTag {
        LearningEntitlementSpecificationTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningEntitlementSpecificationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningEntitlementSpecificationTag {
    #[inline]
    fn clone(&self) -> LearningEntitlementSpecificationTag {
        LearningEntitlementSpecificationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningEntitlementSpecificationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningEntitlementSpecificationTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningEntitlementSpecificationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningEntitlementSpecificationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningEntitlementSpecificationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningEntitlementSpecificationTag {
    fn default() -> Self {
        Self("LearningEntitlementSpecification".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningEntitlementSpecificationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningEntitlementSpecification" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningEntitlementSpecification",
                ),
            )
        } else {
            Ok(LearningEntitlementSpecificationTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningEntitlement {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    pub awarded_by: Box<AwardingProcess>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_issued: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entitled_by: Option<Box<OneOrMany<LearningAchievement>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expiry_date: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<Box<OneOrMany<LearningEntitlement>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<Box<OneOrMany<LearningEntitlement>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub specified_by: Option<OneOrMany<LearningEntitlementSpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: LearningEntitlementTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningEntitlement {
    #[inline]
    fn clone(&self) -> LearningEntitlement {
        LearningEntitlement {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            awarded_by: ::core::clone::Clone::clone(&self.awarded_by),
            date_issued: ::core::clone::Clone::clone(&self.date_issued),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            entitled_by: ::core::clone::Clone::clone(&self.entitled_by),
            expiry_date: ::core::clone::Clone::clone(&self.expiry_date),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            specified_by: ::core::clone::Clone::clone(&self.specified_by),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningEntitlement {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "awarded_by",
            "date_issued",
            "dc_type",
            "description",
            "entitled_by",
            "expiry_date",
            "has_part",
            "id",
            "identifier",
            "is_part_of",
            "specified_by",
            "supplementary_document",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.awarded_by,
            &self.date_issued,
            &self.dc_type,
            &self.description,
            &self.entitled_by,
            &self.expiry_date,
            &self.has_part,
            &self.id,
            &self.identifier,
            &self.is_part_of,
            &self.specified_by,
            &self.supplementary_document,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningEntitlement",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningEntitlement {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 15",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "awardedBy" => _serde::__private::Ok(__Field::__field1),
                        "dateIssued" => _serde::__private::Ok(__Field::__field2),
                        "dcType" => _serde::__private::Ok(__Field::__field3),
                        "description" => _serde::__private::Ok(__Field::__field4),
                        "entitledBy" => _serde::__private::Ok(__Field::__field5),
                        "expiryDate" => _serde::__private::Ok(__Field::__field6),
                        "hasPart" => _serde::__private::Ok(__Field::__field7),
                        "id" => _serde::__private::Ok(__Field::__field8),
                        "identifier" => _serde::__private::Ok(__Field::__field9),
                        "isPartOf" => _serde::__private::Ok(__Field::__field10),
                        "specifiedBy" => _serde::__private::Ok(__Field::__field11),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field12)
                        }
                        "title" => _serde::__private::Ok(__Field::__field13),
                        "type" => _serde::__private::Ok(__Field::__field14),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"awardedBy" => _serde::__private::Ok(__Field::__field1),
                        b"dateIssued" => _serde::__private::Ok(__Field::__field2),
                        b"dcType" => _serde::__private::Ok(__Field::__field3),
                        b"description" => _serde::__private::Ok(__Field::__field4),
                        b"entitledBy" => _serde::__private::Ok(__Field::__field5),
                        b"expiryDate" => _serde::__private::Ok(__Field::__field6),
                        b"hasPart" => _serde::__private::Ok(__Field::__field7),
                        b"id" => _serde::__private::Ok(__Field::__field8),
                        b"identifier" => _serde::__private::Ok(__Field::__field9),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field10),
                        b"specifiedBy" => _serde::__private::Ok(__Field::__field11),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field12)
                        }
                        b"title" => _serde::__private::Ok(__Field::__field13),
                        b"type" => _serde::__private::Ok(__Field::__field14),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningEntitlement>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningEntitlement;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningEntitlement",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Box<AwardingProcess>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct LearningEntitlement with 15 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAchievement>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningEntitlement>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningEntitlement>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningEntitlementSpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    13usize,
                                    &"struct LearningEntitlement with 15 elements",
                                ),
                            );
                        }
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        LearningEntitlementTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    14usize,
                                    &"struct LearningEntitlement with 15 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningEntitlement {
                        additional_note: __field0,
                        awarded_by: __field1,
                        date_issued: __field2,
                        dc_type: __field3,
                        description: __field4,
                        entitled_by: __field5,
                        expiry_date: __field6,
                        has_part: __field7,
                        id: __field8,
                        identifier: __field9,
                        is_part_of: __field10,
                        specified_by: __field11,
                        supplementary_document: __field12,
                        title: __field13,
                        type_: __field14,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Box<AwardingProcess>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAchievement>>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningEntitlement>>>,
                    > = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningEntitlement>>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<OneOrMany<LearningEntitlementSpecification>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        LearningEntitlementTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardedBy",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Box<AwardingProcess>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateIssued",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "entitledBy",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAchievement>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "expiryDate",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningEntitlement>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningEntitlement>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specifiedBy",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningEntitlementSpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningEntitlementTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("awardedBy")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningEntitlement {
                        additional_note: __field0,
                        awarded_by: __field1,
                        date_issued: __field2,
                        dc_type: __field3,
                        description: __field4,
                        entitled_by: __field5,
                        expiry_date: __field6,
                        has_part: __field7,
                        id: __field8,
                        identifier: __field9,
                        is_part_of: __field10,
                        specified_by: __field11,
                        supplementary_document: __field12,
                        title: __field13,
                        type_: __field14,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "awardedBy",
                "dateIssued",
                "dcType",
                "description",
                "entitledBy",
                "expiryDate",
                "hasPart",
                "id",
                "identifier",
                "isPartOf",
                "specifiedBy",
                "supplementaryDocument",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningEntitlement",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<LearningEntitlement>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningEntitlement {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningEntitlement",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.date_issued) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.entitled_by) { 0 } else { 1 }
                    + if Option::is_none(&self.expiry_date) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.specified_by) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "awardedBy",
                &self.awarded_by,
            )?;
            if !Option::is_none(&self.date_issued) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateIssued",
                    &self.date_issued,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateIssued",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.entitled_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "entitledBy",
                    &self.entitled_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "entitledBy",
                )?;
            }
            if !Option::is_none(&self.expiry_date) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "expiryDate",
                    &self.expiry_date,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "expiryDate",
                )?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.specified_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "specifiedBy",
                    &self.specified_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "specifiedBy",
                )?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningEntitlement {
    pub fn tag() -> LearningEntitlementTag {
        LearningEntitlementTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningEntitlementTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningEntitlementTag {
    #[inline]
    fn clone(&self) -> LearningEntitlementTag {
        LearningEntitlementTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningEntitlementTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningEntitlementTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningEntitlementTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningEntitlementTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningEntitlementTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningEntitlementTag {
    fn default() -> Self {
        Self("LearningEntitlement".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningEntitlementTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningEntitlement" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningEntitlement",
                ),
            )
        } else {
            Ok(LearningEntitlementTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningOpportunity {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub admission_procedure: Option<Note>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application_deadline: Option<OneOrMany<DateTime<Utc>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub banner_image: Option<MediaObject>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_language: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description_html: Option<OneOrMany<HtmlType>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<DurationType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grant: Option<OneOrMany<Grant>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<OneOrMany<LearningOpportunity>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<OneOrMany<LearningOpportunity>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_achievement_specification: Option<
        LearningAchievementSpecificationOrQualification,
    >,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_activity_specification: Option<LearningActivitySpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_schedule: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<OneOrMany<Location>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub price_detail: Option<OneOrMany<PriceDetail>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provided_by: Option<Box<Organisation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule_information: Option<Note>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temporal: Option<PeriodOfTime>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: LearningOpportunityTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningOpportunity {
    #[inline]
    fn clone(&self) -> LearningOpportunity {
        LearningOpportunity {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            admission_procedure: ::core::clone::Clone::clone(&self.admission_procedure),
            application_deadline: ::core::clone::Clone::clone(
                &self.application_deadline,
            ),
            banner_image: ::core::clone::Clone::clone(&self.banner_image),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            default_language: ::core::clone::Clone::clone(&self.default_language),
            description: ::core::clone::Clone::clone(&self.description),
            description_html: ::core::clone::Clone::clone(&self.description_html),
            duration: ::core::clone::Clone::clone(&self.duration),
            grant: ::core::clone::Clone::clone(&self.grant),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            homepage: ::core::clone::Clone::clone(&self.homepage),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            learning_achievement_specification: ::core::clone::Clone::clone(
                &self.learning_achievement_specification,
            ),
            learning_activity_specification: ::core::clone::Clone::clone(
                &self.learning_activity_specification,
            ),
            learning_schedule: ::core::clone::Clone::clone(&self.learning_schedule),
            location: ::core::clone::Clone::clone(&self.location),
            mode: ::core::clone::Clone::clone(&self.mode),
            price_detail: ::core::clone::Clone::clone(&self.price_detail),
            provided_by: ::core::clone::Clone::clone(&self.provided_by),
            schedule_information: ::core::clone::Clone::clone(
                &self.schedule_information,
            ),
            status: ::core::clone::Clone::clone(&self.status),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            temporal: ::core::clone::Clone::clone(&self.temporal),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningOpportunity {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "admission_procedure",
            "application_deadline",
            "banner_image",
            "date_modified",
            "dc_type",
            "default_language",
            "description",
            "description_html",
            "duration",
            "grant",
            "has_part",
            "homepage",
            "id",
            "identifier",
            "is_part_of",
            "learning_achievement_specification",
            "learning_activity_specification",
            "learning_schedule",
            "location",
            "mode",
            "price_detail",
            "provided_by",
            "schedule_information",
            "status",
            "supplementary_document",
            "temporal",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.admission_procedure,
            &self.application_deadline,
            &self.banner_image,
            &self.date_modified,
            &self.dc_type,
            &self.default_language,
            &self.description,
            &self.description_html,
            &self.duration,
            &self.grant,
            &self.has_part,
            &self.homepage,
            &self.id,
            &self.identifier,
            &self.is_part_of,
            &self.learning_achievement_specification,
            &self.learning_activity_specification,
            &self.learning_schedule,
            &self.location,
            &self.mode,
            &self.price_detail,
            &self.provided_by,
            &self.schedule_information,
            &self.status,
            &self.supplementary_document,
            &self.temporal,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningOpportunity",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningOpportunity {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
                __field21,
                __field22,
                __field23,
                __field24,
                __field25,
                __field26,
                __field27,
                __field28,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        21u64 => _serde::__private::Ok(__Field::__field21),
                        22u64 => _serde::__private::Ok(__Field::__field22),
                        23u64 => _serde::__private::Ok(__Field::__field23),
                        24u64 => _serde::__private::Ok(__Field::__field24),
                        25u64 => _serde::__private::Ok(__Field::__field25),
                        26u64 => _serde::__private::Ok(__Field::__field26),
                        27u64 => _serde::__private::Ok(__Field::__field27),
                        28u64 => _serde::__private::Ok(__Field::__field28),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 29",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "admissionProcedure" => _serde::__private::Ok(__Field::__field1),
                        "applicationDeadline" => _serde::__private::Ok(__Field::__field2),
                        "bannerImage" => _serde::__private::Ok(__Field::__field3),
                        "dateModified" => _serde::__private::Ok(__Field::__field4),
                        "dcType" => _serde::__private::Ok(__Field::__field5),
                        "defaultLanguage" => _serde::__private::Ok(__Field::__field6),
                        "description" => _serde::__private::Ok(__Field::__field7),
                        "descriptionHtml" => _serde::__private::Ok(__Field::__field8),
                        "duration" => _serde::__private::Ok(__Field::__field9),
                        "grant" => _serde::__private::Ok(__Field::__field10),
                        "hasPart" => _serde::__private::Ok(__Field::__field11),
                        "homepage" => _serde::__private::Ok(__Field::__field12),
                        "id" => _serde::__private::Ok(__Field::__field13),
                        "identifier" => _serde::__private::Ok(__Field::__field14),
                        "isPartOf" => _serde::__private::Ok(__Field::__field15),
                        "learningAchievementSpecification" => {
                            _serde::__private::Ok(__Field::__field16)
                        }
                        "learningActivitySpecification" => {
                            _serde::__private::Ok(__Field::__field17)
                        }
                        "learningSchedule" => _serde::__private::Ok(__Field::__field18),
                        "location" => _serde::__private::Ok(__Field::__field19),
                        "mode" => _serde::__private::Ok(__Field::__field20),
                        "priceDetail" => _serde::__private::Ok(__Field::__field21),
                        "providedBy" => _serde::__private::Ok(__Field::__field22),
                        "scheduleInformation" => {
                            _serde::__private::Ok(__Field::__field23)
                        }
                        "status" => _serde::__private::Ok(__Field::__field24),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field25)
                        }
                        "temporal" => _serde::__private::Ok(__Field::__field26),
                        "title" => _serde::__private::Ok(__Field::__field27),
                        "type" => _serde::__private::Ok(__Field::__field28),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"admissionProcedure" => _serde::__private::Ok(__Field::__field1),
                        b"applicationDeadline" => {
                            _serde::__private::Ok(__Field::__field2)
                        }
                        b"bannerImage" => _serde::__private::Ok(__Field::__field3),
                        b"dateModified" => _serde::__private::Ok(__Field::__field4),
                        b"dcType" => _serde::__private::Ok(__Field::__field5),
                        b"defaultLanguage" => _serde::__private::Ok(__Field::__field6),
                        b"description" => _serde::__private::Ok(__Field::__field7),
                        b"descriptionHtml" => _serde::__private::Ok(__Field::__field8),
                        b"duration" => _serde::__private::Ok(__Field::__field9),
                        b"grant" => _serde::__private::Ok(__Field::__field10),
                        b"hasPart" => _serde::__private::Ok(__Field::__field11),
                        b"homepage" => _serde::__private::Ok(__Field::__field12),
                        b"id" => _serde::__private::Ok(__Field::__field13),
                        b"identifier" => _serde::__private::Ok(__Field::__field14),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field15),
                        b"learningAchievementSpecification" => {
                            _serde::__private::Ok(__Field::__field16)
                        }
                        b"learningActivitySpecification" => {
                            _serde::__private::Ok(__Field::__field17)
                        }
                        b"learningSchedule" => _serde::__private::Ok(__Field::__field18),
                        b"location" => _serde::__private::Ok(__Field::__field19),
                        b"mode" => _serde::__private::Ok(__Field::__field20),
                        b"priceDetail" => _serde::__private::Ok(__Field::__field21),
                        b"providedBy" => _serde::__private::Ok(__Field::__field22),
                        b"scheduleInformation" => {
                            _serde::__private::Ok(__Field::__field23)
                        }
                        b"status" => _serde::__private::Ok(__Field::__field24),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field25)
                        }
                        b"temporal" => _serde::__private::Ok(__Field::__field26),
                        b"title" => _serde::__private::Ok(__Field::__field27),
                        b"type" => _serde::__private::Ok(__Field::__field28),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningOpportunity>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningOpportunity;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningOpportunity",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<Note>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<DateTime<Utc>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<MediaObject>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<HtmlType>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<DurationType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Grant>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningOpportunity>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningOpportunity>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<LearningAchievementSpecificationOrQualification>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<LearningActivitySpecification>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Location>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<PriceDetail>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field22 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<Organisation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field23 = match _serde::de::SeqAccess::next_element::<
                        Option<Note>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field24 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field25 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field26 = match _serde::de::SeqAccess::next_element::<
                        Option<PeriodOfTime>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field27 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    27usize,
                                    &"struct LearningOpportunity with 29 elements",
                                ),
                            );
                        }
                    };
                    let __field28 = match _serde::de::SeqAccess::next_element::<
                        LearningOpportunityTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    28usize,
                                    &"struct LearningOpportunity with 29 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningOpportunity {
                        additional_note: __field0,
                        admission_procedure: __field1,
                        application_deadline: __field2,
                        banner_image: __field3,
                        date_modified: __field4,
                        dc_type: __field5,
                        default_language: __field6,
                        description: __field7,
                        description_html: __field8,
                        duration: __field9,
                        grant: __field10,
                        has_part: __field11,
                        homepage: __field12,
                        id: __field13,
                        identifier: __field14,
                        is_part_of: __field15,
                        learning_achievement_specification: __field16,
                        learning_activity_specification: __field17,
                        learning_schedule: __field18,
                        location: __field19,
                        mode: __field20,
                        price_detail: __field21,
                        provided_by: __field22,
                        schedule_information: __field23,
                        status: __field24,
                        supplementary_document: __field25,
                        temporal: __field26,
                        title: __field27,
                        type_: __field28,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<Note>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<DateTime<Utc>>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<MediaObject>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<OneOrMany<HtmlType>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<Option<DurationType>> = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<OneOrMany<Grant>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<OneOrMany<LearningOpportunity>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<OneOrMany<LearningOpportunity>>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<LearningAchievementSpecificationOrQualification>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<
                        Option<LearningActivitySpecification>,
                    > = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<
                        Option<OneOrMany<Location>>,
                    > = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field21: _serde::__private::Option<
                        Option<OneOrMany<PriceDetail>>,
                    > = _serde::__private::None;
                    let mut __field22: _serde::__private::Option<
                        Option<Box<Organisation>>,
                    > = _serde::__private::None;
                    let mut __field23: _serde::__private::Option<Option<Note>> = _serde::__private::None;
                    let mut __field24: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field25: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field26: _serde::__private::Option<Option<PeriodOfTime>> = _serde::__private::None;
                    let mut __field27: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field28: _serde::__private::Option<
                        LearningOpportunityTag,
                    > = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "admissionProcedure",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Note>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "applicationDeadline",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<DateTime<Utc>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "bannerImage",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<MediaObject>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "defaultLanguage",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "descriptionHtml",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<HtmlType>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "duration",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DurationType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("grant"),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Grant>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningOpportunity>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "homepage",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningOpportunity>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningAchievementSpecification",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LearningAchievementSpecificationOrQualification>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningActivitySpecification",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LearningActivitySpecification>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningSchedule",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Location>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("mode"),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field21 => {
                                if _serde::__private::Option::is_some(&__field21) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "priceDetail",
                                        ),
                                    );
                                }
                                __field21 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<PriceDetail>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field22 => {
                                if _serde::__private::Option::is_some(&__field22) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "providedBy",
                                        ),
                                    );
                                }
                                __field22 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<Organisation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field23 => {
                                if _serde::__private::Option::is_some(&__field23) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "scheduleInformation",
                                        ),
                                    );
                                }
                                __field23 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Note>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field24 => {
                                if _serde::__private::Option::is_some(&__field24) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                    );
                                }
                                __field24 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field25 => {
                                if _serde::__private::Option::is_some(&__field25) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field25 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field26 => {
                                if _serde::__private::Option::is_some(&__field26) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "temporal",
                                        ),
                                    );
                                }
                                __field26 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<PeriodOfTime>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field27 => {
                                if _serde::__private::Option::is_some(&__field27) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field27 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field28 => {
                                if _serde::__private::Option::is_some(&__field28) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field28 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningOpportunityTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match __field21 {
                        _serde::__private::Some(__field21) => __field21,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field22 = match __field22 {
                        _serde::__private::Some(__field22) => __field22,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field23 = match __field23 {
                        _serde::__private::Some(__field23) => __field23,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field24 = match __field24 {
                        _serde::__private::Some(__field24) => __field24,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field25 = match __field25 {
                        _serde::__private::Some(__field25) => __field25,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field26 = match __field26 {
                        _serde::__private::Some(__field26) => __field26,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field27 = match __field27 {
                        _serde::__private::Some(__field27) => __field27,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field28 = match __field28 {
                        _serde::__private::Some(__field28) => __field28,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningOpportunity {
                        additional_note: __field0,
                        admission_procedure: __field1,
                        application_deadline: __field2,
                        banner_image: __field3,
                        date_modified: __field4,
                        dc_type: __field5,
                        default_language: __field6,
                        description: __field7,
                        description_html: __field8,
                        duration: __field9,
                        grant: __field10,
                        has_part: __field11,
                        homepage: __field12,
                        id: __field13,
                        identifier: __field14,
                        is_part_of: __field15,
                        learning_achievement_specification: __field16,
                        learning_activity_specification: __field17,
                        learning_schedule: __field18,
                        location: __field19,
                        mode: __field20,
                        price_detail: __field21,
                        provided_by: __field22,
                        schedule_information: __field23,
                        status: __field24,
                        supplementary_document: __field25,
                        temporal: __field26,
                        title: __field27,
                        type_: __field28,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "admissionProcedure",
                "applicationDeadline",
                "bannerImage",
                "dateModified",
                "dcType",
                "defaultLanguage",
                "description",
                "descriptionHtml",
                "duration",
                "grant",
                "hasPart",
                "homepage",
                "id",
                "identifier",
                "isPartOf",
                "learningAchievementSpecification",
                "learningActivitySpecification",
                "learningSchedule",
                "location",
                "mode",
                "priceDetail",
                "providedBy",
                "scheduleInformation",
                "status",
                "supplementaryDocument",
                "temporal",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningOpportunity",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<LearningOpportunity>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningOpportunity {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningOpportunity",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.admission_procedure) { 0 } else { 1 }
                    + if Option::is_none(&self.application_deadline) { 0 } else { 1 }
                    + if Option::is_none(&self.banner_image) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.default_language) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.description_html) { 0 } else { 1 }
                    + if Option::is_none(&self.duration) { 0 } else { 1 }
                    + if Option::is_none(&self.grant) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.homepage) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_achievement_specification) {
                        0
                    } else {
                        1
                    }
                    + if Option::is_none(&self.learning_activity_specification) {
                        0
                    } else {
                        1
                    } + if Option::is_none(&self.learning_schedule) { 0 } else { 1 }
                    + if Option::is_none(&self.location) { 0 } else { 1 }
                    + if Option::is_none(&self.mode) { 0 } else { 1 }
                    + if Option::is_none(&self.price_detail) { 0 } else { 1 }
                    + if Option::is_none(&self.provided_by) { 0 } else { 1 }
                    + if Option::is_none(&self.schedule_information) { 0 } else { 1 }
                    + if Option::is_none(&self.status) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + if Option::is_none(&self.temporal) { 0 } else { 1 } + 1 + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.admission_procedure) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "admissionProcedure",
                    &self.admission_procedure,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "admissionProcedure",
                )?;
            }
            if !Option::is_none(&self.application_deadline) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "applicationDeadline",
                    &self.application_deadline,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "applicationDeadline",
                )?;
            }
            if !Option::is_none(&self.banner_image) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "bannerImage",
                    &self.banner_image,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "bannerImage",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.default_language) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "defaultLanguage",
                    &self.default_language,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "defaultLanguage",
                )?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.description_html) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "descriptionHtml",
                    &self.description_html,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "descriptionHtml",
                )?;
            }
            if !Option::is_none(&self.duration) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "duration",
                    &self.duration,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "duration",
                )?;
            }
            if !Option::is_none(&self.grant) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "grant",
                    &self.grant,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "grant")?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.homepage) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "homepage",
                    &self.homepage,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "homepage",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.learning_achievement_specification) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningAchievementSpecification",
                    &self.learning_achievement_specification,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningAchievementSpecification",
                )?;
            }
            if !Option::is_none(&self.learning_activity_specification) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningActivitySpecification",
                    &self.learning_activity_specification,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningActivitySpecification",
                )?;
            }
            if !Option::is_none(&self.learning_schedule) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningSchedule",
                    &self.learning_schedule,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningSchedule",
                )?;
            }
            if !Option::is_none(&self.location) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "location",
                    &self.location,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "location",
                )?;
            }
            if !Option::is_none(&self.mode) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "mode",
                    &self.mode,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "mode")?;
            }
            if !Option::is_none(&self.price_detail) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "priceDetail",
                    &self.price_detail,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "priceDetail",
                )?;
            }
            if !Option::is_none(&self.provided_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "providedBy",
                    &self.provided_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "providedBy",
                )?;
            }
            if !Option::is_none(&self.schedule_information) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "scheduleInformation",
                    &self.schedule_information,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "scheduleInformation",
                )?;
            }
            if !Option::is_none(&self.status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "status")?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            if !Option::is_none(&self.temporal) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "temporal",
                    &self.temporal,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "temporal",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningOpportunity {
    pub fn tag() -> LearningOpportunityTag {
        LearningOpportunityTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningOpportunityTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningOpportunityTag {
    #[inline]
    fn clone(&self) -> LearningOpportunityTag {
        LearningOpportunityTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningOpportunityTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningOpportunityTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningOpportunityTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningOpportunityTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningOpportunityTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningOpportunityTag {
    fn default() -> Self {
        Self("LearningOpportunity".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningOpportunityTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningOpportunity" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningOpportunity",
                ),
            )
        } else {
            Ok(LearningOpportunityTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LearningOutcome {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<IdentifierOrLegalIdentifier>,
    #[serde(
        rename = "relatedESCOSkill",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub related_esco_skill: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub related_skill: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reusability_level: Option<Concept>,
    pub title: LangKVPairs,
    #[serde(rename = "type")]
    pub type_: LearningOutcomeTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LearningOutcome {
    #[inline]
    fn clone(&self) -> LearningOutcome {
        LearningOutcome {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            related_esco_skill: ::core::clone::Clone::clone(&self.related_esco_skill),
            related_skill: ::core::clone::Clone::clone(&self.related_skill),
            reusability_level: ::core::clone::Clone::clone(&self.reusability_level),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningOutcome {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "dc_type",
            "id",
            "identifier",
            "related_esco_skill",
            "related_skill",
            "reusability_level",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.dc_type,
            &self.id,
            &self.identifier,
            &self.related_esco_skill,
            &self.related_skill,
            &self.reusability_level,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LearningOutcome",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LearningOutcome {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 9",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "dcType" => _serde::__private::Ok(__Field::__field1),
                        "id" => _serde::__private::Ok(__Field::__field2),
                        "identifier" => _serde::__private::Ok(__Field::__field3),
                        "relatedESCOSkill" => _serde::__private::Ok(__Field::__field4),
                        "relatedSkill" => _serde::__private::Ok(__Field::__field5),
                        "reusabilityLevel" => _serde::__private::Ok(__Field::__field6),
                        "title" => _serde::__private::Ok(__Field::__field7),
                        "type" => _serde::__private::Ok(__Field::__field8),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"dcType" => _serde::__private::Ok(__Field::__field1),
                        b"id" => _serde::__private::Ok(__Field::__field2),
                        b"identifier" => _serde::__private::Ok(__Field::__field3),
                        b"relatedESCOSkill" => _serde::__private::Ok(__Field::__field4),
                        b"relatedSkill" => _serde::__private::Ok(__Field::__field5),
                        b"reusabilityLevel" => _serde::__private::Ok(__Field::__field6),
                        b"title" => _serde::__private::Ok(__Field::__field7),
                        b"type" => _serde::__private::Ok(__Field::__field8),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LearningOutcome>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LearningOutcome;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LearningOutcome",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<IdentifierOrLegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct LearningOutcome with 9 elements",
                                ),
                            );
                        }
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        LearningOutcomeTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    8usize,
                                    &"struct LearningOutcome with 9 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LearningOutcome {
                        additional_note: __field0,
                        dc_type: __field1,
                        id: __field2,
                        identifier: __field3,
                        related_esco_skill: __field4,
                        related_skill: __field5,
                        reusability_level: __field6,
                        title: __field7,
                        type_: __field8,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<IdentifierOrLegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<LearningOutcomeTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IdentifierOrLegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "relatedESCOSkill",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "relatedSkill",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "reusabilityLevel",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LearningOutcomeTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LearningOutcome {
                        additional_note: __field0,
                        dc_type: __field1,
                        id: __field2,
                        identifier: __field3,
                        related_esco_skill: __field4,
                        related_skill: __field5,
                        reusability_level: __field6,
                        title: __field7,
                        type_: __field8,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "dcType",
                "id",
                "identifier",
                "relatedESCOSkill",
                "relatedSkill",
                "reusabilityLevel",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LearningOutcome",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<LearningOutcome>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningOutcome {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LearningOutcome",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.related_esco_skill) { 0 } else { 1 }
                    + if Option::is_none(&self.related_skill) { 0 } else { 1 }
                    + if Option::is_none(&self.reusability_level) { 0 } else { 1 } + 1
                    + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.related_esco_skill) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "relatedESCOSkill",
                    &self.related_esco_skill,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "relatedESCOSkill",
                )?;
            }
            if !Option::is_none(&self.related_skill) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "relatedSkill",
                    &self.related_skill,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "relatedSkill",
                )?;
            }
            if !Option::is_none(&self.reusability_level) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "reusabilityLevel",
                    &self.reusability_level,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "reusabilityLevel",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LearningOutcome {
    pub fn tag() -> LearningOutcomeTag {
        LearningOutcomeTag::default()
    }
}
/// Tag matching the struct name
pub struct LearningOutcomeTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LearningOutcomeTag {
    #[inline]
    fn clone(&self) -> LearningOutcomeTag {
        LearningOutcomeTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LearningOutcomeTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LearningOutcomeTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LearningOutcomeTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LearningOutcomeTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LearningOutcomeTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LearningOutcomeTag {
    fn default() -> Self {
        Self("LearningOutcome".to_string())
    }
}
impl<'de> Deserialize<'de> for LearningOutcomeTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LearningOutcome" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LearningOutcome",
                ),
            )
        } else {
            Ok(LearningOutcomeTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct LegalIdentifier {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub creator: Option<IriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_issued: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub notation: Literal,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme_agency: Option<LangKV>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme_id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme_version: Option<String>,
    pub spatial: Concept,
    #[serde(rename = "type")]
    pub type_: LegalIdentifierTag,
}
#[automatically_derived]
impl ::core::clone::Clone for LegalIdentifier {
    #[inline]
    fn clone(&self) -> LegalIdentifier {
        LegalIdentifier {
            creator: ::core::clone::Clone::clone(&self.creator),
            date_issued: ::core::clone::Clone::clone(&self.date_issued),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            id: ::core::clone::Clone::clone(&self.id),
            notation: ::core::clone::Clone::clone(&self.notation),
            scheme_agency: ::core::clone::Clone::clone(&self.scheme_agency),
            scheme_id: ::core::clone::Clone::clone(&self.scheme_id),
            scheme_name: ::core::clone::Clone::clone(&self.scheme_name),
            scheme_version: ::core::clone::Clone::clone(&self.scheme_version),
            spatial: ::core::clone::Clone::clone(&self.spatial),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LegalIdentifier {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "creator",
            "date_issued",
            "dc_type",
            "id",
            "notation",
            "scheme_agency",
            "scheme_id",
            "scheme_name",
            "scheme_version",
            "spatial",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.creator,
            &self.date_issued,
            &self.dc_type,
            &self.id,
            &self.notation,
            &self.scheme_agency,
            &self.scheme_id,
            &self.scheme_name,
            &self.scheme_version,
            &self.spatial,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "LegalIdentifier",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for LegalIdentifier {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 11",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "creator" => _serde::__private::Ok(__Field::__field0),
                        "dateIssued" => _serde::__private::Ok(__Field::__field1),
                        "dcType" => _serde::__private::Ok(__Field::__field2),
                        "id" => _serde::__private::Ok(__Field::__field3),
                        "notation" => _serde::__private::Ok(__Field::__field4),
                        "schemeAgency" => _serde::__private::Ok(__Field::__field5),
                        "schemeId" => _serde::__private::Ok(__Field::__field6),
                        "schemeName" => _serde::__private::Ok(__Field::__field7),
                        "schemeVersion" => _serde::__private::Ok(__Field::__field8),
                        "spatial" => _serde::__private::Ok(__Field::__field9),
                        "type" => _serde::__private::Ok(__Field::__field10),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"creator" => _serde::__private::Ok(__Field::__field0),
                        b"dateIssued" => _serde::__private::Ok(__Field::__field1),
                        b"dcType" => _serde::__private::Ok(__Field::__field2),
                        b"id" => _serde::__private::Ok(__Field::__field3),
                        b"notation" => _serde::__private::Ok(__Field::__field4),
                        b"schemeAgency" => _serde::__private::Ok(__Field::__field5),
                        b"schemeId" => _serde::__private::Ok(__Field::__field6),
                        b"schemeName" => _serde::__private::Ok(__Field::__field7),
                        b"schemeVersion" => _serde::__private::Ok(__Field::__field8),
                        b"spatial" => _serde::__private::Ok(__Field::__field9),
                        b"type" => _serde::__private::Ok(__Field::__field10),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<LegalIdentifier>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = LegalIdentifier;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct LegalIdentifier",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<IriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Literal,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct LegalIdentifier with 11 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKV>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    9usize,
                                    &"struct LegalIdentifier with 11 elements",
                                ),
                            );
                        }
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        LegalIdentifierTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    10usize,
                                    &"struct LegalIdentifier with 11 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(LegalIdentifier {
                        creator: __field0,
                        date_issued: __field1,
                        dc_type: __field2,
                        id: __field3,
                        notation: __field4,
                        scheme_agency: __field5,
                        scheme_id: __field6,
                        scheme_name: __field7,
                        scheme_version: __field8,
                        spatial: __field9,
                        type_: __field10,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<IriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Literal> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<LangKV>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<LegalIdentifierTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "creator",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateIssued",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "notation",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Literal>(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "schemeAgency",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKV>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "schemeId",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "schemeName",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "schemeVersion",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "spatial",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LegalIdentifierTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("notation")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("spatial")?
                        }
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(LegalIdentifier {
                        creator: __field0,
                        date_issued: __field1,
                        dc_type: __field2,
                        id: __field3,
                        notation: __field4,
                        scheme_agency: __field5,
                        scheme_id: __field6,
                        scheme_name: __field7,
                        scheme_version: __field8,
                        spatial: __field9,
                        type_: __field10,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "creator",
                "dateIssued",
                "dcType",
                "id",
                "notation",
                "schemeAgency",
                "schemeId",
                "schemeName",
                "schemeVersion",
                "spatial",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "LegalIdentifier",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<LegalIdentifier>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LegalIdentifier {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "LegalIdentifier",
                false as usize + if Option::is_none(&self.creator) { 0 } else { 1 }
                    + if Option::is_none(&self.date_issued) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.scheme_agency) { 0 } else { 1 }
                    + if Option::is_none(&self.scheme_id) { 0 } else { 1 }
                    + if Option::is_none(&self.scheme_name) { 0 } else { 1 }
                    + if Option::is_none(&self.scheme_version) { 0 } else { 1 } + 1 + 1,
            )?;
            if !Option::is_none(&self.creator) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "creator",
                    &self.creator,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "creator")?;
            }
            if !Option::is_none(&self.date_issued) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateIssued",
                    &self.date_issued,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateIssued",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "notation",
                &self.notation,
            )?;
            if !Option::is_none(&self.scheme_agency) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "schemeAgency",
                    &self.scheme_agency,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "schemeAgency",
                )?;
            }
            if !Option::is_none(&self.scheme_id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "schemeId",
                    &self.scheme_id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "schemeId",
                )?;
            }
            if !Option::is_none(&self.scheme_name) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "schemeName",
                    &self.scheme_name,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "schemeName",
                )?;
            }
            if !Option::is_none(&self.scheme_version) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "schemeVersion",
                    &self.scheme_version,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "schemeVersion",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "spatial",
                &self.spatial,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl LegalIdentifier {
    pub fn tag() -> LegalIdentifierTag {
        LegalIdentifierTag::default()
    }
}
/// Tag matching the struct name
pub struct LegalIdentifierTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LegalIdentifierTag {
    #[inline]
    fn clone(&self) -> LegalIdentifierTag {
        LegalIdentifierTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LegalIdentifierTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "LegalIdentifierTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LegalIdentifierTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LegalIdentifierTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LegalIdentifierTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LegalIdentifierTag {
    fn default() -> Self {
        Self("LegalIdentifier".to_string())
    }
}
impl<'de> Deserialize<'de> for LegalIdentifierTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "LegalIdentifier" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"LegalIdentifier",
                ),
            )
        } else {
            Ok(LegalIdentifierTag(val))
        }
    }
}
pub struct Literal(pub String);
#[automatically_derived]
impl ::core::clone::Clone for Literal {
    #[inline]
    fn clone(&self) -> Literal {
        Literal(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Literal {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Literal", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Literal {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Literal>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Literal;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "tuple struct Literal",
                    )
                }
                #[inline]
                fn visit_newtype_struct<__E>(
                    self,
                    __e: __E,
                ) -> _serde::__private::Result<Self::Value, __E::Error>
                where
                    __E: _serde::Deserializer<'de>,
                {
                    let __field0: String = <String as _serde::Deserialize>::deserialize(
                        __e,
                    )?;
                    _serde::__private::Ok(Literal(__field0))
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"tuple struct Literal with 1 element",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Literal(__field0))
                }
            }
            _serde::Deserializer::deserialize_newtype_struct(
                __deserializer,
                "Literal",
                __Visitor {
                    marker: _serde::__private::PhantomData::<Literal>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Literal {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "Literal",
                &self.0,
            )
        }
    }
};
impl std::ops::Deref for Literal {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Location {
    pub address: Option<OneOrMany<Address>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geographic_name: Option<OneOrMany<Address>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub geometry: Option<OneOrMany<Geometry>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<IdentifierOrLegalIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spatial_code: Option<OneOrMany<Concept>>,
    #[serde(rename = "type")]
    pub type_: LocationTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Location {
    #[inline]
    fn clone(&self) -> Location {
        Location {
            address: ::core::clone::Clone::clone(&self.address),
            description: ::core::clone::Clone::clone(&self.description),
            geographic_name: ::core::clone::Clone::clone(&self.geographic_name),
            geometry: ::core::clone::Clone::clone(&self.geometry),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            spatial_code: ::core::clone::Clone::clone(&self.spatial_code),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Location {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "address",
            "description",
            "geographic_name",
            "geometry",
            "id",
            "identifier",
            "spatial_code",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.address,
            &self.description,
            &self.geographic_name,
            &self.geometry,
            &self.id,
            &self.identifier,
            &self.spatial_code,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "Location", names, values)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Location {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 8",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "address" => _serde::__private::Ok(__Field::__field0),
                        "description" => _serde::__private::Ok(__Field::__field1),
                        "geographicName" => _serde::__private::Ok(__Field::__field2),
                        "geometry" => _serde::__private::Ok(__Field::__field3),
                        "id" => _serde::__private::Ok(__Field::__field4),
                        "identifier" => _serde::__private::Ok(__Field::__field5),
                        "spatialCode" => _serde::__private::Ok(__Field::__field6),
                        "type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"address" => _serde::__private::Ok(__Field::__field0),
                        b"description" => _serde::__private::Ok(__Field::__field1),
                        b"geographicName" => _serde::__private::Ok(__Field::__field2),
                        b"geometry" => _serde::__private::Ok(__Field::__field3),
                        b"id" => _serde::__private::Ok(__Field::__field4),
                        b"identifier" => _serde::__private::Ok(__Field::__field5),
                        b"spatialCode" => _serde::__private::Ok(__Field::__field6),
                        b"type" => _serde::__private::Ok(__Field::__field7),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Location>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Location;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Location",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Address>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct Location with 8 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Address>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Geometry>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<IdentifierOrLegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        LocationTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    7usize,
                                    &"struct Location with 8 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Location {
                        address: __field0,
                        description: __field1,
                        geographic_name: __field2,
                        geometry: __field3,
                        id: __field4,
                        identifier: __field5,
                        spatial_code: __field6,
                        type_: __field7,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Address>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<Address>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<Geometry>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<IdentifierOrLegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<LocationTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "address",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Address>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "geographicName",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Address>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "geometry",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Geometry>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IdentifierOrLegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "spatialCode",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LocationTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("address")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Location {
                        address: __field0,
                        description: __field1,
                        geographic_name: __field2,
                        geometry: __field3,
                        id: __field4,
                        identifier: __field5,
                        spatial_code: __field6,
                        type_: __field7,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "address",
                "description",
                "geographicName",
                "geometry",
                "id",
                "identifier",
                "spatialCode",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Location",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Location>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Location {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Location",
                false as usize + 1
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.geographic_name) { 0 } else { 1 }
                    + if Option::is_none(&self.geometry) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.spatial_code) { 0 } else { 1 } + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "address",
                &self.address,
            )?;
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.geographic_name) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "geographicName",
                    &self.geographic_name,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "geographicName",
                )?;
            }
            if !Option::is_none(&self.geometry) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "geometry",
                    &self.geometry,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "geometry",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.spatial_code) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "spatialCode",
                    &self.spatial_code,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "spatialCode",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Location {
    pub fn tag() -> LocationTag {
        LocationTag::default()
    }
}
/// Tag matching the struct name
pub struct LocationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for LocationTag {
    #[inline]
    fn clone(&self) -> LocationTag {
        LocationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LocationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "LocationTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LocationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LocationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for LocationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for LocationTag {
    fn default() -> Self {
        Self("Location".to_string())
    }
}
impl<'de> Deserialize<'de> for LocationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Location" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Location",
                ),
            )
        } else {
            Ok(LocationTag(val))
        }
    }
}
pub struct MailTo(String);
#[automatically_derived]
impl ::core::fmt::Debug for MailTo {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "MailTo", &&self.0)
    }
}
#[automatically_derived]
impl ::core::clone::Clone for MailTo {
    #[inline]
    fn clone(&self) -> MailTo {
        MailTo(::core::clone::Clone::clone(&self.0))
    }
}
impl ops::Deref for MailTo {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Serialize for MailTo {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(&self.0)
    }
}
impl<'de> Deserialize<'de> for MailTo {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: de::Deserializer<'de>,
    {
        let email_str = String::deserialize(deserializer)?;
        let mail_to_regex = regex::Regex::new(
                "^mailto:[^@]*[^\\.]@[^\\.]($|[^@]*[^\\.]$)",
            )
            .unwrap();
        if mail_to_regex.is_match(&email_str) {
            Ok(Self(email_str))
        } else {
            Err(
                de::Error::invalid_value(
                    de::Unexpected::Str(&email_str),
                    &"A valid email format",
                ),
            )
        }
    }
}
#[serde(untagged)]
pub enum Email {
    EmailAddress(EmailAddress),
    MailTo(MailTo),
}
#[automatically_derived]
impl ::core::clone::Clone for Email {
    #[inline]
    fn clone(&self) -> Email {
        match self {
            Email::EmailAddress(__self_0) => {
                Email::EmailAddress(::core::clone::Clone::clone(__self_0))
            }
            Email::MailTo(__self_0) => {
                Email::MailTo(::core::clone::Clone::clone(__self_0))
            }
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Email {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            Email::EmailAddress(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "EmailAddress",
                    &__self_0,
                )
            }
            Email::MailTo(__self_0) => {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "MailTo", &__self_0)
            }
        }
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Email {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            let __content = <_serde::__private::de::Content as _serde::Deserialize>::deserialize(
                __deserializer,
            )?;
            let __deserializer = _serde::__private::de::ContentRefDeserializer::<
                __D::Error,
            >::new(&__content);
            if let _serde::__private::Ok(__ok) = _serde::__private::Result::map(
                <EmailAddress as _serde::Deserialize>::deserialize(__deserializer),
                Email::EmailAddress,
            ) {
                return _serde::__private::Ok(__ok);
            }
            if let _serde::__private::Ok(__ok) = _serde::__private::Result::map(
                <MailTo as _serde::Deserialize>::deserialize(__deserializer),
                Email::MailTo,
            ) {
                return _serde::__private::Ok(__ok);
            }
            _serde::__private::Err(
                _serde::de::Error::custom(
                    "data did not match any variant of untagged enum Email",
                ),
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Email {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                Email::EmailAddress(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
                Email::MailTo(ref __field0) => {
                    _serde::Serialize::serialize(__field0, __serializer)
                }
            }
        }
    }
};
#[serde(deny_unknown_fields)]
pub struct Mailbox {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<Email>,
    #[serde(rename = "type")]
    pub type_: MailboxTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Mailbox {
    #[inline]
    fn clone(&self) -> Mailbox {
        Mailbox {
            id: ::core::clone::Clone::clone(&self.id),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Mailbox {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field2_finish(
            f,
            "Mailbox",
            "id",
            &self.id,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Mailbox {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 2",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Mailbox>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Mailbox;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Mailbox",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<Email>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        MailboxTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct Mailbox with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Mailbox {
                        id: __field0,
                        type_: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<Email>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<MailboxTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Email>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<MailboxTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Mailbox {
                        id: __field0,
                        type_: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Mailbox",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Mailbox>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Mailbox {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Mailbox",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Mailbox {
    pub fn tag() -> MailboxTag {
        MailboxTag::default()
    }
}
/// Tag matching the struct name
pub struct MailboxTag(String);
#[automatically_derived]
impl ::core::clone::Clone for MailboxTag {
    #[inline]
    fn clone(&self) -> MailboxTag {
        MailboxTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for MailboxTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "MailboxTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for MailboxTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "MailboxTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for MailboxTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for MailboxTag {
    fn default() -> Self {
        Self("Mailbox".to_string())
    }
}
impl<'de> Deserialize<'de> for MailboxTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Mailbox" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Mailbox",
                ),
            )
        } else {
            Ok(MailboxTag(val))
        }
    }
}
pub struct LangKVPairs(HashMap<LangKey, serde_json::Value>);
#[automatically_derived]
impl ::core::clone::Clone for LangKVPairs {
    #[inline]
    fn clone(&self) -> LangKVPairs {
        LangKVPairs(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LangKVPairs {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "LangKVPairs", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LangKVPairs {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LangKVPairs",
                &self.0,
            )
        }
    }
};
impl LangKVPairs {
    pub fn new(kv_pairs: HashMap<LangKey, serde_json::Value>) -> Option<Self> {
        if !kv_pairs.is_empty() { Some(LangKVPairs(kv_pairs)) } else { None }
    }
}
impl std::ops::Deref for LangKVPairs {
    type Target = std::collections::HashMap<LangKey, serde_json::Value>;
    fn deref(&self) -> &std::collections::HashMap<LangKey, serde_json::Value> {
        &self.0
    }
}
impl<'de> Deserialize<'de> for LangKVPairs {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: de::Deserializer<'de>,
    {
        let kv_pairs = HashMap::deserialize(deserializer)?;
        if let Some(lang_kv_pairs) = LangKVPairs::new(kv_pairs) {
            Ok(lang_kv_pairs)
        } else {
            Err(
                <D::Error as serde::de::Error>::missing_field(
                    "Requires at least one lang pair",
                ),
            )
        }
    }
}
pub struct LangKey(String);
#[automatically_derived]
impl ::core::clone::Clone for LangKey {
    #[inline]
    fn clone(&self) -> LangKey {
        LangKey(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for LangKey {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "LangKey", &&self.0)
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for LangKey {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<String>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for LangKey {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for LangKey {
    #[inline]
    fn cmp(&self, other: &LangKey) -> ::core::cmp::Ordering {
        ::core::cmp::Ord::cmp(&self.0, &other.0)
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for LangKey {}
#[automatically_derived]
impl ::core::cmp::PartialEq for LangKey {
    #[inline]
    fn eq(&self, other: &LangKey) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for LangKey {
    #[inline]
    fn partial_cmp(
        &self,
        other: &LangKey,
    ) -> ::core::option::Option<::core::cmp::Ordering> {
        ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for LangKey {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "LangKey",
                &self.0,
            )
        }
    }
};
impl std::ops::Deref for LangKey {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl std::str::FromStr for LangKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        let regex_str = "^(aa|ab|ae|af|ak|am|an|ar|as|av|ay|az|ba|be|bg|bh|bi|bm|bn|bo|br|bs|ca|ce|ch|co|cr|cs|cu|cv|cy|da|de|dv|dz|ee|el|en|eo|es|et|eu|fa|ff|fi|fj|fo|fr|fy|ga|gd|gl|gn|gu|gv|ha|he|hi|ho|hr|ht|hu|hy|hz|ia|id|ie|ig|ii|ik|in|io|is|it|iu|iw|ja|ji|jv|jw|ka|kg|ki|kj|kk|kl|km|kn|ko|kr|ks|ku|kv|kw|ky|la|lb|lg|li|ln|lo|lt|lu|lv|mg|mh|mi|mk|ml|mn|mo|mr|ms|mt|my|na|nb|nd|ne|ng|nl|nn|no|nr|nv|ny|oc|oj|om|or|os|pa|pi|pl|ps|pt|qu|rm|rn|ro|ru|rw|sa|sc|sd|se|sg|sh|si|sk|sl|sm|sn|so|sq|sr|ss|st|su|sv|sw|ta|te|tg|th|ti|tk|tl|tn|to|tr|ts|tt|tw|ty|ug|uk|ur|uz|ve|vi|vo|wa|wo|xh|yi|yo|za|zh|zu)$";
        if regex::Regex::new(regex_str).unwrap().is_match(value) {
            Ok(Self(value.to_string()))
        } else {
            Err(
                {
                    let res = ::alloc::fmt::format(
                        format_args!("Doesn\'t match the pattern: \"{0}\"", value),
                    );
                    res
                }
                    .into(),
            )
        }
    }
}
impl<'de> serde::Deserialize<'de> for LangKey {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| <D::Error as serde::de::Error>::custom(
                e.to_string(),
            ))
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct MediaObject {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attachment_type: Option<Concept>,
    pub content: String,
    pub content_encoding: Concept,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_size: Option<i64>,
    pub content_type: Concept,
    #[serde(rename = "contentURL", default, skip_serializing_if = "Option::is_none")]
    pub content_url: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<LangKVPairs>,
    #[serde(rename = "type")]
    pub type_: MediaObjectTag,
}
#[automatically_derived]
impl ::core::clone::Clone for MediaObject {
    #[inline]
    fn clone(&self) -> MediaObject {
        MediaObject {
            attachment_type: ::core::clone::Clone::clone(&self.attachment_type),
            content: ::core::clone::Clone::clone(&self.content),
            content_encoding: ::core::clone::Clone::clone(&self.content_encoding),
            content_size: ::core::clone::Clone::clone(&self.content_size),
            content_type: ::core::clone::Clone::clone(&self.content_type),
            content_url: ::core::clone::Clone::clone(&self.content_url),
            description: ::core::clone::Clone::clone(&self.description),
            id: ::core::clone::Clone::clone(&self.id),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for MediaObject {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "attachment_type",
            "content",
            "content_encoding",
            "content_size",
            "content_type",
            "content_url",
            "description",
            "id",
            "title",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.attachment_type,
            &self.content,
            &self.content_encoding,
            &self.content_size,
            &self.content_type,
            &self.content_url,
            &self.description,
            &self.id,
            &self.title,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "MediaObject",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for MediaObject {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 10",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "attachmentType" => _serde::__private::Ok(__Field::__field0),
                        "content" => _serde::__private::Ok(__Field::__field1),
                        "contentEncoding" => _serde::__private::Ok(__Field::__field2),
                        "contentSize" => _serde::__private::Ok(__Field::__field3),
                        "contentType" => _serde::__private::Ok(__Field::__field4),
                        "contentURL" => _serde::__private::Ok(__Field::__field5),
                        "description" => _serde::__private::Ok(__Field::__field6),
                        "id" => _serde::__private::Ok(__Field::__field7),
                        "title" => _serde::__private::Ok(__Field::__field8),
                        "type" => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"attachmentType" => _serde::__private::Ok(__Field::__field0),
                        b"content" => _serde::__private::Ok(__Field::__field1),
                        b"contentEncoding" => _serde::__private::Ok(__Field::__field2),
                        b"contentSize" => _serde::__private::Ok(__Field::__field3),
                        b"contentType" => _serde::__private::Ok(__Field::__field4),
                        b"contentURL" => _serde::__private::Ok(__Field::__field5),
                        b"description" => _serde::__private::Ok(__Field::__field6),
                        b"id" => _serde::__private::Ok(__Field::__field7),
                        b"title" => _serde::__private::Ok(__Field::__field8),
                        b"type" => _serde::__private::Ok(__Field::__field9),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<MediaObject>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = MediaObject;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct MediaObject",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct MediaObject with 10 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct MediaObject with 10 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<i64>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct MediaObject with 10 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        MediaObjectTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    9usize,
                                    &"struct MediaObject with 10 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(MediaObject {
                        attachment_type: __field0,
                        content: __field1,
                        content_encoding: __field2,
                        content_size: __field3,
                        content_type: __field4,
                        content_url: __field5,
                        description: __field6,
                        id: __field7,
                        title: __field8,
                        type_: __field9,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<MediaObjectTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "attachmentType",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "content",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contentEncoding",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contentSize",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<i64>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contentType",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contentURL",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        MediaObjectTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("content")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("contentEncoding")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("contentType")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(MediaObject {
                        attachment_type: __field0,
                        content: __field1,
                        content_encoding: __field2,
                        content_size: __field3,
                        content_type: __field4,
                        content_url: __field5,
                        description: __field6,
                        id: __field7,
                        title: __field8,
                        type_: __field9,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "attachmentType",
                "content",
                "contentEncoding",
                "contentSize",
                "contentType",
                "contentURL",
                "description",
                "id",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "MediaObject",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<MediaObject>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for MediaObject {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "MediaObject",
                false as usize
                    + if Option::is_none(&self.attachment_type) { 0 } else { 1 } + 1 + 1
                    + if Option::is_none(&self.content_size) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.content_url) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.title) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.attachment_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "attachmentType",
                    &self.attachment_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "attachmentType",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "content",
                &self.content,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "contentEncoding",
                &self.content_encoding,
            )?;
            if !Option::is_none(&self.content_size) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contentSize",
                    &self.content_size,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contentSize",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "contentType",
                &self.content_type,
            )?;
            if !Option::is_none(&self.content_url) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contentURL",
                    &self.content_url,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contentURL",
                )?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.title) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "title",
                    &self.title,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "title")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl MediaObject {
    pub fn tag() -> MediaObjectTag {
        MediaObjectTag::default()
    }
}
/// Tag matching the struct name
pub struct MediaObjectTag(String);
#[automatically_derived]
impl ::core::clone::Clone for MediaObjectTag {
    #[inline]
    fn clone(&self) -> MediaObjectTag {
        MediaObjectTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for MediaObjectTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "MediaObjectTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for MediaObjectTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "MediaObjectTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for MediaObjectTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for MediaObjectTag {
    fn default() -> Self {
        Self("MediaObject".to_string())
    }
}
impl<'de> Deserialize<'de> for MediaObjectTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "MediaObject" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"MediaObject",
                ),
            )
        } else {
            Ok(MediaObjectTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Note {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub note_format: Option<Concept>,
    pub note_literal: LangKVPairs,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<Concept>,
    #[serde(rename = "type")]
    pub type_: NoteTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Note {
    #[inline]
    fn clone(&self) -> Note {
        Note {
            id: ::core::clone::Clone::clone(&self.id),
            note_format: ::core::clone::Clone::clone(&self.note_format),
            note_literal: ::core::clone::Clone::clone(&self.note_literal),
            subject: ::core::clone::Clone::clone(&self.subject),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Note {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field5_finish(
            f,
            "Note",
            "id",
            &self.id,
            "note_format",
            &self.note_format,
            "note_literal",
            &self.note_literal,
            "subject",
            &self.subject,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Note {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 5",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "noteFormat" => _serde::__private::Ok(__Field::__field1),
                        "noteLiteral" => _serde::__private::Ok(__Field::__field2),
                        "subject" => _serde::__private::Ok(__Field::__field3),
                        "type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"noteFormat" => _serde::__private::Ok(__Field::__field1),
                        b"noteLiteral" => _serde::__private::Ok(__Field::__field2),
                        b"subject" => _serde::__private::Ok(__Field::__field3),
                        b"type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Note>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Note;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Note")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct Note with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        NoteTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct Note with 5 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Note {
                        id: __field0,
                        note_format: __field1,
                        note_literal: __field2,
                        subject: __field3,
                        type_: __field4,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<NoteTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "noteFormat",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "noteLiteral",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "subject",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<NoteTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("noteLiteral")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Note {
                        id: __field0,
                        note_format: __field1,
                        note_literal: __field2,
                        subject: __field3,
                        type_: __field4,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "id",
                "noteFormat",
                "noteLiteral",
                "subject",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Note",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Note>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Note {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Note",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.note_format) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.subject) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.note_format) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "noteFormat",
                    &self.note_format,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "noteFormat",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "noteLiteral",
                &self.note_literal,
            )?;
            if !Option::is_none(&self.subject) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "subject",
                    &self.subject,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "subject")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Note {
    pub fn tag() -> NoteTag {
        NoteTag::default()
    }
}
/// Tag matching the struct name
pub struct NoteTag(String);
#[automatically_derived]
impl ::core::clone::Clone for NoteTag {
    #[inline]
    fn clone(&self) -> NoteTag {
        NoteTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for NoteTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "NoteTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for NoteTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "NoteTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for NoteTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for NoteTag {
    fn default() -> Self {
        Self("Note".to_string())
    }
}
impl<'de> Deserialize<'de> for NoteTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Note" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Note",
                ),
            )
        } else {
            Ok(NoteTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Organisation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accreditation: Option<OneOrMany<Accreditation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alt_label: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contact_point: Option<OneOrMany<ContactPoint>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(
        rename = "eIDASIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub e_idas_identifier: Option<LegalIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_member_of: Option<OneOrMany<Group>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_member: Option<OneOrMany<Person>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_sub_organization: Option<Box<OneOrMany<Organisation>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    pub legal_name: LangKVPairs,
    pub location: OneOrMany<Location>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logo: Option<MediaObject>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub registration: Option<LegalIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sub_organization_of: Option<Box<Organisation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tax_identifier: Option<OneOrMany<LegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vat_identifier: Option<OneOrMany<LegalIdentifier>>,
    #[serde(rename = "type")]
    pub type_: OrganisationTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Organisation {
    #[inline]
    fn clone(&self) -> Organisation {
        Organisation {
            accreditation: ::core::clone::Clone::clone(&self.accreditation),
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            alt_label: ::core::clone::Clone::clone(&self.alt_label),
            contact_point: ::core::clone::Clone::clone(&self.contact_point),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            e_idas_identifier: ::core::clone::Clone::clone(&self.e_idas_identifier),
            group_member_of: ::core::clone::Clone::clone(&self.group_member_of),
            has_member: ::core::clone::Clone::clone(&self.has_member),
            has_sub_organization: ::core::clone::Clone::clone(
                &self.has_sub_organization,
            ),
            homepage: ::core::clone::Clone::clone(&self.homepage),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            legal_name: ::core::clone::Clone::clone(&self.legal_name),
            location: ::core::clone::Clone::clone(&self.location),
            logo: ::core::clone::Clone::clone(&self.logo),
            registration: ::core::clone::Clone::clone(&self.registration),
            sub_organization_of: ::core::clone::Clone::clone(&self.sub_organization_of),
            tax_identifier: ::core::clone::Clone::clone(&self.tax_identifier),
            vat_identifier: ::core::clone::Clone::clone(&self.vat_identifier),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Organisation {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "accreditation",
            "additional_note",
            "alt_label",
            "contact_point",
            "date_modified",
            "dc_type",
            "e_idas_identifier",
            "group_member_of",
            "has_member",
            "has_sub_organization",
            "homepage",
            "id",
            "identifier",
            "legal_name",
            "location",
            "logo",
            "registration",
            "sub_organization_of",
            "tax_identifier",
            "vat_identifier",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.accreditation,
            &self.additional_note,
            &self.alt_label,
            &self.contact_point,
            &self.date_modified,
            &self.dc_type,
            &self.e_idas_identifier,
            &self.group_member_of,
            &self.has_member,
            &self.has_sub_organization,
            &self.homepage,
            &self.id,
            &self.identifier,
            &self.legal_name,
            &self.location,
            &self.logo,
            &self.registration,
            &self.sub_organization_of,
            &self.tax_identifier,
            &self.vat_identifier,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "Organisation",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Organisation {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 21",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "accreditation" => _serde::__private::Ok(__Field::__field0),
                        "additionalNote" => _serde::__private::Ok(__Field::__field1),
                        "altLabel" => _serde::__private::Ok(__Field::__field2),
                        "contactPoint" => _serde::__private::Ok(__Field::__field3),
                        "dateModified" => _serde::__private::Ok(__Field::__field4),
                        "dcType" => _serde::__private::Ok(__Field::__field5),
                        "eIDASIdentifier" => _serde::__private::Ok(__Field::__field6),
                        "groupMemberOf" => _serde::__private::Ok(__Field::__field7),
                        "hasMember" => _serde::__private::Ok(__Field::__field8),
                        "hasSubOrganization" => _serde::__private::Ok(__Field::__field9),
                        "homepage" => _serde::__private::Ok(__Field::__field10),
                        "id" => _serde::__private::Ok(__Field::__field11),
                        "identifier" => _serde::__private::Ok(__Field::__field12),
                        "legalName" => _serde::__private::Ok(__Field::__field13),
                        "location" => _serde::__private::Ok(__Field::__field14),
                        "logo" => _serde::__private::Ok(__Field::__field15),
                        "registration" => _serde::__private::Ok(__Field::__field16),
                        "subOrganizationOf" => _serde::__private::Ok(__Field::__field17),
                        "taxIdentifier" => _serde::__private::Ok(__Field::__field18),
                        "vatIdentifier" => _serde::__private::Ok(__Field::__field19),
                        "type" => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"accreditation" => _serde::__private::Ok(__Field::__field0),
                        b"additionalNote" => _serde::__private::Ok(__Field::__field1),
                        b"altLabel" => _serde::__private::Ok(__Field::__field2),
                        b"contactPoint" => _serde::__private::Ok(__Field::__field3),
                        b"dateModified" => _serde::__private::Ok(__Field::__field4),
                        b"dcType" => _serde::__private::Ok(__Field::__field5),
                        b"eIDASIdentifier" => _serde::__private::Ok(__Field::__field6),
                        b"groupMemberOf" => _serde::__private::Ok(__Field::__field7),
                        b"hasMember" => _serde::__private::Ok(__Field::__field8),
                        b"hasSubOrganization" => _serde::__private::Ok(__Field::__field9),
                        b"homepage" => _serde::__private::Ok(__Field::__field10),
                        b"id" => _serde::__private::Ok(__Field::__field11),
                        b"identifier" => _serde::__private::Ok(__Field::__field12),
                        b"legalName" => _serde::__private::Ok(__Field::__field13),
                        b"location" => _serde::__private::Ok(__Field::__field14),
                        b"logo" => _serde::__private::Ok(__Field::__field15),
                        b"registration" => _serde::__private::Ok(__Field::__field16),
                        b"subOrganizationOf" => _serde::__private::Ok(__Field::__field17),
                        b"taxIdentifier" => _serde::__private::Ok(__Field::__field18),
                        b"vatIdentifier" => _serde::__private::Ok(__Field::__field19),
                        b"type" => _serde::__private::Ok(__Field::__field20),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Organisation>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Organisation;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Organisation",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Accreditation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<ContactPoint>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<LegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Group>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Person>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<Organisation>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    13usize,
                                    &"struct Organisation with 21 elements",
                                ),
                            );
                        }
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        OneOrMany<Location>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    14usize,
                                    &"struct Organisation with 21 elements",
                                ),
                            );
                        }
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<MediaObject>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<LegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<Organisation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        OrganisationTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    20usize,
                                    &"struct Organisation with 21 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Organisation {
                        accreditation: __field0,
                        additional_note: __field1,
                        alt_label: __field2,
                        contact_point: __field3,
                        date_modified: __field4,
                        dc_type: __field5,
                        e_idas_identifier: __field6,
                        group_member_of: __field7,
                        has_member: __field8,
                        has_sub_organization: __field9,
                        homepage: __field10,
                        id: __field11,
                        identifier: __field12,
                        legal_name: __field13,
                        location: __field14,
                        logo: __field15,
                        registration: __field16,
                        sub_organization_of: __field17,
                        tax_identifier: __field18,
                        vat_identifier: __field19,
                        type_: __field20,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Accreditation>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<ContactPoint>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<
                        Option<LegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<
                        Option<OneOrMany<Group>>,
                    > = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<
                        Option<OneOrMany<Person>>,
                    > = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<Box<OneOrMany<Organisation>>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<OneOrMany<Location>> = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<Option<MediaObject>> = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<LegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<
                        Option<Box<Organisation>>,
                    > = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<
                        Option<OneOrMany<LegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<
                        Option<OneOrMany<LegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<OrganisationTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "accreditation",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Accreditation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "altLabel",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contactPoint",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<ContactPoint>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "eIDASIdentifier",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "groupMemberOf",
                                        ),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Group>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasMember",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Person>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasSubOrganization",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<Organisation>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "homepage",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "legalName",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OneOrMany<Location>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("logo"),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<MediaObject>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "registration",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "subOrganizationOf",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<Organisation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "taxIdentifier",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "vatIdentifier",
                                        ),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        OrganisationTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("legalName")?
                        }
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("location")?
                        }
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Organisation {
                        accreditation: __field0,
                        additional_note: __field1,
                        alt_label: __field2,
                        contact_point: __field3,
                        date_modified: __field4,
                        dc_type: __field5,
                        e_idas_identifier: __field6,
                        group_member_of: __field7,
                        has_member: __field8,
                        has_sub_organization: __field9,
                        homepage: __field10,
                        id: __field11,
                        identifier: __field12,
                        legal_name: __field13,
                        location: __field14,
                        logo: __field15,
                        registration: __field16,
                        sub_organization_of: __field17,
                        tax_identifier: __field18,
                        vat_identifier: __field19,
                        type_: __field20,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "accreditation",
                "additionalNote",
                "altLabel",
                "contactPoint",
                "dateModified",
                "dcType",
                "eIDASIdentifier",
                "groupMemberOf",
                "hasMember",
                "hasSubOrganization",
                "homepage",
                "id",
                "identifier",
                "legalName",
                "location",
                "logo",
                "registration",
                "subOrganizationOf",
                "taxIdentifier",
                "vatIdentifier",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Organisation",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Organisation>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Organisation {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Organisation",
                false as usize + if Option::is_none(&self.accreditation) { 0 } else { 1 }
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.alt_label) { 0 } else { 1 }
                    + if Option::is_none(&self.contact_point) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.e_idas_identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.group_member_of) { 0 } else { 1 }
                    + if Option::is_none(&self.has_member) { 0 } else { 1 }
                    + if Option::is_none(&self.has_sub_organization) { 0 } else { 1 }
                    + if Option::is_none(&self.homepage) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 } + 1 + 1
                    + if Option::is_none(&self.logo) { 0 } else { 1 }
                    + if Option::is_none(&self.registration) { 0 } else { 1 }
                    + if Option::is_none(&self.sub_organization_of) { 0 } else { 1 }
                    + if Option::is_none(&self.tax_identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.vat_identifier) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.accreditation) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "accreditation",
                    &self.accreditation,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "accreditation",
                )?;
            }
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.alt_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "altLabel",
                    &self.alt_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "altLabel",
                )?;
            }
            if !Option::is_none(&self.contact_point) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contactPoint",
                    &self.contact_point,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contactPoint",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.e_idas_identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "eIDASIdentifier",
                    &self.e_idas_identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "eIDASIdentifier",
                )?;
            }
            if !Option::is_none(&self.group_member_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "groupMemberOf",
                    &self.group_member_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "groupMemberOf",
                )?;
            }
            if !Option::is_none(&self.has_member) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasMember",
                    &self.has_member,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "hasMember",
                )?;
            }
            if !Option::is_none(&self.has_sub_organization) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasSubOrganization",
                    &self.has_sub_organization,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "hasSubOrganization",
                )?;
            }
            if !Option::is_none(&self.homepage) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "homepage",
                    &self.homepage,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "homepage",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "legalName",
                &self.legal_name,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "location",
                &self.location,
            )?;
            if !Option::is_none(&self.logo) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "logo",
                    &self.logo,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "logo")?;
            }
            if !Option::is_none(&self.registration) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "registration",
                    &self.registration,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "registration",
                )?;
            }
            if !Option::is_none(&self.sub_organization_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "subOrganizationOf",
                    &self.sub_organization_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "subOrganizationOf",
                )?;
            }
            if !Option::is_none(&self.tax_identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "taxIdentifier",
                    &self.tax_identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "taxIdentifier",
                )?;
            }
            if !Option::is_none(&self.vat_identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "vatIdentifier",
                    &self.vat_identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "vatIdentifier",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Organisation {
    pub fn tag() -> OrganisationTag {
        OrganisationTag::default()
    }
}
/// Tag matching the struct name
pub struct OrganisationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for OrganisationTag {
    #[inline]
    fn clone(&self) -> OrganisationTag {
        OrganisationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for OrganisationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "OrganisationTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for OrganisationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "OrganisationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for OrganisationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for OrganisationTag {
    fn default() -> Self {
        Self("Organisation".to_string())
    }
}
impl<'de> Deserialize<'de> for OrganisationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Organisation" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Organisation",
                ),
            )
        } else {
            Ok(OrganisationTag(val))
        }
    }
}
pub struct Percentage(u32);
#[automatically_derived]
impl ::core::clone::Clone for Percentage {
    #[inline]
    fn clone(&self) -> Percentage {
        Percentage(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Percentage {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Percentage", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Percentage {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "Percentage",
                &self.0,
            )
        }
    }
};
impl Percentage {
    /// Returns None if num > 100
    pub fn new(num: u32) -> Option<Self> {
        if num <= 100 { Some(Self(num)) } else { None }
    }
}
impl ops::Deref for Percentage {
    type Target = u32;
    fn deref(&self) -> &u32 {
        &self.0
    }
}
impl<'de> Deserialize<'de> for Percentage {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: de::Deserializer<'de>,
    {
        let num = u32::deserialize(deserializer)?;
        if let Some(percentage) = Self::new(num) {
            Ok(percentage)
        } else {
            Err(
                <D::Error as serde::de::Error>::invalid_value(
                    de::Unexpected::Unsigned(num.into()),
                    &"A number between 0 and 100",
                ),
            )
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct PeriodOfTime {
    #[serde(rename = "endDate", default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(rename = "prefLabel", default, skip_serializing_if = "Option::is_none")]
    pub pref_label: Option<LangKVPairs>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<DateTime<Utc>>,
    #[serde(rename = "type")]
    pub type_: PeriodOfTimeTag,
}
#[automatically_derived]
impl ::core::clone::Clone for PeriodOfTime {
    #[inline]
    fn clone(&self) -> PeriodOfTime {
        PeriodOfTime {
            end_date: ::core::clone::Clone::clone(&self.end_date),
            id: ::core::clone::Clone::clone(&self.id),
            pref_label: ::core::clone::Clone::clone(&self.pref_label),
            start_date: ::core::clone::Clone::clone(&self.start_date),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for PeriodOfTime {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field5_finish(
            f,
            "PeriodOfTime",
            "end_date",
            &self.end_date,
            "id",
            &self.id,
            "pref_label",
            &self.pref_label,
            "start_date",
            &self.start_date,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for PeriodOfTime {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 5",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "endDate" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "prefLabel" => _serde::__private::Ok(__Field::__field2),
                        "startDate" => _serde::__private::Ok(__Field::__field3),
                        "type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"endDate" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"prefLabel" => _serde::__private::Ok(__Field::__field2),
                        b"startDate" => _serde::__private::Ok(__Field::__field3),
                        b"type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<PeriodOfTime>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = PeriodOfTime;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct PeriodOfTime",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        PeriodOfTimeTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct PeriodOfTime with 5 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(PeriodOfTime {
                        end_date: __field0,
                        id: __field1,
                        pref_label: __field2,
                        start_date: __field3,
                        type_: __field4,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<PeriodOfTimeTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "endDate",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "prefLabel",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "startDate",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        PeriodOfTimeTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(PeriodOfTime {
                        end_date: __field0,
                        id: __field1,
                        pref_label: __field2,
                        start_date: __field3,
                        type_: __field4,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "endDate",
                "id",
                "prefLabel",
                "startDate",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "PeriodOfTime",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<PeriodOfTime>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for PeriodOfTime {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "PeriodOfTime",
                false as usize + if Option::is_none(&self.end_date) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.pref_label) { 0 } else { 1 }
                    + if Option::is_none(&self.start_date) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.end_date) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "endDate",
                    &self.end_date,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "endDate")?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.pref_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "prefLabel",
                    &self.pref_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "prefLabel",
                )?;
            }
            if !Option::is_none(&self.start_date) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "startDate",
                    &self.start_date,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "startDate",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl PeriodOfTime {
    pub fn tag() -> PeriodOfTimeTag {
        PeriodOfTimeTag::default()
    }
}
/// Tag matching the struct name
pub struct PeriodOfTimeTag(String);
#[automatically_derived]
impl ::core::clone::Clone for PeriodOfTimeTag {
    #[inline]
    fn clone(&self) -> PeriodOfTimeTag {
        PeriodOfTimeTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for PeriodOfTimeTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "PeriodOfTimeTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for PeriodOfTimeTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "PeriodOfTimeTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for PeriodOfTimeTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for PeriodOfTimeTag {
    fn default() -> Self {
        Self("PeriodOfTime".to_string())
    }
}
impl<'de> Deserialize<'de> for PeriodOfTimeTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "PeriodOfTime" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"PeriodOfTime",
                ),
            )
        } else {
            Ok(PeriodOfTimeTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Person {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub birth_name: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub citizenship_country: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contact_point: Option<OneOrMany<ContactPoint>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_of_birth: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub family_name: Option<LangKV>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub full_name: Option<LangKV>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gender: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub given_name: Option<LangKV>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group_member_of: Option<OneOrMany<Group>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_claim: Option<OneOrMany<ClaimNode>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_credential: Option<OneOrMany<EuropeanDigitalCredential>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Location>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub member_of: Option<Box<OneOrMany<Organisation>>>,
    #[serde(rename = "nationalID", default, skip_serializing_if = "Option::is_none")]
    pub national_id: Option<LegalIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patronymic_name: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub place_of_birth: Option<Location>,
    #[serde(rename = "type")]
    pub type_: PersonTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Person {
    #[inline]
    fn clone(&self) -> Person {
        Person {
            birth_name: ::core::clone::Clone::clone(&self.birth_name),
            citizenship_country: ::core::clone::Clone::clone(&self.citizenship_country),
            contact_point: ::core::clone::Clone::clone(&self.contact_point),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            date_of_birth: ::core::clone::Clone::clone(&self.date_of_birth),
            family_name: ::core::clone::Clone::clone(&self.family_name),
            full_name: ::core::clone::Clone::clone(&self.full_name),
            gender: ::core::clone::Clone::clone(&self.gender),
            given_name: ::core::clone::Clone::clone(&self.given_name),
            group_member_of: ::core::clone::Clone::clone(&self.group_member_of),
            has_claim: ::core::clone::Clone::clone(&self.has_claim),
            has_credential: ::core::clone::Clone::clone(&self.has_credential),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            location: ::core::clone::Clone::clone(&self.location),
            member_of: ::core::clone::Clone::clone(&self.member_of),
            national_id: ::core::clone::Clone::clone(&self.national_id),
            patronymic_name: ::core::clone::Clone::clone(&self.patronymic_name),
            place_of_birth: ::core::clone::Clone::clone(&self.place_of_birth),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Person {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "birth_name",
            "citizenship_country",
            "contact_point",
            "date_modified",
            "date_of_birth",
            "family_name",
            "full_name",
            "gender",
            "given_name",
            "group_member_of",
            "has_claim",
            "has_credential",
            "id",
            "identifier",
            "location",
            "member_of",
            "national_id",
            "patronymic_name",
            "place_of_birth",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.birth_name,
            &self.citizenship_country,
            &self.contact_point,
            &self.date_modified,
            &self.date_of_birth,
            &self.family_name,
            &self.full_name,
            &self.gender,
            &self.given_name,
            &self.group_member_of,
            &self.has_claim,
            &self.has_credential,
            &self.id,
            &self.identifier,
            &self.location,
            &self.member_of,
            &self.national_id,
            &self.patronymic_name,
            &self.place_of_birth,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "Person", names, values)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Person {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 20",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "birthName" => _serde::__private::Ok(__Field::__field0),
                        "citizenshipCountry" => _serde::__private::Ok(__Field::__field1),
                        "contactPoint" => _serde::__private::Ok(__Field::__field2),
                        "dateModified" => _serde::__private::Ok(__Field::__field3),
                        "dateOfBirth" => _serde::__private::Ok(__Field::__field4),
                        "familyName" => _serde::__private::Ok(__Field::__field5),
                        "fullName" => _serde::__private::Ok(__Field::__field6),
                        "gender" => _serde::__private::Ok(__Field::__field7),
                        "givenName" => _serde::__private::Ok(__Field::__field8),
                        "groupMemberOf" => _serde::__private::Ok(__Field::__field9),
                        "hasClaim" => _serde::__private::Ok(__Field::__field10),
                        "hasCredential" => _serde::__private::Ok(__Field::__field11),
                        "id" => _serde::__private::Ok(__Field::__field12),
                        "identifier" => _serde::__private::Ok(__Field::__field13),
                        "location" => _serde::__private::Ok(__Field::__field14),
                        "memberOf" => _serde::__private::Ok(__Field::__field15),
                        "nationalID" => _serde::__private::Ok(__Field::__field16),
                        "patronymicName" => _serde::__private::Ok(__Field::__field17),
                        "placeOfBirth" => _serde::__private::Ok(__Field::__field18),
                        "type" => _serde::__private::Ok(__Field::__field19),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"birthName" => _serde::__private::Ok(__Field::__field0),
                        b"citizenshipCountry" => _serde::__private::Ok(__Field::__field1),
                        b"contactPoint" => _serde::__private::Ok(__Field::__field2),
                        b"dateModified" => _serde::__private::Ok(__Field::__field3),
                        b"dateOfBirth" => _serde::__private::Ok(__Field::__field4),
                        b"familyName" => _serde::__private::Ok(__Field::__field5),
                        b"fullName" => _serde::__private::Ok(__Field::__field6),
                        b"gender" => _serde::__private::Ok(__Field::__field7),
                        b"givenName" => _serde::__private::Ok(__Field::__field8),
                        b"groupMemberOf" => _serde::__private::Ok(__Field::__field9),
                        b"hasClaim" => _serde::__private::Ok(__Field::__field10),
                        b"hasCredential" => _serde::__private::Ok(__Field::__field11),
                        b"id" => _serde::__private::Ok(__Field::__field12),
                        b"identifier" => _serde::__private::Ok(__Field::__field13),
                        b"location" => _serde::__private::Ok(__Field::__field14),
                        b"memberOf" => _serde::__private::Ok(__Field::__field15),
                        b"nationalID" => _serde::__private::Ok(__Field::__field16),
                        b"patronymicName" => _serde::__private::Ok(__Field::__field17),
                        b"placeOfBirth" => _serde::__private::Ok(__Field::__field18),
                        b"type" => _serde::__private::Ok(__Field::__field19),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Person>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Person;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Person")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<ContactPoint>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKV>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKV>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKV>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Group>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<ClaimNode>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<EuropeanDigitalCredential>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<Location>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<Organisation>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<LegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<Location>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        PersonTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    19usize,
                                    &"struct Person with 20 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Person {
                        birth_name: __field0,
                        citizenship_country: __field1,
                        contact_point: __field2,
                        date_modified: __field3,
                        date_of_birth: __field4,
                        family_name: __field5,
                        full_name: __field6,
                        gender: __field7,
                        given_name: __field8,
                        group_member_of: __field9,
                        has_claim: __field10,
                        has_credential: __field11,
                        id: __field12,
                        identifier: __field13,
                        location: __field14,
                        member_of: __field15,
                        national_id: __field16,
                        patronymic_name: __field17,
                        place_of_birth: __field18,
                        type_: __field19,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<ContactPoint>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<LangKV>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<LangKV>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Option<LangKV>> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<Group>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<OneOrMany<ClaimNode>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<OneOrMany<EuropeanDigitalCredential>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<Option<Location>> = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<Box<OneOrMany<Organisation>>>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<LegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<Option<Location>> = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<PersonTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "birthName",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "citizenshipCountry",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contactPoint",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<ContactPoint>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateOfBirth",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "familyName",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKV>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "fullName",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKV>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("gender"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "givenName",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKV>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "groupMemberOf",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Group>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasClaim",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<ClaimNode>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasCredential",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<EuropeanDigitalCredential>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "location",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Location>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "memberOf",
                                        ),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<Organisation>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "nationalID",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "patronymicName",
                                        ),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "placeOfBirth",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Location>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<PersonTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Person {
                        birth_name: __field0,
                        citizenship_country: __field1,
                        contact_point: __field2,
                        date_modified: __field3,
                        date_of_birth: __field4,
                        family_name: __field5,
                        full_name: __field6,
                        gender: __field7,
                        given_name: __field8,
                        group_member_of: __field9,
                        has_claim: __field10,
                        has_credential: __field11,
                        id: __field12,
                        identifier: __field13,
                        location: __field14,
                        member_of: __field15,
                        national_id: __field16,
                        patronymic_name: __field17,
                        place_of_birth: __field18,
                        type_: __field19,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "birthName",
                "citizenshipCountry",
                "contactPoint",
                "dateModified",
                "dateOfBirth",
                "familyName",
                "fullName",
                "gender",
                "givenName",
                "groupMemberOf",
                "hasClaim",
                "hasCredential",
                "id",
                "identifier",
                "location",
                "memberOf",
                "nationalID",
                "patronymicName",
                "placeOfBirth",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Person",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Person>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Person {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Person",
                false as usize + if Option::is_none(&self.birth_name) { 0 } else { 1 }
                    + if Option::is_none(&self.citizenship_country) { 0 } else { 1 }
                    + if Option::is_none(&self.contact_point) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 }
                    + if Option::is_none(&self.date_of_birth) { 0 } else { 1 }
                    + if Option::is_none(&self.family_name) { 0 } else { 1 }
                    + if Option::is_none(&self.full_name) { 0 } else { 1 }
                    + if Option::is_none(&self.gender) { 0 } else { 1 }
                    + if Option::is_none(&self.given_name) { 0 } else { 1 }
                    + if Option::is_none(&self.group_member_of) { 0 } else { 1 }
                    + if Option::is_none(&self.has_claim) { 0 } else { 1 }
                    + if Option::is_none(&self.has_credential) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.location) { 0 } else { 1 }
                    + if Option::is_none(&self.member_of) { 0 } else { 1 }
                    + if Option::is_none(&self.national_id) { 0 } else { 1 }
                    + if Option::is_none(&self.patronymic_name) { 0 } else { 1 }
                    + if Option::is_none(&self.place_of_birth) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.birth_name) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "birthName",
                    &self.birth_name,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "birthName",
                )?;
            }
            if !Option::is_none(&self.citizenship_country) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "citizenshipCountry",
                    &self.citizenship_country,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "citizenshipCountry",
                )?;
            }
            if !Option::is_none(&self.contact_point) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "contactPoint",
                    &self.contact_point,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "contactPoint",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            if !Option::is_none(&self.date_of_birth) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateOfBirth",
                    &self.date_of_birth,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateOfBirth",
                )?;
            }
            if !Option::is_none(&self.family_name) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "familyName",
                    &self.family_name,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "familyName",
                )?;
            }
            if !Option::is_none(&self.full_name) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "fullName",
                    &self.full_name,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "fullName",
                )?;
            }
            if !Option::is_none(&self.gender) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "gender",
                    &self.gender,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "gender")?;
            }
            if !Option::is_none(&self.given_name) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "givenName",
                    &self.given_name,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "givenName",
                )?;
            }
            if !Option::is_none(&self.group_member_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "groupMemberOf",
                    &self.group_member_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "groupMemberOf",
                )?;
            }
            if !Option::is_none(&self.has_claim) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasClaim",
                    &self.has_claim,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "hasClaim",
                )?;
            }
            if !Option::is_none(&self.has_credential) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasCredential",
                    &self.has_credential,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "hasCredential",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.location) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "location",
                    &self.location,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "location",
                )?;
            }
            if !Option::is_none(&self.member_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "memberOf",
                    &self.member_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "memberOf",
                )?;
            }
            if !Option::is_none(&self.national_id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "nationalID",
                    &self.national_id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "nationalID",
                )?;
            }
            if !Option::is_none(&self.patronymic_name) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "patronymicName",
                    &self.patronymic_name,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "patronymicName",
                )?;
            }
            if !Option::is_none(&self.place_of_birth) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "placeOfBirth",
                    &self.place_of_birth,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "placeOfBirth",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Person {
    pub fn tag() -> PersonTag {
        PersonTag::default()
    }
}
/// Tag matching the struct name
pub struct PersonTag(String);
#[automatically_derived]
impl ::core::clone::Clone for PersonTag {
    #[inline]
    fn clone(&self) -> PersonTag {
        PersonTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for PersonTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "PersonTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for PersonTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "PersonTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for PersonTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for PersonTag {
    fn default() -> Self {
        Self("Person".to_string())
    }
}
impl<'de> Deserialize<'de> for PersonTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Person" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Person",
                ),
            )
        } else {
            Ok(PersonTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Phone {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub area_dialing: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub country_dialing: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dial_number: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    #[serde(rename = "type")]
    pub type_: PhoneTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Phone {
    #[inline]
    fn clone(&self) -> Phone {
        Phone {
            area_dialing: ::core::clone::Clone::clone(&self.area_dialing),
            country_dialing: ::core::clone::Clone::clone(&self.country_dialing),
            dial_number: ::core::clone::Clone::clone(&self.dial_number),
            id: ::core::clone::Clone::clone(&self.id),
            phone_number: ::core::clone::Clone::clone(&self.phone_number),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Phone {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "area_dialing",
            "country_dialing",
            "dial_number",
            "id",
            "phone_number",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.area_dialing,
            &self.country_dialing,
            &self.dial_number,
            &self.id,
            &self.phone_number,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(f, "Phone", names, values)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Phone {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 6",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "areaDialing" => _serde::__private::Ok(__Field::__field0),
                        "countryDialing" => _serde::__private::Ok(__Field::__field1),
                        "dialNumber" => _serde::__private::Ok(__Field::__field2),
                        "id" => _serde::__private::Ok(__Field::__field3),
                        "phoneNumber" => _serde::__private::Ok(__Field::__field4),
                        "type" => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"areaDialing" => _serde::__private::Ok(__Field::__field0),
                        b"countryDialing" => _serde::__private::Ok(__Field::__field1),
                        b"dialNumber" => _serde::__private::Ok(__Field::__field2),
                        b"id" => _serde::__private::Ok(__Field::__field3),
                        b"phoneNumber" => _serde::__private::Ok(__Field::__field4),
                        b"type" => _serde::__private::Ok(__Field::__field5),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Phone>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Phone;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Phone")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        PhoneTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    5usize,
                                    &"struct Phone with 6 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Phone {
                        area_dialing: __field0,
                        country_dialing: __field1,
                        dial_number: __field2,
                        id: __field3,
                        phone_number: __field4,
                        type_: __field5,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<PhoneTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "areaDialing",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "countryDialing",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dialNumber",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "phoneNumber",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<PhoneTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Phone {
                        area_dialing: __field0,
                        country_dialing: __field1,
                        dial_number: __field2,
                        id: __field3,
                        phone_number: __field4,
                        type_: __field5,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "areaDialing",
                "countryDialing",
                "dialNumber",
                "id",
                "phoneNumber",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Phone",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Phone>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Phone {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Phone",
                false as usize + if Option::is_none(&self.area_dialing) { 0 } else { 1 }
                    + if Option::is_none(&self.country_dialing) { 0 } else { 1 }
                    + if Option::is_none(&self.dial_number) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.phone_number) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.area_dialing) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "areaDialing",
                    &self.area_dialing,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "areaDialing",
                )?;
            }
            if !Option::is_none(&self.country_dialing) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "countryDialing",
                    &self.country_dialing,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "countryDialing",
                )?;
            }
            if !Option::is_none(&self.dial_number) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dialNumber",
                    &self.dial_number,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dialNumber",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.phone_number) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "phoneNumber",
                    &self.phone_number,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "phoneNumber",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Phone {
    pub fn tag() -> PhoneTag {
        PhoneTag::default()
    }
}
/// Tag matching the struct name
pub struct PhoneTag(String);
#[automatically_derived]
impl ::core::clone::Clone for PhoneTag {
    #[inline]
    fn clone(&self) -> PhoneTag {
        PhoneTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for PhoneTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "PhoneTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for PhoneTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "PhoneTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for PhoneTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for PhoneTag {
    fn default() -> Self {
        Self("Phone".to_string())
    }
}
impl<'de> Deserialize<'de> for PhoneTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Phone" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Phone",
                ),
            )
        } else {
            Ok(PhoneTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct PriceDetail {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub amount: Option<Amount>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<OneOrMany<IdentifierOrLegalIdentifier>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pref_label: Option<LangKVPairs>,
    #[serde(rename = "type")]
    pub type_: PriceDetailTag,
}
#[automatically_derived]
impl ::core::clone::Clone for PriceDetail {
    #[inline]
    fn clone(&self) -> PriceDetail {
        PriceDetail {
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            amount: ::core::clone::Clone::clone(&self.amount),
            description: ::core::clone::Clone::clone(&self.description),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            pref_label: ::core::clone::Clone::clone(&self.pref_label),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for PriceDetail {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "additional_note",
            "amount",
            "description",
            "id",
            "identifier",
            "pref_label",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.additional_note,
            &self.amount,
            &self.description,
            &self.id,
            &self.identifier,
            &self.pref_label,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "PriceDetail",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for PriceDetail {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 7",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "additionalNote" => _serde::__private::Ok(__Field::__field0),
                        "amount" => _serde::__private::Ok(__Field::__field1),
                        "description" => _serde::__private::Ok(__Field::__field2),
                        "id" => _serde::__private::Ok(__Field::__field3),
                        "identifier" => _serde::__private::Ok(__Field::__field4),
                        "prefLabel" => _serde::__private::Ok(__Field::__field5),
                        "type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"additionalNote" => _serde::__private::Ok(__Field::__field0),
                        b"amount" => _serde::__private::Ok(__Field::__field1),
                        b"description" => _serde::__private::Ok(__Field::__field2),
                        b"id" => _serde::__private::Ok(__Field::__field3),
                        b"identifier" => _serde::__private::Ok(__Field::__field4),
                        b"prefLabel" => _serde::__private::Ok(__Field::__field5),
                        b"type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<PriceDetail>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = PriceDetail;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct PriceDetail",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<Amount>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        PriceDetailTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct PriceDetail with 7 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(PriceDetail {
                        additional_note: __field0,
                        amount: __field1,
                        description: __field2,
                        id: __field3,
                        identifier: __field4,
                        pref_label: __field5,
                        type_: __field6,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<Amount>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<
                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                    > = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<PriceDetailTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("amount"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Amount>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<IdentifierOrLegalIdentifier>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "prefLabel",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        PriceDetailTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(PriceDetail {
                        additional_note: __field0,
                        amount: __field1,
                        description: __field2,
                        id: __field3,
                        identifier: __field4,
                        pref_label: __field5,
                        type_: __field6,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "additionalNote",
                "amount",
                "description",
                "id",
                "identifier",
                "prefLabel",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "PriceDetail",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<PriceDetail>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for PriceDetail {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "PriceDetail",
                false as usize
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.amount) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.pref_label) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.amount) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "amount",
                    &self.amount,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "amount")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.pref_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "prefLabel",
                    &self.pref_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "prefLabel",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl PriceDetail {
    pub fn tag() -> PriceDetailTag {
        PriceDetailTag::default()
    }
}
/// Tag matching the struct name
pub struct PriceDetailTag(String);
#[automatically_derived]
impl ::core::clone::Clone for PriceDetailTag {
    #[inline]
    fn clone(&self) -> PriceDetailTag {
        PriceDetailTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for PriceDetailTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "PriceDetailTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for PriceDetailTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "PriceDetailTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for PriceDetailTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for PriceDetailTag {
    fn default() -> Self {
        Self("PriceDetail".to_string())
    }
}
impl<'de> Deserialize<'de> for PriceDetailTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "PriceDetail" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"PriceDetail",
                ),
            )
        } else {
            Ok(PriceDetailTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct Proof {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(rename = "type")]
    pub type_: ProofTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Proof {
    #[inline]
    fn clone(&self) -> Proof {
        Proof {
            id: ::core::clone::Clone::clone(&self.id),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Proof {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field2_finish(
            f,
            "Proof",
            "id",
            &self.id,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Proof {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 2",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Proof>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Proof;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Proof")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        ProofTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct Proof with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Proof {
                        id: __field0,
                        type_: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<ProofTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<ProofTag>(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Proof {
                        id: __field0,
                        type_: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Proof",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Proof>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Proof {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Proof",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Proof {
    pub fn tag() -> ProofTag {
        ProofTag::default()
    }
}
/// Tag matching the struct name
pub struct ProofTag(String);
#[automatically_derived]
impl ::core::clone::Clone for ProofTag {
    #[inline]
    fn clone(&self) -> ProofTag {
        ProofTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ProofTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "ProofTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ProofTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "ProofTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for ProofTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for ProofTag {
    fn default() -> Self {
        Self("Proof".to_string())
    }
}
impl<'de> Deserialize<'de> for ProofTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Proof" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Proof",
                ),
            )
        } else {
            Ok(ProofTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Qualification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accreditation: Option<OneOrMany<Accreditation>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additional_note: Option<OneOrMany<Note>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alt_label: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub awarding_opportunity: Option<OneOrMany<AwardingOpportunity>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credit_point: Option<OneOrMany<CreditPoint>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<DateTime<Utc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dc_type: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub education_level: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub education_subject: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entitles_to: Option<OneOrMany<LearningEntitlementSpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub entry_requirement: Option<Note>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub eqf_level: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generalisation_of: Option<OneOrMany<Qualification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_part: Option<OneOrMany<Qualification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<IdentifierOrLegalIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub influenced_by: Option<OneOrMany<LearningActivitySpecification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_part_of: Option<OneOrMany<Qualification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_partial_qualification: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_outcome: Option<OneOrMany<LearningOutcome>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_outcome_summary: Option<Note>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub learning_setting: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maximum_duration: Option<DurationType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nqf_level: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub proven_by: Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub qualification_code: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub specialisation_of: Option<OneOrMany<Qualification>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub supplementary_document: Option<OneOrMany<WebResource>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_group: Option<OneOrMany<Concept>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub thematic_area: Option<OneOrMany<Concept>>,
    pub title: LangKVPairs,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volume_of_learning: Option<DurationType>,
    #[serde(rename = "type")]
    pub type_: QualificationTag,
}
#[automatically_derived]
impl ::core::clone::Clone for Qualification {
    #[inline]
    fn clone(&self) -> Qualification {
        Qualification {
            accreditation: ::core::clone::Clone::clone(&self.accreditation),
            additional_note: ::core::clone::Clone::clone(&self.additional_note),
            alt_label: ::core::clone::Clone::clone(&self.alt_label),
            awarding_opportunity: ::core::clone::Clone::clone(
                &self.awarding_opportunity,
            ),
            category: ::core::clone::Clone::clone(&self.category),
            credit_point: ::core::clone::Clone::clone(&self.credit_point),
            date_modified: ::core::clone::Clone::clone(&self.date_modified),
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            education_level: ::core::clone::Clone::clone(&self.education_level),
            education_subject: ::core::clone::Clone::clone(&self.education_subject),
            entitles_to: ::core::clone::Clone::clone(&self.entitles_to),
            entry_requirement: ::core::clone::Clone::clone(&self.entry_requirement),
            eqf_level: ::core::clone::Clone::clone(&self.eqf_level),
            generalisation_of: ::core::clone::Clone::clone(&self.generalisation_of),
            has_part: ::core::clone::Clone::clone(&self.has_part),
            homepage: ::core::clone::Clone::clone(&self.homepage),
            id: ::core::clone::Clone::clone(&self.id),
            identifier: ::core::clone::Clone::clone(&self.identifier),
            influenced_by: ::core::clone::Clone::clone(&self.influenced_by),
            is_part_of: ::core::clone::Clone::clone(&self.is_part_of),
            is_partial_qualification: ::core::clone::Clone::clone(
                &self.is_partial_qualification,
            ),
            language: ::core::clone::Clone::clone(&self.language),
            learning_outcome: ::core::clone::Clone::clone(&self.learning_outcome),
            learning_outcome_summary: ::core::clone::Clone::clone(
                &self.learning_outcome_summary,
            ),
            learning_setting: ::core::clone::Clone::clone(&self.learning_setting),
            maximum_duration: ::core::clone::Clone::clone(&self.maximum_duration),
            mode: ::core::clone::Clone::clone(&self.mode),
            nqf_level: ::core::clone::Clone::clone(&self.nqf_level),
            proven_by: ::core::clone::Clone::clone(&self.proven_by),
            qualification_code: ::core::clone::Clone::clone(&self.qualification_code),
            specialisation_of: ::core::clone::Clone::clone(&self.specialisation_of),
            status: ::core::clone::Clone::clone(&self.status),
            supplementary_document: ::core::clone::Clone::clone(
                &self.supplementary_document,
            ),
            target_group: ::core::clone::Clone::clone(&self.target_group),
            thematic_area: ::core::clone::Clone::clone(&self.thematic_area),
            title: ::core::clone::Clone::clone(&self.title),
            volume_of_learning: ::core::clone::Clone::clone(&self.volume_of_learning),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for Qualification {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "accreditation",
            "additional_note",
            "alt_label",
            "awarding_opportunity",
            "category",
            "credit_point",
            "date_modified",
            "dc_type",
            "description",
            "education_level",
            "education_subject",
            "entitles_to",
            "entry_requirement",
            "eqf_level",
            "generalisation_of",
            "has_part",
            "homepage",
            "id",
            "identifier",
            "influenced_by",
            "is_part_of",
            "is_partial_qualification",
            "language",
            "learning_outcome",
            "learning_outcome_summary",
            "learning_setting",
            "maximum_duration",
            "mode",
            "nqf_level",
            "proven_by",
            "qualification_code",
            "specialisation_of",
            "status",
            "supplementary_document",
            "target_group",
            "thematic_area",
            "title",
            "volume_of_learning",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.accreditation,
            &self.additional_note,
            &self.alt_label,
            &self.awarding_opportunity,
            &self.category,
            &self.credit_point,
            &self.date_modified,
            &self.dc_type,
            &self.description,
            &self.education_level,
            &self.education_subject,
            &self.entitles_to,
            &self.entry_requirement,
            &self.eqf_level,
            &self.generalisation_of,
            &self.has_part,
            &self.homepage,
            &self.id,
            &self.identifier,
            &self.influenced_by,
            &self.is_part_of,
            &self.is_partial_qualification,
            &self.language,
            &self.learning_outcome,
            &self.learning_outcome_summary,
            &self.learning_setting,
            &self.maximum_duration,
            &self.mode,
            &self.nqf_level,
            &self.proven_by,
            &self.qualification_code,
            &self.specialisation_of,
            &self.status,
            &self.supplementary_document,
            &self.target_group,
            &self.thematic_area,
            &self.title,
            &self.volume_of_learning,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "Qualification",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Qualification {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
                __field7,
                __field8,
                __field9,
                __field10,
                __field11,
                __field12,
                __field13,
                __field14,
                __field15,
                __field16,
                __field17,
                __field18,
                __field19,
                __field20,
                __field21,
                __field22,
                __field23,
                __field24,
                __field25,
                __field26,
                __field27,
                __field28,
                __field29,
                __field30,
                __field31,
                __field32,
                __field33,
                __field34,
                __field35,
                __field36,
                __field37,
                __field38,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        7u64 => _serde::__private::Ok(__Field::__field7),
                        8u64 => _serde::__private::Ok(__Field::__field8),
                        9u64 => _serde::__private::Ok(__Field::__field9),
                        10u64 => _serde::__private::Ok(__Field::__field10),
                        11u64 => _serde::__private::Ok(__Field::__field11),
                        12u64 => _serde::__private::Ok(__Field::__field12),
                        13u64 => _serde::__private::Ok(__Field::__field13),
                        14u64 => _serde::__private::Ok(__Field::__field14),
                        15u64 => _serde::__private::Ok(__Field::__field15),
                        16u64 => _serde::__private::Ok(__Field::__field16),
                        17u64 => _serde::__private::Ok(__Field::__field17),
                        18u64 => _serde::__private::Ok(__Field::__field18),
                        19u64 => _serde::__private::Ok(__Field::__field19),
                        20u64 => _serde::__private::Ok(__Field::__field20),
                        21u64 => _serde::__private::Ok(__Field::__field21),
                        22u64 => _serde::__private::Ok(__Field::__field22),
                        23u64 => _serde::__private::Ok(__Field::__field23),
                        24u64 => _serde::__private::Ok(__Field::__field24),
                        25u64 => _serde::__private::Ok(__Field::__field25),
                        26u64 => _serde::__private::Ok(__Field::__field26),
                        27u64 => _serde::__private::Ok(__Field::__field27),
                        28u64 => _serde::__private::Ok(__Field::__field28),
                        29u64 => _serde::__private::Ok(__Field::__field29),
                        30u64 => _serde::__private::Ok(__Field::__field30),
                        31u64 => _serde::__private::Ok(__Field::__field31),
                        32u64 => _serde::__private::Ok(__Field::__field32),
                        33u64 => _serde::__private::Ok(__Field::__field33),
                        34u64 => _serde::__private::Ok(__Field::__field34),
                        35u64 => _serde::__private::Ok(__Field::__field35),
                        36u64 => _serde::__private::Ok(__Field::__field36),
                        37u64 => _serde::__private::Ok(__Field::__field37),
                        38u64 => _serde::__private::Ok(__Field::__field38),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 39",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "accreditation" => _serde::__private::Ok(__Field::__field0),
                        "additionalNote" => _serde::__private::Ok(__Field::__field1),
                        "altLabel" => _serde::__private::Ok(__Field::__field2),
                        "awardingOpportunity" => _serde::__private::Ok(__Field::__field3),
                        "category" => _serde::__private::Ok(__Field::__field4),
                        "creditPoint" => _serde::__private::Ok(__Field::__field5),
                        "dateModified" => _serde::__private::Ok(__Field::__field6),
                        "dcType" => _serde::__private::Ok(__Field::__field7),
                        "description" => _serde::__private::Ok(__Field::__field8),
                        "educationLevel" => _serde::__private::Ok(__Field::__field9),
                        "educationSubject" => _serde::__private::Ok(__Field::__field10),
                        "entitlesTo" => _serde::__private::Ok(__Field::__field11),
                        "entryRequirement" => _serde::__private::Ok(__Field::__field12),
                        "eqfLevel" => _serde::__private::Ok(__Field::__field13),
                        "generalisationOf" => _serde::__private::Ok(__Field::__field14),
                        "hasPart" => _serde::__private::Ok(__Field::__field15),
                        "homepage" => _serde::__private::Ok(__Field::__field16),
                        "id" => _serde::__private::Ok(__Field::__field17),
                        "identifier" => _serde::__private::Ok(__Field::__field18),
                        "influencedBy" => _serde::__private::Ok(__Field::__field19),
                        "isPartOf" => _serde::__private::Ok(__Field::__field20),
                        "isPartialQualification" => {
                            _serde::__private::Ok(__Field::__field21)
                        }
                        "language" => _serde::__private::Ok(__Field::__field22),
                        "learningOutcome" => _serde::__private::Ok(__Field::__field23),
                        "learningOutcomeSummary" => {
                            _serde::__private::Ok(__Field::__field24)
                        }
                        "learningSetting" => _serde::__private::Ok(__Field::__field25),
                        "maximumDuration" => _serde::__private::Ok(__Field::__field26),
                        "mode" => _serde::__private::Ok(__Field::__field27),
                        "nqfLevel" => _serde::__private::Ok(__Field::__field28),
                        "provenBy" => _serde::__private::Ok(__Field::__field29),
                        "qualificationCode" => _serde::__private::Ok(__Field::__field30),
                        "specialisationOf" => _serde::__private::Ok(__Field::__field31),
                        "status" => _serde::__private::Ok(__Field::__field32),
                        "supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field33)
                        }
                        "targetGroup" => _serde::__private::Ok(__Field::__field34),
                        "thematicArea" => _serde::__private::Ok(__Field::__field35),
                        "title" => _serde::__private::Ok(__Field::__field36),
                        "volumeOfLearning" => _serde::__private::Ok(__Field::__field37),
                        "type" => _serde::__private::Ok(__Field::__field38),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"accreditation" => _serde::__private::Ok(__Field::__field0),
                        b"additionalNote" => _serde::__private::Ok(__Field::__field1),
                        b"altLabel" => _serde::__private::Ok(__Field::__field2),
                        b"awardingOpportunity" => {
                            _serde::__private::Ok(__Field::__field3)
                        }
                        b"category" => _serde::__private::Ok(__Field::__field4),
                        b"creditPoint" => _serde::__private::Ok(__Field::__field5),
                        b"dateModified" => _serde::__private::Ok(__Field::__field6),
                        b"dcType" => _serde::__private::Ok(__Field::__field7),
                        b"description" => _serde::__private::Ok(__Field::__field8),
                        b"educationLevel" => _serde::__private::Ok(__Field::__field9),
                        b"educationSubject" => _serde::__private::Ok(__Field::__field10),
                        b"entitlesTo" => _serde::__private::Ok(__Field::__field11),
                        b"entryRequirement" => _serde::__private::Ok(__Field::__field12),
                        b"eqfLevel" => _serde::__private::Ok(__Field::__field13),
                        b"generalisationOf" => _serde::__private::Ok(__Field::__field14),
                        b"hasPart" => _serde::__private::Ok(__Field::__field15),
                        b"homepage" => _serde::__private::Ok(__Field::__field16),
                        b"id" => _serde::__private::Ok(__Field::__field17),
                        b"identifier" => _serde::__private::Ok(__Field::__field18),
                        b"influencedBy" => _serde::__private::Ok(__Field::__field19),
                        b"isPartOf" => _serde::__private::Ok(__Field::__field20),
                        b"isPartialQualification" => {
                            _serde::__private::Ok(__Field::__field21)
                        }
                        b"language" => _serde::__private::Ok(__Field::__field22),
                        b"learningOutcome" => _serde::__private::Ok(__Field::__field23),
                        b"learningOutcomeSummary" => {
                            _serde::__private::Ok(__Field::__field24)
                        }
                        b"learningSetting" => _serde::__private::Ok(__Field::__field25),
                        b"maximumDuration" => _serde::__private::Ok(__Field::__field26),
                        b"mode" => _serde::__private::Ok(__Field::__field27),
                        b"nqfLevel" => _serde::__private::Ok(__Field::__field28),
                        b"provenBy" => _serde::__private::Ok(__Field::__field29),
                        b"qualificationCode" => _serde::__private::Ok(__Field::__field30),
                        b"specialisationOf" => _serde::__private::Ok(__Field::__field31),
                        b"status" => _serde::__private::Ok(__Field::__field32),
                        b"supplementaryDocument" => {
                            _serde::__private::Ok(__Field::__field33)
                        }
                        b"targetGroup" => _serde::__private::Ok(__Field::__field34),
                        b"thematicArea" => _serde::__private::Ok(__Field::__field35),
                        b"title" => _serde::__private::Ok(__Field::__field36),
                        b"volumeOfLearning" => _serde::__private::Ok(__Field::__field37),
                        b"type" => _serde::__private::Ok(__Field::__field38),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Qualification>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Qualification;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct Qualification",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Accreditation>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Note>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<AwardingOpportunity>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<CreditPoint>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        Option<DateTime<Utc>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningEntitlementSpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match _serde::de::SeqAccess::next_element::<
                        Option<Note>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Qualification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Qualification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match _serde::de::SeqAccess::next_element::<
                        Option<IdentifierOrLegalIdentifier>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Qualification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match _serde::de::SeqAccess::next_element::<
                        Option<bool>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field22 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field23 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<LearningOutcome>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field24 = match _serde::de::SeqAccess::next_element::<
                        Option<Note>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field25 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field26 = match _serde::de::SeqAccess::next_element::<
                        Option<DurationType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field27 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field28 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field29 = match _serde::de::SeqAccess::next_element::<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field30 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field31 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Qualification>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field32 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field33 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<WebResource>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field34 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field35 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<Concept>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field36 = match _serde::de::SeqAccess::next_element::<
                        LangKVPairs,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    36usize,
                                    &"struct Qualification with 39 elements",
                                ),
                            );
                        }
                    };
                    let __field37 = match _serde::de::SeqAccess::next_element::<
                        Option<DurationType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field38 = match _serde::de::SeqAccess::next_element::<
                        QualificationTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    38usize,
                                    &"struct Qualification with 39 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Qualification {
                        accreditation: __field0,
                        additional_note: __field1,
                        alt_label: __field2,
                        awarding_opportunity: __field3,
                        category: __field4,
                        credit_point: __field5,
                        date_modified: __field6,
                        dc_type: __field7,
                        description: __field8,
                        education_level: __field9,
                        education_subject: __field10,
                        entitles_to: __field11,
                        entry_requirement: __field12,
                        eqf_level: __field13,
                        generalisation_of: __field14,
                        has_part: __field15,
                        homepage: __field16,
                        id: __field17,
                        identifier: __field18,
                        influenced_by: __field19,
                        is_part_of: __field20,
                        is_partial_qualification: __field21,
                        language: __field22,
                        learning_outcome: __field23,
                        learning_outcome_summary: __field24,
                        learning_setting: __field25,
                        maximum_duration: __field26,
                        mode: __field27,
                        nqf_level: __field28,
                        proven_by: __field29,
                        qualification_code: __field30,
                        specialisation_of: __field31,
                        status: __field32,
                        supplementary_document: __field33,
                        target_group: __field34,
                        thematic_area: __field35,
                        title: __field36,
                        volume_of_learning: __field37,
                        type_: __field38,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<
                        Option<OneOrMany<Accreditation>>,
                    > = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<
                        Option<OneOrMany<Note>>,
                    > = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<
                        Option<OneOrMany<AwardingOpportunity>>,
                    > = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<
                        Option<OneOrMany<CreditPoint>>,
                    > = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<Option<DateTime<Utc>>> = _serde::__private::None;
                    let mut __field7: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field8: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field9: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field10: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field11: _serde::__private::Option<
                        Option<OneOrMany<LearningEntitlementSpecification>>,
                    > = _serde::__private::None;
                    let mut __field12: _serde::__private::Option<Option<Note>> = _serde::__private::None;
                    let mut __field13: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field14: _serde::__private::Option<
                        Option<OneOrMany<Qualification>>,
                    > = _serde::__private::None;
                    let mut __field15: _serde::__private::Option<
                        Option<OneOrMany<Qualification>>,
                    > = _serde::__private::None;
                    let mut __field16: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field17: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field18: _serde::__private::Option<
                        Option<IdentifierOrLegalIdentifier>,
                    > = _serde::__private::None;
                    let mut __field19: _serde::__private::Option<
                        Option<OneOrMany<LearningActivitySpecification>>,
                    > = _serde::__private::None;
                    let mut __field20: _serde::__private::Option<
                        Option<OneOrMany<Qualification>>,
                    > = _serde::__private::None;
                    let mut __field21: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                    let mut __field22: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field23: _serde::__private::Option<
                        Option<OneOrMany<LearningOutcome>>,
                    > = _serde::__private::None;
                    let mut __field24: _serde::__private::Option<Option<Note>> = _serde::__private::None;
                    let mut __field25: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field26: _serde::__private::Option<Option<DurationType>> = _serde::__private::None;
                    let mut __field27: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field28: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field29: _serde::__private::Option<
                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                    > = _serde::__private::None;
                    let mut __field30: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field31: _serde::__private::Option<
                        Option<OneOrMany<Qualification>>,
                    > = _serde::__private::None;
                    let mut __field32: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field33: _serde::__private::Option<
                        Option<OneOrMany<WebResource>>,
                    > = _serde::__private::None;
                    let mut __field34: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field35: _serde::__private::Option<
                        Option<OneOrMany<Concept>>,
                    > = _serde::__private::None;
                    let mut __field36: _serde::__private::Option<LangKVPairs> = _serde::__private::None;
                    let mut __field37: _serde::__private::Option<Option<DurationType>> = _serde::__private::None;
                    let mut __field38: _serde::__private::Option<QualificationTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "accreditation",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Accreditation>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "additionalNote",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Note>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "altLabel",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "awardingOpportunity",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<AwardingOpportunity>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "category",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "creditPoint",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<CreditPoint>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "dateModified",
                                        ),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DateTime<Utc>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field7 => {
                                if _serde::__private::Option::is_some(&__field7) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field7 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field8 => {
                                if _serde::__private::Option::is_some(&__field8) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field8 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field9 => {
                                if _serde::__private::Option::is_some(&__field9) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "educationLevel",
                                        ),
                                    );
                                }
                                __field9 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field10 => {
                                if _serde::__private::Option::is_some(&__field10) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "educationSubject",
                                        ),
                                    );
                                }
                                __field10 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field11 => {
                                if _serde::__private::Option::is_some(&__field11) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "entitlesTo",
                                        ),
                                    );
                                }
                                __field11 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningEntitlementSpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field12 => {
                                if _serde::__private::Option::is_some(&__field12) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "entryRequirement",
                                        ),
                                    );
                                }
                                __field12 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Note>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field13 => {
                                if _serde::__private::Option::is_some(&__field13) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "eqfLevel",
                                        ),
                                    );
                                }
                                __field13 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field14 => {
                                if _serde::__private::Option::is_some(&__field14) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "generalisationOf",
                                        ),
                                    );
                                }
                                __field14 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Qualification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field15 => {
                                if _serde::__private::Option::is_some(&__field15) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hasPart",
                                        ),
                                    );
                                }
                                __field15 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Qualification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field16 => {
                                if _serde::__private::Option::is_some(&__field16) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "homepage",
                                        ),
                                    );
                                }
                                __field16 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field17 => {
                                if _serde::__private::Option::is_some(&__field17) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field17 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field18 => {
                                if _serde::__private::Option::is_some(&__field18) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "identifier",
                                        ),
                                    );
                                }
                                __field18 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<IdentifierOrLegalIdentifier>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field19 => {
                                if _serde::__private::Option::is_some(&__field19) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "influencedBy",
                                        ),
                                    );
                                }
                                __field19 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningActivitySpecification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field20 => {
                                if _serde::__private::Option::is_some(&__field20) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartOf",
                                        ),
                                    );
                                }
                                __field20 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Qualification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field21 => {
                                if _serde::__private::Option::is_some(&__field21) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "isPartialQualification",
                                        ),
                                    );
                                }
                                __field21 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<bool>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field22 => {
                                if _serde::__private::Option::is_some(&__field22) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "language",
                                        ),
                                    );
                                }
                                __field22 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field23 => {
                                if _serde::__private::Option::is_some(&__field23) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningOutcome",
                                        ),
                                    );
                                }
                                __field23 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<LearningOutcome>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field24 => {
                                if _serde::__private::Option::is_some(&__field24) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningOutcomeSummary",
                                        ),
                                    );
                                }
                                __field24 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Note>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field25 => {
                                if _serde::__private::Option::is_some(&__field25) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "learningSetting",
                                        ),
                                    );
                                }
                                __field25 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field26 => {
                                if _serde::__private::Option::is_some(&__field26) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "maximumDuration",
                                        ),
                                    );
                                }
                                __field26 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DurationType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field27 => {
                                if _serde::__private::Option::is_some(&__field27) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("mode"),
                                    );
                                }
                                __field27 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field28 => {
                                if _serde::__private::Option::is_some(&__field28) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "nqfLevel",
                                        ),
                                    );
                                }
                                __field28 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field29 => {
                                if _serde::__private::Option::is_some(&__field29) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "provenBy",
                                        ),
                                    );
                                }
                                __field29 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Box<OneOrMany<LearningAssessmentSpecification>>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field30 => {
                                if _serde::__private::Option::is_some(&__field30) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "qualificationCode",
                                        ),
                                    );
                                }
                                __field30 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field31 => {
                                if _serde::__private::Option::is_some(&__field31) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "specialisationOf",
                                        ),
                                    );
                                }
                                __field31 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Qualification>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field32 => {
                                if _serde::__private::Option::is_some(&__field32) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                    );
                                }
                                __field32 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field33 => {
                                if _serde::__private::Option::is_some(&__field33) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "supplementaryDocument",
                                        ),
                                    );
                                }
                                __field33 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<WebResource>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field34 => {
                                if _serde::__private::Option::is_some(&__field34) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "targetGroup",
                                        ),
                                    );
                                }
                                __field34 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field35 => {
                                if _serde::__private::Option::is_some(&__field35) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "thematicArea",
                                        ),
                                    );
                                }
                                __field35 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<Concept>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field36 => {
                                if _serde::__private::Option::is_some(&__field36) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field36 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        LangKVPairs,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field37 => {
                                if _serde::__private::Option::is_some(&__field37) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "volumeOfLearning",
                                        ),
                                    );
                                }
                                __field37 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<DurationType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field38 => {
                                if _serde::__private::Option::is_some(&__field38) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field38 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        QualificationTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field7 = match __field7 {
                        _serde::__private::Some(__field7) => __field7,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field8 = match __field8 {
                        _serde::__private::Some(__field8) => __field8,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field9 = match __field9 {
                        _serde::__private::Some(__field9) => __field9,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field10 = match __field10 {
                        _serde::__private::Some(__field10) => __field10,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field11 = match __field11 {
                        _serde::__private::Some(__field11) => __field11,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field12 = match __field12 {
                        _serde::__private::Some(__field12) => __field12,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field13 = match __field13 {
                        _serde::__private::Some(__field13) => __field13,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field14 = match __field14 {
                        _serde::__private::Some(__field14) => __field14,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field15 = match __field15 {
                        _serde::__private::Some(__field15) => __field15,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field16 = match __field16 {
                        _serde::__private::Some(__field16) => __field16,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field17 = match __field17 {
                        _serde::__private::Some(__field17) => __field17,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field18 = match __field18 {
                        _serde::__private::Some(__field18) => __field18,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field19 = match __field19 {
                        _serde::__private::Some(__field19) => __field19,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field20 = match __field20 {
                        _serde::__private::Some(__field20) => __field20,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field21 = match __field21 {
                        _serde::__private::Some(__field21) => __field21,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field22 = match __field22 {
                        _serde::__private::Some(__field22) => __field22,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field23 = match __field23 {
                        _serde::__private::Some(__field23) => __field23,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field24 = match __field24 {
                        _serde::__private::Some(__field24) => __field24,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field25 = match __field25 {
                        _serde::__private::Some(__field25) => __field25,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field26 = match __field26 {
                        _serde::__private::Some(__field26) => __field26,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field27 = match __field27 {
                        _serde::__private::Some(__field27) => __field27,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field28 = match __field28 {
                        _serde::__private::Some(__field28) => __field28,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field29 = match __field29 {
                        _serde::__private::Some(__field29) => __field29,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field30 = match __field30 {
                        _serde::__private::Some(__field30) => __field30,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field31 = match __field31 {
                        _serde::__private::Some(__field31) => __field31,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field32 = match __field32 {
                        _serde::__private::Some(__field32) => __field32,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field33 = match __field33 {
                        _serde::__private::Some(__field33) => __field33,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field34 = match __field34 {
                        _serde::__private::Some(__field34) => __field34,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field35 = match __field35 {
                        _serde::__private::Some(__field35) => __field35,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field36 = match __field36 {
                        _serde::__private::Some(__field36) => __field36,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field37 = match __field37 {
                        _serde::__private::Some(__field37) => __field37,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field38 = match __field38 {
                        _serde::__private::Some(__field38) => __field38,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(Qualification {
                        accreditation: __field0,
                        additional_note: __field1,
                        alt_label: __field2,
                        awarding_opportunity: __field3,
                        category: __field4,
                        credit_point: __field5,
                        date_modified: __field6,
                        dc_type: __field7,
                        description: __field8,
                        education_level: __field9,
                        education_subject: __field10,
                        entitles_to: __field11,
                        entry_requirement: __field12,
                        eqf_level: __field13,
                        generalisation_of: __field14,
                        has_part: __field15,
                        homepage: __field16,
                        id: __field17,
                        identifier: __field18,
                        influenced_by: __field19,
                        is_part_of: __field20,
                        is_partial_qualification: __field21,
                        language: __field22,
                        learning_outcome: __field23,
                        learning_outcome_summary: __field24,
                        learning_setting: __field25,
                        maximum_duration: __field26,
                        mode: __field27,
                        nqf_level: __field28,
                        proven_by: __field29,
                        qualification_code: __field30,
                        specialisation_of: __field31,
                        status: __field32,
                        supplementary_document: __field33,
                        target_group: __field34,
                        thematic_area: __field35,
                        title: __field36,
                        volume_of_learning: __field37,
                        type_: __field38,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "accreditation",
                "additionalNote",
                "altLabel",
                "awardingOpportunity",
                "category",
                "creditPoint",
                "dateModified",
                "dcType",
                "description",
                "educationLevel",
                "educationSubject",
                "entitlesTo",
                "entryRequirement",
                "eqfLevel",
                "generalisationOf",
                "hasPart",
                "homepage",
                "id",
                "identifier",
                "influencedBy",
                "isPartOf",
                "isPartialQualification",
                "language",
                "learningOutcome",
                "learningOutcomeSummary",
                "learningSetting",
                "maximumDuration",
                "mode",
                "nqfLevel",
                "provenBy",
                "qualificationCode",
                "specialisationOf",
                "status",
                "supplementaryDocument",
                "targetGroup",
                "thematicArea",
                "title",
                "volumeOfLearning",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Qualification",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Qualification>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Qualification {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Qualification",
                false as usize + if Option::is_none(&self.accreditation) { 0 } else { 1 }
                    + if Option::is_none(&self.additional_note) { 0 } else { 1 }
                    + if Option::is_none(&self.alt_label) { 0 } else { 1 }
                    + if Option::is_none(&self.awarding_opportunity) { 0 } else { 1 }
                    + if Option::is_none(&self.category) { 0 } else { 1 }
                    + if Option::is_none(&self.credit_point) { 0 } else { 1 }
                    + if Option::is_none(&self.date_modified) { 0 } else { 1 }
                    + if Option::is_none(&self.dc_type) { 0 } else { 1 }
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.education_level) { 0 } else { 1 }
                    + if Option::is_none(&self.education_subject) { 0 } else { 1 }
                    + if Option::is_none(&self.entitles_to) { 0 } else { 1 }
                    + if Option::is_none(&self.entry_requirement) { 0 } else { 1 }
                    + if Option::is_none(&self.eqf_level) { 0 } else { 1 }
                    + if Option::is_none(&self.generalisation_of) { 0 } else { 1 }
                    + if Option::is_none(&self.has_part) { 0 } else { 1 }
                    + if Option::is_none(&self.homepage) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.identifier) { 0 } else { 1 }
                    + if Option::is_none(&self.influenced_by) { 0 } else { 1 }
                    + if Option::is_none(&self.is_part_of) { 0 } else { 1 }
                    + if Option::is_none(&self.is_partial_qualification) { 0 } else { 1 }
                    + if Option::is_none(&self.language) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_outcome) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_outcome_summary) { 0 } else { 1 }
                    + if Option::is_none(&self.learning_setting) { 0 } else { 1 }
                    + if Option::is_none(&self.maximum_duration) { 0 } else { 1 }
                    + if Option::is_none(&self.mode) { 0 } else { 1 }
                    + if Option::is_none(&self.nqf_level) { 0 } else { 1 }
                    + if Option::is_none(&self.proven_by) { 0 } else { 1 }
                    + if Option::is_none(&self.qualification_code) { 0 } else { 1 }
                    + if Option::is_none(&self.specialisation_of) { 0 } else { 1 }
                    + if Option::is_none(&self.status) { 0 } else { 1 }
                    + if Option::is_none(&self.supplementary_document) { 0 } else { 1 }
                    + if Option::is_none(&self.target_group) { 0 } else { 1 }
                    + if Option::is_none(&self.thematic_area) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.volume_of_learning) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.accreditation) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "accreditation",
                    &self.accreditation,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "accreditation",
                )?;
            }
            if !Option::is_none(&self.additional_note) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "additionalNote",
                    &self.additional_note,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "additionalNote",
                )?;
            }
            if !Option::is_none(&self.alt_label) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "altLabel",
                    &self.alt_label,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "altLabel",
                )?;
            }
            if !Option::is_none(&self.awarding_opportunity) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "awardingOpportunity",
                    &self.awarding_opportunity,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "awardingOpportunity",
                )?;
            }
            if !Option::is_none(&self.category) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "category",
                    &self.category,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "category",
                )?;
            }
            if !Option::is_none(&self.credit_point) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "creditPoint",
                    &self.credit_point,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "creditPoint",
                )?;
            }
            if !Option::is_none(&self.date_modified) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dateModified",
                    &self.date_modified,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "dateModified",
                )?;
            }
            if !Option::is_none(&self.dc_type) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "dcType",
                    &self.dc_type,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "dcType")?;
            }
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.education_level) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "educationLevel",
                    &self.education_level,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "educationLevel",
                )?;
            }
            if !Option::is_none(&self.education_subject) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "educationSubject",
                    &self.education_subject,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "educationSubject",
                )?;
            }
            if !Option::is_none(&self.entitles_to) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "entitlesTo",
                    &self.entitles_to,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "entitlesTo",
                )?;
            }
            if !Option::is_none(&self.entry_requirement) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "entryRequirement",
                    &self.entry_requirement,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "entryRequirement",
                )?;
            }
            if !Option::is_none(&self.eqf_level) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "eqfLevel",
                    &self.eqf_level,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "eqfLevel",
                )?;
            }
            if !Option::is_none(&self.generalisation_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "generalisationOf",
                    &self.generalisation_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "generalisationOf",
                )?;
            }
            if !Option::is_none(&self.has_part) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hasPart",
                    &self.has_part,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "hasPart")?;
            }
            if !Option::is_none(&self.homepage) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "homepage",
                    &self.homepage,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "homepage",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.identifier) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "identifier",
                    &self.identifier,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "identifier",
                )?;
            }
            if !Option::is_none(&self.influenced_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "influencedBy",
                    &self.influenced_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "influencedBy",
                )?;
            }
            if !Option::is_none(&self.is_part_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartOf",
                    &self.is_part_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartOf",
                )?;
            }
            if !Option::is_none(&self.is_partial_qualification) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "isPartialQualification",
                    &self.is_partial_qualification,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "isPartialQualification",
                )?;
            }
            if !Option::is_none(&self.language) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "language",
                    &self.language,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "language",
                )?;
            }
            if !Option::is_none(&self.learning_outcome) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningOutcome",
                    &self.learning_outcome,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningOutcome",
                )?;
            }
            if !Option::is_none(&self.learning_outcome_summary) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningOutcomeSummary",
                    &self.learning_outcome_summary,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningOutcomeSummary",
                )?;
            }
            if !Option::is_none(&self.learning_setting) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "learningSetting",
                    &self.learning_setting,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "learningSetting",
                )?;
            }
            if !Option::is_none(&self.maximum_duration) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "maximumDuration",
                    &self.maximum_duration,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "maximumDuration",
                )?;
            }
            if !Option::is_none(&self.mode) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "mode",
                    &self.mode,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "mode")?;
            }
            if !Option::is_none(&self.nqf_level) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "nqfLevel",
                    &self.nqf_level,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "nqfLevel",
                )?;
            }
            if !Option::is_none(&self.proven_by) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "provenBy",
                    &self.proven_by,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "provenBy",
                )?;
            }
            if !Option::is_none(&self.qualification_code) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "qualificationCode",
                    &self.qualification_code,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "qualificationCode",
                )?;
            }
            if !Option::is_none(&self.specialisation_of) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "specialisationOf",
                    &self.specialisation_of,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "specialisationOf",
                )?;
            }
            if !Option::is_none(&self.status) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "status",
                    &self.status,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "status")?;
            }
            if !Option::is_none(&self.supplementary_document) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                    &self.supplementary_document,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "supplementaryDocument",
                )?;
            }
            if !Option::is_none(&self.target_group) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "targetGroup",
                    &self.target_group,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "targetGroup",
                )?;
            }
            if !Option::is_none(&self.thematic_area) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "thematicArea",
                    &self.thematic_area,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "thematicArea",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            if !Option::is_none(&self.volume_of_learning) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "volumeOfLearning",
                    &self.volume_of_learning,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "volumeOfLearning",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl Qualification {
    pub fn tag() -> QualificationTag {
        QualificationTag::default()
    }
}
/// Tag matching the struct name
pub struct QualificationTag(String);
#[automatically_derived]
impl ::core::clone::Clone for QualificationTag {
    #[inline]
    fn clone(&self) -> QualificationTag {
        QualificationTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for QualificationTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "QualificationTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for QualificationTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "QualificationTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for QualificationTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for QualificationTag {
    fn default() -> Self {
        Self("Qualification".to_string())
    }
}
impl<'de> Deserialize<'de> for QualificationTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "Qualification" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"Qualification",
                ),
            )
        } else {
            Ok(QualificationTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct ResultCategory {
    pub count: PositiveInteger,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub label: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maximum_score: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minimum_score: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub score: Option<String>,
    #[serde(rename = "type")]
    pub type_: ResultCategoryTag,
}
#[automatically_derived]
impl ::core::clone::Clone for ResultCategory {
    #[inline]
    fn clone(&self) -> ResultCategory {
        ResultCategory {
            count: ::core::clone::Clone::clone(&self.count),
            id: ::core::clone::Clone::clone(&self.id),
            label: ::core::clone::Clone::clone(&self.label),
            maximum_score: ::core::clone::Clone::clone(&self.maximum_score),
            minimum_score: ::core::clone::Clone::clone(&self.minimum_score),
            score: ::core::clone::Clone::clone(&self.score),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ResultCategory {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "count",
            "id",
            "label",
            "maximum_score",
            "minimum_score",
            "score",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.count,
            &self.id,
            &self.label,
            &self.maximum_score,
            &self.minimum_score,
            &self.score,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "ResultCategory",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for ResultCategory {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 7",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "count" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "label" => _serde::__private::Ok(__Field::__field2),
                        "maximumScore" => _serde::__private::Ok(__Field::__field3),
                        "minimumScore" => _serde::__private::Ok(__Field::__field4),
                        "score" => _serde::__private::Ok(__Field::__field5),
                        "type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"count" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"label" => _serde::__private::Ok(__Field::__field2),
                        b"maximumScore" => _serde::__private::Ok(__Field::__field3),
                        b"minimumScore" => _serde::__private::Ok(__Field::__field4),
                        b"score" => _serde::__private::Ok(__Field::__field5),
                        b"type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<ResultCategory>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = ResultCategory;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct ResultCategory",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        PositiveInteger,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct ResultCategory with 7 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct ResultCategory with 7 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        ResultCategoryTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct ResultCategory with 7 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(ResultCategory {
                        count: __field0,
                        id: __field1,
                        label: __field2,
                        maximum_score: __field3,
                        minimum_score: __field4,
                        score: __field5,
                        type_: __field6,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<PositiveInteger> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<ResultCategoryTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("count"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        PositiveInteger,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("label"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "maximumScore",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "minimumScore",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("score"),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        ResultCategoryTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("count")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("label")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(ResultCategory {
                        count: __field0,
                        id: __field1,
                        label: __field2,
                        maximum_score: __field3,
                        minimum_score: __field4,
                        score: __field5,
                        type_: __field6,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "count",
                "id",
                "label",
                "maximumScore",
                "minimumScore",
                "score",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "ResultCategory",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<ResultCategory>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ResultCategory {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "ResultCategory",
                false as usize + 1 + if Option::is_none(&self.id) { 0 } else { 1 } + 1
                    + if Option::is_none(&self.maximum_score) { 0 } else { 1 }
                    + if Option::is_none(&self.minimum_score) { 0 } else { 1 }
                    + if Option::is_none(&self.score) { 0 } else { 1 } + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "count",
                &self.count,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "label",
                &self.label,
            )?;
            if !Option::is_none(&self.maximum_score) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "maximumScore",
                    &self.maximum_score,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "maximumScore",
                )?;
            }
            if !Option::is_none(&self.minimum_score) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "minimumScore",
                    &self.minimum_score,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "minimumScore",
                )?;
            }
            if !Option::is_none(&self.score) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "score",
                    &self.score,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "score")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl ResultCategory {
    pub fn tag() -> ResultCategoryTag {
        ResultCategoryTag::default()
    }
}
/// Tag matching the struct name
pub struct ResultCategoryTag(String);
#[automatically_derived]
impl ::core::clone::Clone for ResultCategoryTag {
    #[inline]
    fn clone(&self) -> ResultCategoryTag {
        ResultCategoryTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ResultCategoryTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "ResultCategoryTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ResultCategoryTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "ResultCategoryTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for ResultCategoryTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for ResultCategoryTag {
    fn default() -> Self {
        Self("ResultCategory".to_string())
    }
}
impl<'de> Deserialize<'de> for ResultCategoryTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "ResultCategory" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"ResultCategory",
                ),
            )
        } else {
            Ok(ResultCategoryTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct ResultDistribution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result_category: Option<OneOrMany<ResultCategory>>,
    #[serde(rename = "type")]
    pub type_: ResultDistributionTag,
}
#[automatically_derived]
impl ::core::clone::Clone for ResultDistribution {
    #[inline]
    fn clone(&self) -> ResultDistribution {
        ResultDistribution {
            description: ::core::clone::Clone::clone(&self.description),
            id: ::core::clone::Clone::clone(&self.id),
            result_category: ::core::clone::Clone::clone(&self.result_category),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ResultDistribution {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field4_finish(
            f,
            "ResultDistribution",
            "description",
            &self.description,
            "id",
            &self.id,
            "result_category",
            &self.result_category,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for ResultDistribution {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 4",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "description" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "resultCategory" => _serde::__private::Ok(__Field::__field2),
                        "type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"description" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"resultCategory" => _serde::__private::Ok(__Field::__field2),
                        b"type" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<ResultDistribution>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = ResultDistribution;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct ResultDistribution",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<OneOrMany<ResultCategory>>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        ResultDistributionTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct ResultDistribution with 4 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(ResultDistribution {
                        description: __field0,
                        id: __field1,
                        result_category: __field2,
                        type_: __field3,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<OneOrMany<ResultCategory>>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<ResultDistributionTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "resultCategory",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<OneOrMany<ResultCategory>>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        ResultDistributionTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(ResultDistribution {
                        description: __field0,
                        id: __field1,
                        result_category: __field2,
                        type_: __field3,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "description",
                "id",
                "resultCategory",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "ResultDistribution",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<ResultDistribution>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ResultDistribution {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "ResultDistribution",
                false as usize + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.result_category) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.result_category) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "resultCategory",
                    &self.result_category,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "resultCategory",
                )?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl ResultDistribution {
    pub fn tag() -> ResultDistributionTag {
        ResultDistributionTag::default()
    }
}
/// Tag matching the struct name
pub struct ResultDistributionTag(String);
#[automatically_derived]
impl ::core::clone::Clone for ResultDistributionTag {
    #[inline]
    fn clone(&self) -> ResultDistributionTag {
        ResultDistributionTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ResultDistributionTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "ResultDistributionTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ResultDistributionTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "ResultDistributionTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for ResultDistributionTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for ResultDistributionTag {
    fn default() -> Self {
        Self("ResultDistribution".to_string())
    }
}
impl<'de> Deserialize<'de> for ResultDistributionTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "ResultDistribution" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"ResultDistribution",
                ),
            )
        } else {
            Ok(ResultDistributionTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct CredentialSchema {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(rename = "type")]
    pub type_: CredentialSchemaType,
}
#[automatically_derived]
impl ::core::clone::Clone for CredentialSchema {
    #[inline]
    fn clone(&self) -> CredentialSchema {
        CredentialSchema {
            id: ::core::clone::Clone::clone(&self.id),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for CredentialSchema {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field2_finish(
            f,
            "CredentialSchema",
            "id",
            &self.id,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for CredentialSchema {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 2",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"type" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<CredentialSchema>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = CredentialSchema;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct CredentialSchema",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        CredentialSchemaType,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct CredentialSchema with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(CredentialSchema {
                        id: __field0,
                        type_: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<CredentialSchemaType> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        CredentialSchemaType,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(CredentialSchema {
                        id: __field0,
                        type_: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "CredentialSchema",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<CredentialSchema>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for CredentialSchema {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "CredentialSchema",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl CredentialSchema {
    pub fn tag() -> CredentialSchemaTag {
        CredentialSchemaTag::default()
    }
}
/// Tag matching the struct name
pub struct CredentialSchemaTag(String);
#[automatically_derived]
impl ::core::clone::Clone for CredentialSchemaTag {
    #[inline]
    fn clone(&self) -> CredentialSchemaTag {
        CredentialSchemaTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for CredentialSchemaTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "CredentialSchemaTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for CredentialSchemaTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "CredentialSchemaTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for CredentialSchemaTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for CredentialSchemaTag {
    fn default() -> Self {
        Self("CredentialSchema".to_string())
    }
}
impl<'de> Deserialize<'de> for CredentialSchemaTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "CredentialSchema" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"CredentialSchema",
                ),
            )
        } else {
            Ok(CredentialSchemaTag(val))
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct ShortenedGrading {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub percentage_equal: i32,
    pub percentage_higher: i32,
    pub percentage_lower: i32,
    #[serde(rename = "type")]
    pub type_: ShortenedGradingTag,
}
#[automatically_derived]
impl ::core::clone::Clone for ShortenedGrading {
    #[inline]
    fn clone(&self) -> ShortenedGrading {
        ShortenedGrading {
            id: ::core::clone::Clone::clone(&self.id),
            percentage_equal: ::core::clone::Clone::clone(&self.percentage_equal),
            percentage_higher: ::core::clone::Clone::clone(&self.percentage_higher),
            percentage_lower: ::core::clone::Clone::clone(&self.percentage_lower),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ShortenedGrading {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field5_finish(
            f,
            "ShortenedGrading",
            "id",
            &self.id,
            "percentage_equal",
            &self.percentage_equal,
            "percentage_higher",
            &self.percentage_higher,
            "percentage_lower",
            &self.percentage_lower,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for ShortenedGrading {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 5",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "percentageEqual" => _serde::__private::Ok(__Field::__field1),
                        "percentageHigher" => _serde::__private::Ok(__Field::__field2),
                        "percentageLower" => _serde::__private::Ok(__Field::__field3),
                        "type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"percentageEqual" => _serde::__private::Ok(__Field::__field1),
                        b"percentageHigher" => _serde::__private::Ok(__Field::__field2),
                        b"percentageLower" => _serde::__private::Ok(__Field::__field3),
                        b"type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<ShortenedGrading>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = ShortenedGrading;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct ShortenedGrading",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        i32,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct ShortenedGrading with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        i32,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct ShortenedGrading with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        i32,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct ShortenedGrading with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        ShortenedGradingTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct ShortenedGrading with 5 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(ShortenedGrading {
                        id: __field0,
                        percentage_equal: __field1,
                        percentage_higher: __field2,
                        percentage_lower: __field3,
                        type_: __field4,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<i32> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<i32> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<i32> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<ShortenedGradingTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "percentageEqual",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "percentageHigher",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "percentageLower",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<i32>(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        ShortenedGradingTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("percentageEqual")?
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("percentageHigher")?
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("percentageLower")?
                        }
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(ShortenedGrading {
                        id: __field0,
                        percentage_equal: __field1,
                        percentage_higher: __field2,
                        percentage_lower: __field3,
                        type_: __field4,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "id",
                "percentageEqual",
                "percentageHigher",
                "percentageLower",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "ShortenedGrading",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<ShortenedGrading>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ShortenedGrading {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "ShortenedGrading",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1 + 1
                    + 1 + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "percentageEqual",
                &self.percentage_equal,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "percentageHigher",
                &self.percentage_higher,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "percentageLower",
                &self.percentage_lower,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl ShortenedGrading {
    pub fn tag() -> ShortenedGradingTag {
        ShortenedGradingTag::default()
    }
}
/// Tag matching the struct name
pub struct ShortenedGradingTag(String);
#[automatically_derived]
impl ::core::clone::Clone for ShortenedGradingTag {
    #[inline]
    fn clone(&self) -> ShortenedGradingTag {
        ShortenedGradingTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for ShortenedGradingTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "ShortenedGradingTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for ShortenedGradingTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "ShortenedGradingTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for ShortenedGradingTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for ShortenedGradingTag {
    fn default() -> Self {
        Self("ShortenedGrading".to_string())
    }
}
impl<'de> Deserialize<'de> for ShortenedGradingTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "ShortenedGrading" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"ShortenedGrading",
                ),
            )
        } else {
            Ok(ShortenedGradingTag(val))
        }
    }
}
pub struct TermsOfUseValue {
    ///Contains a URL that points to where more information about this instance of terms of use can be found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    ///Defines the type extension
    #[serde(rename = "type")]
    pub type_extension: String,
}
#[automatically_derived]
impl ::core::clone::Clone for TermsOfUseValue {
    #[inline]
    fn clone(&self) -> TermsOfUseValue {
        TermsOfUseValue {
            id: ::core::clone::Clone::clone(&self.id),
            type_extension: ::core::clone::Clone::clone(&self.type_extension),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for TermsOfUseValue {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field2_finish(
            f,
            "TermsOfUseValue",
            "id",
            &self.id,
            "type_extension",
            &&self.type_extension,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for TermsOfUseValue {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "type" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"type" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<TermsOfUseValue>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = TermsOfUseValue;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct TermsOfUseValue",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Option<String>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct TermsOfUseValue with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(TermsOfUseValue {
                        id: __field0,
                        type_extension: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Option<String>> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<String>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            _ => {
                                let _ = _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map)?;
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(TermsOfUseValue {
                        id: __field0,
                        type_extension: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["id", "type"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "TermsOfUseValue",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<TermsOfUseValue>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for TermsOfUseValue {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "TermsOfUseValue",
                false as usize + if Option::is_none(&self.id) { 0 } else { 1 } + 1,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_extension,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
pub struct UriType(pub fluent_uri::Uri<String>);
#[automatically_derived]
impl ::core::clone::Clone for UriType {
    #[inline]
    fn clone(&self) -> UriType {
        UriType(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for UriType {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "UriType", &&self.0)
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for UriType {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<fluent_uri::Uri<String>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for UriType {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl ::core::cmp::Ord for UriType {
    #[inline]
    fn cmp(&self, other: &UriType) -> ::core::cmp::Ordering {
        ::core::cmp::Ord::cmp(&self.0, &other.0)
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for UriType {}
#[automatically_derived]
impl ::core::cmp::PartialEq for UriType {
    #[inline]
    fn eq(&self, other: &UriType) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::PartialOrd for UriType {
    #[inline]
    fn partial_cmp(
        &self,
        other: &UriType,
    ) -> ::core::option::Option<::core::cmp::Ordering> {
        ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
    }
}
impl ops::Deref for UriType {
    type Target = fluent_uri::Uri<String>;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Serialize for UriType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(&self.to_string())
    }
}
impl<'de> Deserialize<'de> for UriType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: de::Deserializer<'de>,
    {
        let value = String::deserialize(deserializer)?;
        let uri = fluent_uri::Uri::parse(value.clone());
        match uri {
            Ok(uri) => Ok(UriType(uri)),
            Err(err) => Err(<D::Error as de::Error>::custom(err)),
        }
    }
}
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct VerificationCheck {
    pub dc_type: Concept,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<LangKVPairs>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub elm_subject: Option<EuropeanDigitalCredential>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    pub subject: serde_json::Value,
    pub verification_status: Concept,
    #[serde(rename = "type")]
    pub type_: VerificationCheckTag,
}
#[automatically_derived]
impl ::core::clone::Clone for VerificationCheck {
    #[inline]
    fn clone(&self) -> VerificationCheck {
        VerificationCheck {
            dc_type: ::core::clone::Clone::clone(&self.dc_type),
            description: ::core::clone::Clone::clone(&self.description),
            elm_subject: ::core::clone::Clone::clone(&self.elm_subject),
            id: ::core::clone::Clone::clone(&self.id),
            subject: ::core::clone::Clone::clone(&self.subject),
            verification_status: ::core::clone::Clone::clone(&self.verification_status),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for VerificationCheck {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        let names: &'static _ = &[
            "dc_type",
            "description",
            "elm_subject",
            "id",
            "subject",
            "verification_status",
            "type_",
        ];
        let values: &[&dyn ::core::fmt::Debug] = &[
            &self.dc_type,
            &self.description,
            &self.elm_subject,
            &self.id,
            &self.subject,
            &self.verification_status,
            &&self.type_,
        ];
        ::core::fmt::Formatter::debug_struct_fields_finish(
            f,
            "VerificationCheck",
            names,
            values,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for VerificationCheck {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __field5,
                __field6,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        5u64 => _serde::__private::Ok(__Field::__field5),
                        6u64 => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 7",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "dcType" => _serde::__private::Ok(__Field::__field0),
                        "description" => _serde::__private::Ok(__Field::__field1),
                        "elmSubject" => _serde::__private::Ok(__Field::__field2),
                        "id" => _serde::__private::Ok(__Field::__field3),
                        "subject" => _serde::__private::Ok(__Field::__field4),
                        "verificationStatus" => _serde::__private::Ok(__Field::__field5),
                        "type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"dcType" => _serde::__private::Ok(__Field::__field0),
                        b"description" => _serde::__private::Ok(__Field::__field1),
                        b"elmSubject" => _serde::__private::Ok(__Field::__field2),
                        b"id" => _serde::__private::Ok(__Field::__field3),
                        b"subject" => _serde::__private::Ok(__Field::__field4),
                        b"verificationStatus" => _serde::__private::Ok(__Field::__field5),
                        b"type" => _serde::__private::Ok(__Field::__field6),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<VerificationCheck>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = VerificationCheck;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct VerificationCheck",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct VerificationCheck with 7 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<EuropeanDigitalCredential>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        serde_json::Value,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct VerificationCheck with 7 elements",
                                ),
                            );
                        }
                    };
                    let __field5 = match _serde::de::SeqAccess::next_element::<
                        Concept,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    5usize,
                                    &"struct VerificationCheck with 7 elements",
                                ),
                            );
                        }
                    };
                    let __field6 = match _serde::de::SeqAccess::next_element::<
                        VerificationCheckTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    6usize,
                                    &"struct VerificationCheck with 7 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(VerificationCheck {
                        dc_type: __field0,
                        description: __field1,
                        elm_subject: __field2,
                        id: __field3,
                        subject: __field4,
                        verification_status: __field5,
                        type_: __field6,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<
                        Option<EuropeanDigitalCredential>,
                    > = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<serde_json::Value> = _serde::__private::None;
                    let mut __field5: _serde::__private::Option<Concept> = _serde::__private::None;
                    let mut __field6: _serde::__private::Option<VerificationCheckTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("dcType"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "description",
                                        ),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "elmSubject",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<EuropeanDigitalCredential>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "subject",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        serde_json::Value,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field5 => {
                                if _serde::__private::Option::is_some(&__field5) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "verificationStatus",
                                        ),
                                    );
                                }
                                __field5 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<Concept>(&mut __map)?,
                                );
                            }
                            __Field::__field6 => {
                                if _serde::__private::Option::is_some(&__field6) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field6 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        VerificationCheckTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("dcType")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("subject")?
                        }
                    };
                    let __field5 = match __field5 {
                        _serde::__private::Some(__field5) => __field5,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("verificationStatus")?
                        }
                    };
                    let __field6 = match __field6 {
                        _serde::__private::Some(__field6) => __field6,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(VerificationCheck {
                        dc_type: __field0,
                        description: __field1,
                        elm_subject: __field2,
                        id: __field3,
                        subject: __field4,
                        verification_status: __field5,
                        type_: __field6,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "dcType",
                "description",
                "elmSubject",
                "id",
                "subject",
                "verificationStatus",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "VerificationCheck",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<VerificationCheck>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for VerificationCheck {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "VerificationCheck",
                false as usize + 1
                    + if Option::is_none(&self.description) { 0 } else { 1 }
                    + if Option::is_none(&self.elm_subject) { 0 } else { 1 }
                    + if Option::is_none(&self.id) { 0 } else { 1 } + 1 + 1 + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "dcType",
                &self.dc_type,
            )?;
            if !Option::is_none(&self.description) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "description",
                    &self.description,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "description",
                )?;
            }
            if !Option::is_none(&self.elm_subject) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "elmSubject",
                    &self.elm_subject,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "elmSubject",
                )?;
            }
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "subject",
                &self.subject,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "verificationStatus",
                &self.verification_status,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl VerificationCheck {
    pub fn tag() -> VerificationCheckTag {
        VerificationCheckTag::default()
    }
}
/// Tag matching the struct name
pub struct VerificationCheckTag(String);
#[automatically_derived]
impl ::core::clone::Clone for VerificationCheckTag {
    #[inline]
    fn clone(&self) -> VerificationCheckTag {
        VerificationCheckTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for VerificationCheckTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(
            f,
            "VerificationCheckTag",
            &&self.0,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for VerificationCheckTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "VerificationCheckTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for VerificationCheckTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for VerificationCheckTag {
    fn default() -> Self {
        Self("VerificationCheck".to_string())
    }
}
impl<'de> Deserialize<'de> for VerificationCheckTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "VerificationCheck" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"VerificationCheck",
                ),
            )
        } else {
            Ok(VerificationCheckTag(val))
        }
    }
}
#[serde(deny_unknown_fields)]
pub struct WebResource {
    #[serde(rename = "contentURL")]
    pub content_url: UriType,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<UriType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<Concept>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<LangKVPairs>,
    #[serde(rename = "type")]
    pub type_: WebResourceTag,
}
#[automatically_derived]
impl ::core::clone::Clone for WebResource {
    #[inline]
    fn clone(&self) -> WebResource {
        WebResource {
            content_url: ::core::clone::Clone::clone(&self.content_url),
            id: ::core::clone::Clone::clone(&self.id),
            language: ::core::clone::Clone::clone(&self.language),
            title: ::core::clone::Clone::clone(&self.title),
            type_: ::core::clone::Clone::clone(&self.type_),
        }
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for WebResource {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field5_finish(
            f,
            "WebResource",
            "content_url",
            &self.content_url,
            "id",
            &self.id,
            "language",
            &self.language,
            "title",
            &self.title,
            "type_",
            &&self.type_,
        )
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for WebResource {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"field index 0 <= i < 5",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "contentURL" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        "language" => _serde::__private::Ok(__Field::__field2),
                        "title" => _serde::__private::Ok(__Field::__field3),
                        "type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"contentURL" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        b"language" => _serde::__private::Ok(__Field::__field2),
                        b"title" => _serde::__private::Ok(__Field::__field3),
                        b"type" => _serde::__private::Ok(__Field::__field4),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_field(__value, FIELDS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<WebResource>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = WebResource;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct WebResource",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        UriType,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct WebResource with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        Option<UriType>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match _serde::de::SeqAccess::next_element::<
                        Option<Concept>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match _serde::de::SeqAccess::next_element::<
                        Option<LangKVPairs>,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match _serde::de::SeqAccess::next_element::<
                        WebResourceTag,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct WebResource with 5 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(WebResource {
                        content_url: __field0,
                        id: __field1,
                        language: __field2,
                        title: __field3,
                        type_: __field4,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<UriType> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<Option<UriType>> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<Option<Concept>> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<Option<LangKVPairs>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<WebResourceTag> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "contentURL",
                                        ),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<UriType>(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<UriType>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "language",
                                        ),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<Concept>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        Option<LangKVPairs>,
                                    >(&mut __map)?,
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("type"),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<
                                        WebResourceTag,
                                    >(&mut __map)?,
                                );
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("contentURL")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => _serde::__private::Default::default(),
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("type")?
                        }
                    };
                    _serde::__private::Ok(WebResource {
                        content_url: __field0,
                        id: __field1,
                        language: __field2,
                        title: __field3,
                        type_: __field4,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "contentURL",
                "id",
                "language",
                "title",
                "type",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "WebResource",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<WebResource>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for WebResource {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "WebResource",
                false as usize + 1 + if Option::is_none(&self.id) { 0 } else { 1 }
                    + if Option::is_none(&self.language) { 0 } else { 1 }
                    + if Option::is_none(&self.title) { 0 } else { 1 } + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "contentURL",
                &self.content_url,
            )?;
            if !Option::is_none(&self.id) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "id",
                    &self.id,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "id")?;
            }
            if !Option::is_none(&self.language) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "language",
                    &self.language,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(
                    &mut __serde_state,
                    "language",
                )?;
            }
            if !Option::is_none(&self.title) {
                _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "title",
                    &self.title,
                )?;
            } else {
                _serde::ser::SerializeStruct::skip_field(&mut __serde_state, "title")?;
            }
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "type",
                &self.type_,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl WebResource {
    pub fn tag() -> WebResourceTag {
        WebResourceTag::default()
    }
}
/// Tag matching the struct name
pub struct WebResourceTag(String);
#[automatically_derived]
impl ::core::clone::Clone for WebResourceTag {
    #[inline]
    fn clone(&self) -> WebResourceTag {
        WebResourceTag(::core::clone::Clone::clone(&self.0))
    }
}
#[automatically_derived]
impl ::core::fmt::Debug for WebResourceTag {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_tuple_field1_finish(f, "WebResourceTag", &&self.0)
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for WebResourceTag {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            _serde::Serializer::serialize_newtype_struct(
                __serializer,
                "WebResourceTag",
                &self.0,
            )
        }
    }
};
impl ::std::ops::Deref for WebResourceTag {
    type Target = String;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl Default for WebResourceTag {
    fn default() -> Self {
        Self("WebResource".to_string())
    }
}
impl<'de> Deserialize<'de> for WebResourceTag {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let val = String::deserialize(deserializer)?;
        if &val != "WebResource" {
            Err(
                serde::de::Error::invalid_value(
                    serde::de::Unexpected::Str(&val),
                    &"WebResource",
                ),
            )
        } else {
            Ok(WebResourceTag(val))
        }
    }
}
